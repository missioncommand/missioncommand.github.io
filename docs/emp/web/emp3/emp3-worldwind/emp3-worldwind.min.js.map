{"version":3,"sources":["../../../src/mapengine/worldwind/worldwind-map-engine.js","../../../src/mapengine/worldwind/EMPWorldWind.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpWMSLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpKMLLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpFeature.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.constants.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.utils.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.primitiveBuilders.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.EditorController.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.mouse.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.touch.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.drag.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.pointer.js"],"names":["EMPWorldWind","window","emp","engineDefs","worldWindMapEngine","args","empMapInstance","mapInstance","empWorldWind","engineInterface","map","createEngineTemplate","mapEngineExposed","implementation","displayName","version","capabilities","mapType","type3D","type2_5D","formats","GEOJSON_BASIC","plot","draw","edit","GEOJSON_FULL","WMS","version_1_1","version_1_3","elevationData","KML_BASIC","KML_COMPLEX","IMAGE","MILSTD","version2525B","version2525C","AIRSPACE","AOI","settings","milstd","iconSize","labelOption","requirements","wmsCapabilities","projection","flat","initialize","succeed","empWorldWindInstance","engineDirect","name","ref","eventing","StatusChange","status","states","READY","err","console","error","fail","MAP_INSTANCE_INIT_FAILED","view","set","transaction","altitude","bottomLeft","topRight","feature","bufferScale","t1","t2","toRad","Math","PI","items","globalType","location","latitude","lat","longitude","lon","tilt","roll","heading","bounds","west","south","east","north","pow","sin","WorldWind","EARTH_RADIUS","asin","sqrt","cos","format","emp3","api","enums","FeatureTypeEnum","GEO_CIRCLE","properties","radius","GEO_ELLIPSE","max","semiMajor","semiMinor","GEO_RECTANGLE","width","height","GEO_SQUARE","GEO_ACM","coordinates","failures","push","animate","pause","animateCB","getCenter","getBounds","run","eventHandlers","notifyViewChange","call","CameraEventEnum","CAMERA_MOTION_STOPPED","CAMERA_IN_MOTION","centerOnLocation","lookAt","range","overlay","add","rc","failList","util","each","addLayer","success","typeLibrary","Error","coreId","message","level","MINOR","remove","removeLayer","overlayId","wms","addWMS","removeWMS","itemsCount","length","plotFeature","featureCount","cbArgs","bind","this","unplotFeature","mil2525","icon","labels","setLabelStyle","getLatLonFromXY","pickPoint","Vec2","x","y","terrainObject","worldWindow","pickTerrain","position","undefined","visibility","featureId","features","setVisible","visible","refresh","config","bRangeChanged","configHandlers","brightness","value","setContrast","milStdIconLabels","renderingOptimization","utils","defined","enableRenderingOptimization","midDistanceThreshold","singlePointAltitudeRanges","mid","farDistanceThreshold","high","selectionScale","setSelectionScale","selectionColor","setSelectionColor","prop","hasOwnProperty","singlePointAltitudeRangeMode","getSinglePointAltitudeRangeMode","navigator","navigation","enable","setLockState","selection","selectFeatures","failed","capture","screenshot","dataUrl","state","destroy","shutdown","kmllayer","_complete","id","kmlLayer","addKML","removeKML","isV2Core","Map","wwd","layers","pixelSize","drawing","editing","dragging","lastInteractionEvent","lockState","MapMotionLockEnum","UNLOCKED","lastRender","selectionStyle","scale","lineColor","fillColor","autoPanning","step","up","down","left","right","labelStyles","V","L","S","AA","AB","AC","H","M","T","T1","CN","C","F","G","H1","H2","J","K","N","P","W","W1","X","Y","Z","constants","SinglePointAltitudeRangeMode","LOW_RANGE","empSelections","optimizationMapMoveEpsilon","EPSILON7","lastNavigator","shapesInViewArea","secRendererWorker","A","prototype","_redrawAllFeatures","Object","keys","featureKey","_createContrastLayers","blackContrastLayer","SurfaceSector","Sector","FULL_SPHERE","attributes","interiorColor","Color","drawOutline","whiteContrastLayer","contrastLayer","RenderableLayer","pickEnabled","addRenderable","_addEventHandlers","eventClass","eventHandler","addEventListener","_setInitialExtent","extent","alt","centerLat","centerLon","isNaN","Location","greatCircleDistance","_applyConfigProperties","far","goToAnimator","GoToAnimator","dragRecognizer","DragRecognizer","canvas","event","drag","lookAtLocation","helpers","copyObject","configProperties","Worker","configuration","baseUrl","onerror","armyc2","c2sd","renderer","utilities","ErrorLogger","LogException","onmessage","e","rendererData","data","result","index","wwFeature","shapes","geojson","i","componentFeature","strokeWidth","strokeWeight","geometry","type","lineCount","j","subGeoJSON","editors","primitiveBuilders","constructSurfacePolylineFromGeoJSON","constructTextFromGeoJSON","constructSurfacePolygonFromGeoJSON","layer","getLayer","rootOverlayId","removeFeature","clearShapes","addShapes","selected","isFeatureSelected","addFeature","redraw","empOverlay","EmpLayer","featureKeys","removeFeatureSelection","_getLocation","Position","travelTime","globeMoveTime","goTo","_completeLookAtMotion","callback","_callback","EmpFeature","EditorController","updateFeature","parentCoreId","removeFeatureById","messge","selectedFeature","select","storeFeatureSelection","enableLayer","subLayer","_handleSubLayers","subLayers","getSubLayer","_removeLayer","layerTypes","layerType","ARCGIS_93_REST_LAYER","BING_LAYER","IMAGE_LAYER","OSM_LAYER","TMS_LAYER","WMS_LAYER","WMTS_LAYER","indexOf","layerExists","enabled","wmsLayer","EmpWMSLayer","kml","cb","kmlFilePromise","EmpKMLLayer","KmlFile","url","then","kmlFile","kmlRenderableLayer","catch","Boolean","getFeatureSelection","getSelections","isMultiPointPresent","multiPointCollection","getMultiPoint","storeMultiPoint","multiPoint","removeMultiPoint","isAirspacePresent","airspaceCollection","getAirspace","storeAirspace","airspace","removeAirspace","getSinglePoints","singlePointCollection","isSinglePointPresent","getSinglePoint","storeSinglePoint","singlePoint","removeSinglePoint","getSinglePointCount","isSinglePointIdOnHoldPresent","singlePointCollectionIdOnHold","getSinglePointIdOnHold","singlePointCollectionOnHold","storeSinglePointIdOnHold","singlePointId","removeSinglePointIdOnHold","getSinglePointsIdOnHold","getSinglePointsIdOnHoldCount","styles","style","includes","updateFeatureLabelStyle","triggerRenderUpdate","contrast","renderables","WHITE_CONTRAST","BLACK_CONTRAST","lock","spinGlobe","vertical","horizontal","goToPosition","_getVerticalPan","_getHorizontalPan","setTimeout","drawFrame","toDataURL","viewport","linearLocation","isMapMoving","equalsEpsilon","pickShapesInViewRegion","canvasCoordinates","boundRectangle","Rectangle","pickShapesInRegion","isMilStdMultiPointShapeInViewRegion","empFeature","p","inView","coordinate","color","_validateColor","_prefixColorString","startsWith","description","parentId","_overlay","defineProperty","enumerable","_layer","isFeaturePresent","shape","FeatureType","RENDERABLE","addFeatures","addFeatureChild","entity","childEntity","isFeatureChildPresent","parentFeature","childrenFeatureKeys","allocateFeatureChild","parentEntity","addSubLayer","isSubLayerPresent","isLayerEmpty","featuresLength","subOverlaysLength","getFeature","isFeaturePresentById","isPrimitive","PRIMITIVE","PRIMITIVE_COLLECTION","isDataSource","DATA_SOURCE","getFeatures","getSubLayers","removeFeatures","removeFeatureSelections","showFeatures","showFeature","oMultiPoint","childrenFeatureId","childrenEntity","featureType","ENTITY","show","billboard","reRenderBillboardRequired","path","polyline","polygon","label","rectangle","empCesium","COMPOUND_ENTITY","airspaceLabelPresent","airspaceLabel","get","oAirspace","oSinglePoint","removeSubLayers","showSubLayers","clearLayer","LayerType","showLayer","isVisible","deallocateFeatureChild","worldwind","removeRenderable","renderable","deallocateFeature","allocateFeature","featureChildrenLength","childrenFeatures","getFeatureChildrenEntityArray","childrenFeature","clearFeature","removeFeatureChild","featureChildrenEntityArray","removeSubLayer","subOverlay","SubLayers","removeSubLayerById","subLayersLength","layerNames","_wms","activeLayers","join","useProxy","global","urlProxy","service","sector","levelZeroDelta","numLevels","size","timeString","_wmsLayer","WmsLayer","_buildURL","_id","_altitudeMode","CLAMP_TO_GROUND","altMode","shapesCount","altitudeMode","_selected","highlighted","primitives","Array","isArray","userProperties","primitive","MAX_HEIGHT","globeWasMoving","globeWasZooming","extentBufferFactor","USE_DATA_SOURCE","NO_PANNING","METERS_PER_INCH","SCALE_LINE_LENGTH","propertyDefaults","FILL_COLOR_HEX","LINE_COLOR_HEX","LINE_WIDTH","selectionProperties","COLOR_HEX","WIDTH","SCALE","GROUND_PRIMITIVE","OVERLAY_LAYER","TERRAIN_LAYER","EntityType","BILLBOARD","BOX","CORRIDOR","CYLINDER","DESCRIPTION","ELLIPSE","ELLIPSOID","LABEL","MODEL","ORIENTATION","PATH","POLYGON","POLYLINE","POLYLINE_VOLUME","POSITION","RECTANGLE","VIEW_FROM","WALL","KML","MultiPointRenderType","JSON","GEOJSON","DATA_URL","CANVAS","CANVAS_LABEL_ONLY","SVG","SVG_LABEL_ONLY","MID_RANGE","HIGHEST_RANGE","RendererWorker","B","D","LabelStyle","REQUIRED_LABELS","COMMON_LABELS","ALL_LABELS","AllLabels","RendererSettings","standard","Symbology_2525Bch2_USAS_13_14","Symbology_2525C","modifierLookup","QUANTITY","REDUCED_OR_REINFORCED","STAFF_COMMENTS","ADDITIONAL_INFO_1","ADDITIONAL_INFO_2","ADDITIONAL_INFO_3","EVALUATION_RATING","COMBAT_EFFECTIVENESS","SIGNATURE_EQUIPMENT","HIGHER_FORMATION","HOSTILE","IFF_SIF","DIRECTION_OF_MOVEMENT","OFFSET_INDICATOR","UNIQUE_DESIGNATOR_1","UNIQUE_DESIGNATOR_2","EQUIPMENT_TYPE","DATE_TIME_GROUP","DATE_TIME_GROUP_2","ALTITUDE_DEPTH","LOCATION","SPEED","SPECIAL_C2_HEADQUARTERS","DISTANCE","AZIMUTH","FILL_COLOR","LINE_COLOR","TEXT_COLOR","X_OFFSET","X_UNITS","Y_OFFSET","Y_UNITS","NAME","STANDARD","highAltitudeRangeImage","highRangeImageRed","btoa","highRangeImageBlue","highRangeImageGreen","highRangeImageYellow","getEventCoordinates","clientX","clientY","screenX","screenY","updateModifierLabels","iconLabels","iconPixelSize","mod","modifiedModifiers","property","convertModifierStringTo2525","modifiers","showModLabels","standardModifiers","sModifier","modValue","parse","stringify","Modifiers","convertSymbolStandardToRendererFormat","checkForRequiredModifiers","item","symbolCode","oAM","oAN","basicSymbolCode","symbolDef","lonDistance","overrides","SymbolUtilities","getBasicSymbolID","checkSymbolStandard","SymbolDefTable","getSymbolDef","distance","azimuth","drawCategory","DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE","slice","DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE","splice","newVal","DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE","DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_LINE","coord0","coord1","pointCartographic0","pointCartographic1","dist","modifiersCopy","toLowerCase","featureMilStdVersionType","MILSTD_2525C","MILSTD_2525B","log","_hex6ToRGBA","hex","replace","r","g","b","parseInt","substring","red","green","blue","alpha","_hex8ToRGBA","a","hexToRGBA","normalize","newHex","normalizeRGBAColor","normalColor","assign","toString","boundsWidth","boundsHeight","selectHighAltitudeRangeImage","affiliationLetter","highScaleImageYellow","CameraAltitude","getFontInfo","_ModifierFont","_ModifierFontStyle","measurements","RendererUtilities","measureFont","relativeEpsilon","absoluteEpsilon","defaultValue","absDiff","abs","EPSILON1","EPSILON2","EPSILON3","EPSILON4","EPSILON5","EPSILON6","EPSILON8","EPSILON9","EPSILON10","EPSILON11","EPSILON12","EPSILON13","EPSILON14","EPSILON15","EPSILON16","EPSILON17","EPSILON18","EPSILON19","EPSILON20","GRAVITATIONALPARAMETER","SOLAR_RADIUS","LUNAR_RADIUS","SIXTY_FOUR_KILOBYTES","sign","signNotZero","_createPlacemarkAttributes","highlightAttributes","selectedLineColor","PlacemarkAttributes","drawLeaderLine","extrude","iconUrl","imageSource","labelAttributes","createTextAttributes","TextAttributes","imageScale","imageColor","YELLOW","offset","_createTextAttributes","selectedLabelColor","_createSurfaceShapeAttributes","selectedFillColor","ShapeAttributes","strokeStyle","strokeColor","outlineColor","BLACK","drawInterior","lineWidth","outlineWidth","outlineStippleFactor","stippleFactor","outlineStipplePattern","stipplePattern","textColor","Offset","OFFSET_FRACTION","depthTest","labelStyle","fontColor","family","font","fontFamily","justification","horizontalAlignment","labelAlign","fontSize","createShapeAttributes","GEO_MIL_SYMBOL","GEO_POINT","GEO_TEXT","GEO_PATH","GEO_POLYGON","constructAirControlMeasure","primitivePolygon","boundaries","len","maxAlt","Polygon","ABSOLUTE","constructSurfaceCircle","circlePrimitive","SurfaceCircle","constructSurfaceEllipse","ellipsePrimitive","SurfaceEllipse","constructSurfacePolyline","pathPrimitive","locations","SurfacePolyline","geoJSON","polylinePrimitive","lineOpacity","constructPlacemark","placemark","eyeDistanceScaling","Placemark","alwaysOnTop","constructSurfacePolygon","polygonPrimitive","boundaryLen","numBounds","subBoundary","SurfacePolygon","constructSurfaceRectangle","rectPrimitive","SurfaceRectangle","constructText","textPrimitive","GeographicText","selectedColor","_constructSinglePointMilStdSymbol","imageInfo","imageCenter","imageBounds","imageOffset","selectedImage","selectedModifiers","leaderLineAttributes","RED","WHITE","substr","MilStdIconRenderer","Render","getCenterPoint","getImageBounds","toDataUrl","LINECOLOR","FILLCOLOR","_constructMultiPointMilStdFeature","bbox","featureCoords","positions","split","trim","batch","pixelHeight","clientHeight","pixelWidth","clientWidth","fontInfo","globe","MilStdAttributes","GeoJSONFormat","batchObject","unescape","symbolID","symstd","points","postMessage","processModifiers","enhancedModifiers","override","lowRangeMode","constructMilStdSymbol","concat","asyncPlotKMLFeature","encodeURIComponent","buildShapes","empLayer","throttle","fn","threshold","scope","last","deferTimer","context","now","Date","arguments","clearTimeout","apply","viewEventType","ViewChange","_handleMidOrLowRange","isHighAltitudeRangeImage","singlePointAltitudeRangeChanged","_handleHighRange","_imageSource","_handleMultiPoint","wasClipped","_handleSinglePoint","callRenderer","iconLabelOption","extractFeatureFromEvent","mouseEvent","empEventingArgs","obj","pickList","pick","objects","isTerrain","userObject","target","mouse","throttleTime","_throttleWrapper","_notifyEMPPointing","coords","Pointer","EventType","MOVE","_notifyEMPViewChanged","click","clickEvent","SINGLE_CLICK","dblclick","dblClickEvent","DBL_CLICK","wheel","deltaY","wheelDeltaY","preventDefault","preventDefaultLockStates","NO_MOTION","NO_ZOOM_NO_PAN","NO_ZOOM","mousedown","mousedownEvent","MOUSEDOWN","mouseup","mouseupEvent","MOUSEUP","mousemove","_filterDuplicateMouseEvents","buttons","_handleSmartMotion","smartAreaBuffer","element","srcElement","originalTarget","elementBounds","getBoundingClientRect","pan","offsetX","offsetY","_checkForPreventDefault","NO_PAN","SMART_MOTION","touch","touchstart","touches","touchend","touchcancel","touchmove","began","changed","ended","pointer","pointerdown","pointerup","pointermove"],"mappings":"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","file":"emp3-worldwind.min.js","sourcesContent":["var EMPWorldWind = window.EMPWorldWind || {};\nvar emp = window.emp || {};\nemp.engineDefs = emp.engineDefs || {};\n\n\n/**\n * @classdesc EMP3 WorldWind Map Engine Interface\n *\n * @class Instantiates a WorldWind map for EMP\n * @param args\n * @returns {engineInterface}\n */\nemp.engineDefs.worldWindMapEngine = function(args) {\n\n  var empMapInstance = args.mapInstance;\n  /** @type EMPWorldWind.Map# */\n  var empWorldWind;\n\n  var engineInterface = emp.map.createEngineTemplate(),\n    mapEngineExposed = engineInterface;\n\n  engineInterface.implementation.displayName = \"WorldWind Map Engine\";\n  engineInterface.implementation.version = \"1.0.0\";\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.mapType.type2_5D = true;\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.draw = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.edit = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.edit = true;\n  engineInterface.capabilities.formats.WMS.version_1_1 = true;\n  engineInterface.capabilities.formats.WMS.version_1_3 = true;\n  engineInterface.capabilities.formats.WMS.elevationData = true;\n  engineInterface.capabilities.formats.KML_BASIC.plot = true;\n  engineInterface.capabilities.formats.KML_BASIC.draw = true;\n  engineInterface.capabilities.formats.KML_BASIC.edit = true;\n  engineInterface.capabilities.formats.KML_COMPLEX.plot = true;\n  engineInterface.capabilities.formats.IMAGE.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.edit = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.edit = true;\n  engineInterface.capabilities.formats.AIRSPACE.plot = true;\n  engineInterface.capabilities.formats.AIRSPACE.draw = true;\n  engineInterface.capabilities.formats.AIRSPACE.edit = true;\n  engineInterface.capabilities.formats.AOI.plot = true;\n  engineInterface.capabilities.formats.AOI.draw = true;\n  engineInterface.capabilities.formats.AOI.edit = true;\n  engineInterface.capabilities.settings.milstd.iconSize = true;\n  engineInterface.capabilities.settings.milstd.labelOption = true;\n  engineInterface.requirements.wmsCapabilities = true;\n  engineInterface.capabilities.projection.flat = false;\n\n  /**\n   * Initialization\n   * @param {EMPWorldWind.Map} empWorldWindInstance\n   */\n  engineInterface.initialize.succeed = function(empWorldWindInstance) {\n    // Add initialization code here\n    try {\n      empWorldWind = empWorldWindInstance;\n      empWorldWind.mapEngineExposed = mapEngineExposed;\n      emp.map.engineDirect = {name: \"worldwind\", ref: empWorldWind};\n\n      // Notify application that the map is ready to receive data\n      empMapInstance.eventing.StatusChange({\n        status: emp.map.states.READY\n      });\n    }\n    catch (err) {\n      window.console.error(\"Error initializing WorldWind \", err);\n    }\n  };\n\n  /**\n   * Indicates a failed loading\n   */\n  engineInterface.initialize.fail = function() {\n    empMapInstance.eventing.StatusChange({\n      status: emp.map.states.MAP_INSTANCE_INIT_FAILED\n    });\n  };\n\n  /**\n   * @todo drop this functionality into the map itself and expose a simpler call\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.set = function(transaction) {\n    var args, altitude, bottomLeft, topRight, feature, bufferScale,\n      t1, t2,\n      toRad = Math.PI / 180.0; // save a few divisions later\n\n    switch (transaction.items[0].globalType) {\n      case \"view\":\n        if (transaction.items[0].location) {\n          // Set camera\n          args = {\n            latitude: transaction.items[0].location.lat,\n            longitude: transaction.items[0].location.lon,\n            altitude: transaction.items[0].altitude,\n            tilt: transaction.items[0].tilt,\n            roll: transaction.items[0].roll,\n            heading: transaction.items[0].heading\n          };\n        }\n        else if (transaction.items[0].bounds) {\n          // Zoom to overlay\n\n          // Express lat/lon as radians\n          bottomLeft = {\n            lat: transaction.items[0].bounds.west * toRad,\n            lon: transaction.items[0].bounds.south * toRad\n          };\n\n          topRight = {\n            lat: transaction.items[0].bounds.east * toRad,\n            lon: transaction.items[0].bounds.north * toRad\n          };\n\n          t1 = Math.pow(Math.sin((topRight.lat - bottomLeft.lat) / 2), 2);\n          t2 = Math.pow(Math.sin((topRight.lon - bottomLeft.lon) / 2), 2);\n\n          // Haversine formula\n          // TODO see if we can replace this with WorldWind functionality\n          altitude = 2 * WorldWind.EARTH_RADIUS * Math.asin(Math.sqrt(t1 + Math.cos(topRight.lat) * Math.cos(bottomLeft.lat) * t2));\n\n          args = {\n            latitude: (transaction.items[0].bounds.north + transaction.items[0].bounds.south) / 2,\n            longitude: (transaction.items[0].bounds.east + transaction.items[0].bounds.west) / 2,\n            altitude: altitude,\n            tilt: 0,\n            roll: 0,\n            heading: 0\n          };\n        }\n        break;\n      case \"feature\":\n        bufferScale = 2.25; // Assume conic view from the camera\n        feature = transaction.items[0];\n        switch (feature.format) {\n          case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n            altitude = feature.properties.radius * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n            altitude = Math.max(feature.properties.semiMajor, feature.properties.semiMinor) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n            altitude = Math.max(feature.properties.width, feature.properties.height) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n            altitude = feature.properties.width * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO compute bounding box diagonal distance\n          default:\n            altitude = 10000; // Default to 10000m\n        }\n\n        args = {\n          latitude: transaction.items[0].coordinates[1],\n          longitude: transaction.items[0].coordinates[0],\n          altitude: altitude,\n          tilt: 0,\n          roll: 0,\n          heading: 0\n        };\n        break;\n      default:\n        transaction.failures.push(transaction.items[0]);\n    }\n\n    // Check if we are animating\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n\n        // If we animated update the returned values\n        transaction.items[0].location = {\n          lat: empWorldWind.getCenter().latitude,\n          lon: empWorldWind.getCenter().longitude\n        };\n        transaction.items[0].bounds = empWorldWind.getBounds();\n\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n\n    // Notify start of movement\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    empWorldWind.centerOnLocation(args);\n\n    // Set initial transaction return values, to be overwritten if the move is animated\n    transaction.items[0].location = {\n      lat: empWorldWind.getCenter().latitude,\n      lon: empWorldWind.getCenter().longitude\n    };\n    transaction.items[0].bounds = empWorldWind.getBounds();\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.lookAt.set = function(transaction) {\n    var args = {\n      latitude: transaction.items[0].latitude,\n      longitude: transaction.items[0].longitude,\n      altitude: transaction.items[0].altitude,\n      range: transaction.items[0].range,\n      tilt: transaction.items[0].tilt,\n      heading: transaction.items[0].heading\n    };\n\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n    empWorldWind.lookAt(args);\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.add = function(transaction) {\n    var rc,\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.addLayer(overlay);\n\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message,\n          level: emp.typeLibrary.Error.level.MINOR\n        }));\n      }\n    });\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.remove = function(transaction) {\n    var rc = {},\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.removeLayer(overlay.overlayId);\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message\n        }));\n      }\n    });\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.add = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.addWMS(wms);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.remove = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.removeWMS(wms);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.add = function(transaction) {\n    var feature,\n      itemsCount = transaction.items.length;\n\n    // Pause the transaction\n    transaction.pause();\n\n    while (itemsCount) {\n      // Note pre-decrement\n      feature = transaction.items[--itemsCount];\n\n      empWorldWind.plotFeature(feature, function(featureCount, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error({\n            feature: cbArgs.feature\n          }));\n        }\n\n        // All items have been processed\n        if (featureCount === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemsCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.remove = function(transaction) {\n    var rc;\n    emp.util.each(transaction.items, function(feature) {\n      rc = empWorldWind.unplotFeature(feature);\n      if (!rc.success) {\n        transaction.fail(new emp.typeLibrary.Error({\n          message: rc.message\n        }));\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   * @deprecated\n   */\n  engineInterface.settings.mil2525.icon.labels.set = function(transaction) {\n    empWorldWind.setLabelStyle(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.getLatLonFromXY = function(transaction) {\n    var pickPoint = new WorldWind.Vec2(transaction.items[0].x, transaction.items[0].y);\n    var terrainObject = empWorldWind.worldWindow.pickTerrain(pickPoint).terrainObject();\n    transaction.items[0].lat = terrainObject ? terrainObject.position.latitude : undefined;\n    transaction.items[0].lon = terrainObject ? terrainObject.position.longitude : undefined;\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.visibility.set = function(transaction) {\n    emp.util.each(transaction.items, function(feature) {\n      if (feature.featureId in empWorldWind.features) {\n        empWorldWind.features[feature.featureId].setVisible(feature.visible);\n      }\n    });\n    empWorldWind.refresh();\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.map.config = function(transaction) {\n    var bRangeChanged;\n\n    var configHandlers = {\n      \"brightness\": function(value) {\n        empWorldWind.setContrast(value);\n      },\n      \"milStdIconLabels\": function(value) {\n        empWorldWind.setLabelStyle(value);\n      },\n      \"renderingOptimization\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.enableRenderingOptimization)) {\n          bRangeChanged = true;\n          empWorldWind.enableRenderingOptimization = value;\n        }\n      },\n      \"midDistanceThreshold\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.mid)) {\n          bRangeChanged = true;\n          empWorldWind.singlePointAltitudeRanges.mid = value;\n        }\n      },\n      \"farDistanceThreshold\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.high)) {\n          bRangeChanged = true;\n          empWorldWind.singlePointAltitudeRanges.high = value;\n          //empCesium.singlePointAltitudeRangeMode = cesiumEngine.utils.getSinglePointAltitudeRangeMode(empCesium.cameraAltitude, empCesium.singlePointAltitudeRanges);\n          //empCesium.processOnRangeChangeSinglePoints();\n        }\n      },\n      \"selectionScale\": function(value) {\n        empWorldWind.setSelectionScale(value);\n      },\n      \"selectionColor\": function(value) {\n        empWorldWind.setSelectionColor(value);\n      }\n    };\n\n    // Iterate through each transaction item, check for properties and apply them\n    emp.util.each(transaction.items, function(config) {\n      var prop, value;\n      for (prop in config) {\n        if (config.hasOwnProperty(prop)) {\n          // Skip meta data fields\n          if (prop === \"messageId\") {\n            continue;\n          }\n\n          // Extract the value\n          value = config[prop];\n\n          // Check if there is a handler for the property\n          if (configHandlers.hasOwnProperty(prop)) {\n            configHandlers[prop](value);\n          } else {\n            transaction.fail(new emp.typeLibrary.Error({\n              message: 'Config property ' + prop + ' is not supported by this engine'\n            }));\n          }\n\n          if (bRangeChanged) {\n            empWorldWind.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(empWorldWind.worldWindow.navigator.range, empWorldWind.singlePointAltitudeRanges);\n            // force a render update when the altitude range changes\n            empWorldWind.refresh();\n          }\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.navigation.enable = function(transaction) {\n    empWorldWind.setLockState(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.selection.set = function(transaction) {\n    var rc = empWorldWind.selectFeatures(transaction.items);\n    transaction.failures = rc.failed;\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.capture.screenshot = function(transaction) {\n    return transaction.items[0].dataUrl = empWorldWind.screenshot();\n  };\n\n  /**\n   * Destroys the current engine\n   */\n  engineInterface.state.destroy = function() {\n    if (empWorldWind) {\n      empWorldWind.shutdown();\n      empWorldWind = undefined;\n    }\n  };\n\n  /**\n   * Creates a KML layer\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.kmllayer.add = function(transaction) {\n    var items = transaction.items.length;\n\n    /**\n     * Resume the transaction once all items have been processed\n     * @private\n     */\n    function _complete(args) {\n      items--;\n\n      if (!args.success) {\n        transaction.failures.push(new emp.typeLibrary.Error({\n          message: args.message,\n          coreId: args.id\n        }));\n      }\n\n      // There are other layers to add\n      if (items > 0) {\n        return;\n      }\n\n      transaction.run();\n    }\n\n    // Pause the transaction, KML is async in WorldWind\n    transaction.pause();\n    emp.util.each(transaction.items, function(kmlLayer) {\n      empWorldWind.addKML(kmlLayer, _complete);\n    });\n  };\n\n  /**\n   * Remove a KML Layer\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.kmllayer.remove = function(transaction) {\n    emp.util.each(transaction.items, function (kmlLayer) {\n      empWorldWind.removeKML(kmlLayer);\n    });\n  };\n\n  // return the engineInterface object as a new engineTemplate instance\n  return engineInterface;\n};\n","/* global WorldWind */\n\n/**\n * @namespace\n */\nvar EMPWorldWind = {};\nEMPWorldWind.isV2Core = false;\n\n/**\n * @classdesc The main interface for interacting with NASA WebWorldWind. Any interaction with the WorldWindow will occur\n * in this class.\n *\n * @class\n * @param {WorldWind.WorldWindow} wwd\n */\nEMPWorldWind.Map = function(wwd) {\n  /**\n   * @type {WorldWind.WorldWindow}\n   */\n  this.worldWindow = wwd;\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpLayer>} */\n  this.layers = {};\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpFeature>} */\n  this.features = {};\n\n  /**\n   * This holds the state of the instance\n   * @memberof EMPWorldWind.Map#\n   */\n  this.state = {\n    /**\n     * Pixel size\n     */\n    pixelSize: 1,\n    /**\n     * Whether the map is in drawing mode\n     */\n    drawing: false,\n    /**\n     * Whether the map is in editing mode\n     */\n    editing: false,\n    /**\n     * Whether we are dragging\n     */\n    dragging: false,\n    /**\n     * Placeholder for the last detected mouse move/touch/pointer event\n     */\n    lastInteractionEvent: undefined,\n    /**\n     * Lock state\n     */\n    lockState: emp3.api.enums.MapMotionLockEnum.UNLOCKED,\n    /**\n     * Object for holding state to compute when MilStdSymbols should be re-rendered\n     */\n    lastRender: {\n      bounds: {\n        north: 0,\n        south: 0,\n        east: 0,\n        west: 0\n      },\n      altitude: 0\n    },\n    /**\n     * Default selection style\n     * @type SelectionStyle\n     */\n    selectionStyle: {\n      scale: 1,\n      lineColor: \"#FFFF00\",\n      fillColor: undefined\n    },\n    /**\n     * Object for describing autoPanning behavior\n     */\n    autoPanning: {\n      step: 0.5,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    },\n    /**\n     * Label styles for the renderer\n     */\n    labelStyles: {\n      \"V\": false,\n      \"L\": false,\n      \"S\": false,\n      \"AA\": false,\n      \"AB\": false,\n      \"AC\": true,\n      \"H\": false,\n      \"M\": false,\n      \"T\": false,\n      \"T1\": false,\n      \"CN\": false,\n      \"C\": false,\n      \"F\": false,\n      \"G\": false,\n      \"H1\": false,\n      \"H2\": false,\n      \"J\": false,\n      \"K\": false,\n      \"N\": false,\n      \"P\": false,\n      \"W\": false,\n      \"W1\": false,\n      \"X\": false,\n      \"Y\": false,\n      \"Z\": false\n    }\n  };\n\n  // Optimization for mil standard  single points.\n  /**\n   * Object for holding render optimization params\n   */\n  this.singlePointAltitudeRanges = {};\n  /**\n   * Mid-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.mid = 600000; // default\n  /**\n   * High-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.high = 1200000; // default\n  /**\n   * Current range mode\n   */\n  this.singlePointAltitudeRangeMode = EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n\n  /**\n   * Current set of selected objects\n   */\n  this.empSelections = {};\n  this.optimizationMapMoveEpsilon = EMPWorldWind.Math.EPSILON7;\n  this.lastNavigator = {};\n  this.shapesInViewArea = undefined;\n  this.bounds = undefined;\n\n  //SEC renderer worker for multipoints\n  this.secRendererWorker = {};\n  this.secRendererWorker.A = undefined;\n};\n\n// typedefs ============================================================================================================\n/**\n * @typedef {object} SelectionStyle\n * @property {number} scale\n * @property {string|undefined} lineColor\n * @property {string|undefined} fillColor\n */\n//======================================================================================================================\nEMPWorldWind.Map.prototype = function() {\n\n  // Private Functions =================================================================================================\n  /**\n   * Redraws all features on the map, useful when updating selectionStyle\n   */\n  function _redrawAllFeatures() {\n    emp.util.each(Object.keys(this.features), function(featureKey) {\n      var feature = this.features[featureKey];\n      this.plotFeature(feature);\n    }.bind(this));\n  }\n\n  // Public interface ==================================================================================================\n  return {\n    /**\n     * Creates the initial layers\n     * @param {object} args\n     * @param {Bounds} [args.extent]\n     * @param {object} [args.configProperties]\n     * @param {emp.map} args.mapInstance\n     */\n    initialize: function(args) {\n      /**\n       * @memberof EMPWorldWind.Map#\n       * @type {emp.map}\n       */\n      this.empMapInstance = args.mapInstance;\n\n      /**\n       *\n       * @private\n       */\n      function _createContrastLayers() {\n        // Create the contrast layers\n        var blackContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n        blackContrastLayer.attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0.0);\n        blackContrastLayer.attributes.drawOutline = false;\n\n        var whiteContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n        whiteContrastLayer.attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0.0);\n        whiteContrastLayer.attributes.drawOutline = false;\n\n        this.contrastLayer = new WorldWind.RenderableLayer('contrast layer');\n        this.contrastLayer.pickEnabled = false;\n        this.worldWindow.addLayer(this.contrastLayer);\n\n        this.contrastLayer.addRenderable(whiteContrastLayer);\n        this.contrastLayer.addRenderable(blackContrastLayer);\n      }\n\n      /**\n       *\n       * @private\n       */\n      function _addEventHandlers() {\n        // Register DOM event handlers\n        // var throttleValue = 50; // throttle on event calls in ms\n        var eventClass, eventHandler;\n        for (eventClass in EMPWorldWind.eventHandlers) {\n          if (EMPWorldWind.eventHandlers.hasOwnProperty(eventClass)) {\n            eventClass = EMPWorldWind.eventHandlers[eventClass];\n            for (eventHandler in eventClass) {\n              if (eventClass.hasOwnProperty(eventHandler)) {\n\n                // TODO remove this once throttling works again\n                this.worldWindow.addEventListener(eventHandler, eventClass[eventHandler].bind(this));\n\n                // TODO fix throttling is getting the way of event interception, affecting maplock\n                // this.worldWindow.addEventListener(eventHandler,\n                //   EMPWorldWind.eventHandlers.throttle(eventClass[eventHandler].bind(this), throttleValue, this)\n                // );\n              }\n            }\n          }\n        }\n      }\n\n      /**\n       *\n       * @param extent\n       * @private\n       */\n      function _setInitialExtent(extent) {\n        var alt;\n        extent = extent || {\n            centerLat: 44,\n            centerLon: 44\n          };\n\n        if (!isNaN(extent.north) && !isNaN(extent.south) && !isNaN(extent.east) && !isNaN(extent.west)) {\n          // Get approximate height from the width of the extent\n          alt = Math.PI * WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n              new WorldWind.Location(extent.north, extent.west),\n              new WorldWind.Location(extent.south, extent.east));\n\n          this.centerOnLocation({\n            latitude: (extent.north + extent.south) / 2,\n            longitude: (extent.east + extent.west) / 2,\n            altitude: alt\n          });\n        } else if (!isNaN(extent.centerLat) && !isNaN(extent.centerLon)) {\n          // Arbitrarily use 1e7 as altitude\n          this.centerOnLocation({\n            latitude: extent.centerLat,\n            longitude: extent.centerLon,\n            altitude: 1e7\n          });\n        }\n      }\n\n      /**\n       *\n       * @param config\n       * @private\n       */\n      function _applyConfigProperties(config) {\n        config = config || {};\n\n        if (EMPWorldWind.utils.defined(config.midDistanceThreshold)) {\n          this.singlePointAltitudeRanges.mid = config.midDistanceThreshold;\n        }\n\n        if (EMPWorldWind.utils.defined(config.farDistanceThreshold)) {\n          this.singlePointAltitudeRanges.far = config.farDistanceThreshold;\n        }\n\n        if (EMPWorldWind.utils.defined(config.brightness)) {\n          this.setContrast(config.brightness);\n        }\n      }\n\n      // Create the contrast Layers\n      _createContrastLayers.call(this);\n\n      // Create the goTo manipulator\n      /** @member {WorldWind.GoToAnimator} */\n      this.goToAnimator = new WorldWind.GoToAnimator(this.worldWindow);\n\n      // Register drag event handlers\n      /** @member {WorldWind.DragRecognizer} */\n      this.dragRecognizer = new WorldWind.DragRecognizer(this.worldWindow.canvas, function(event) {\n        if (event.state in EMPWorldWind.eventHandlers.drag) {\n          EMPWorldWind.eventHandlers.drag[event.state].call(this, event);\n        }\n      }.bind(this));\n\n      // Register event handlers\n      _addEventHandlers.call(this);\n\n      // Set initial extent\n      _setInitialExtent.call(this, args.extent);\n\n      // Store initial navigator settings\n      if (this.worldWindow.navigator) {\n        this.lastNavigator.range = this.worldWindow.navigator.range;\n        this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n        this.lastNavigator.roll = this.worldWindow.navigator.roll;\n        this.lastNavigator.heading = this.worldWindow.navigator.heading;\n        this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n      }\n\n      // Update any other config properties passed in\n      _applyConfigProperties.call(this, args.configProperties);\n\n      // Trigger an initial camera update to update EMP\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      //initialize sec worker\n      this.secRendererWorker.A = new Worker(WorldWind.configuration.baseUrl + 'renderer/MPCWorker.js');\n\n      this.secRendererWorker.A.onerror = function(error) {\n        //logs error to console\n        armyc2.c2sd.renderer.utilities.ErrorLogger.LogException(\"MPWorker A\", \"postMessage\", error);\n      };\n\n      this.secRendererWorker.A.onmessage = function(e) {\n        //var batchCall = false,\n        var rendererData = [];\n        if (e.data.id) //not a batch call\n        {\n          rendererData.push = e.data.result;\n        } else {\n          //batchCall = true;\n          rendererData = e.data.result;\n        }\n        if (rendererData && rendererData !== null && typeof rendererData === 'string') {\n          //console.log(\"Render error: \" + rendererData);\n          return;\n        }\n\n        for (var index = 0; index < rendererData.length; index++) {\n          if (!EMPWorldWind.utils.defined(rendererData[index])) {\n            //console.log(\"Render error: renderer data is undefined\");\n            return;\n          }\n          if (typeof rendererData[index] === 'string') {\n            //console.log(\"Render error: \" + rendererData[index]);\n            return;\n          }\n\n          if (EMPWorldWind.utils.defined(rendererData[index])) {\n            if (rendererData[index] && rendererData[index] !== null && typeof rendererData[index] === 'string') {\n              //result.success = false;\n              //result.message = rendererData[index];\n              //result.jsError = \"function: this.secRendererWorker.A.onmessage \";\n              return;\n            }\n\n            if (rendererData[index] && rendererData[index] !== null && typeof rendererData[index] !== 'string') {\n\n              var wwFeature = this.features[rendererData[index].id];\n              var shapes = [];\n              var data = rendererData[index].geojson;\n              //var data = JSON.parse(rendererData[index].geojson);\n              for (var i = 0; i < data.features.length; i++) {\n                var componentFeature = data.features[i];\n                // TODO have the renderer return the proper width, manually overwriting the line width for now\n                componentFeature.properties.strokeWidth = 1;\n                componentFeature.properties.strokeWeight = 1;\n                switch (componentFeature.geometry.type) {\n                  case \"MultiLineString\":\n                    var lineCount = componentFeature.geometry.coordinates.length;\n\n                    for (var j = 0; j < lineCount; j++) {\n                      var subGeoJSON = {\n                        properties: componentFeature.properties,\n                        coordinates: componentFeature.geometry.coordinates[j]\n                      };\n\n                      shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(subGeoJSON, this.state.selectionStyle));\n                    }\n                    break;\n                  case \"LineString\":\n                    shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(componentFeature, this.state.selectionStyle));\n                    break;\n                  case \"Point\":\n                    shapes.push(EMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON(componentFeature, this.state.selectionStyle));\n                    break;\n                  case \"Polygon\":\n                    shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON(componentFeature, this.state.selectionStyle));\n                    break;\n                  default:\n                    window.console.error(\"Unable to render symbol with type \" + componentFeature.geometry.type);\n                }\n              }\n              if (wwFeature) {\n                var layer = this.getLayer(this.rootOverlayId);\n                wwFeature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                layer.removeFeature(wwFeature);\n                // Clear the primitives from the feature\n                wwFeature.clearShapes();\n                wwFeature.addShapes(shapes);\n                wwFeature.feature.range = this.worldWindow.navigator.range;\n                // Update the empFeature stored in the wwFeature\n                //wwFeature.feature = empFeature;\n                wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n                // Update the layer\n                layer.addFeature(wwFeature);\n                this.worldWindow.redraw();\n              }\n            }\n          } //  if (this.defined(multiPointObject))\n        } // for loop\n      }.bind(this);\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Overlay} empOverlay\n     * @returns {{success: boolean, message: string}}\n     */\n    addLayer: function(empOverlay) {\n      var layer,\n        rc = {\n          success: false,\n          message: ''\n        };\n\n      if (empOverlay.overlayId in this.layers) {\n        rc = {\n          success: false,\n          message: \"An overlay with this id (\" + empOverlay.overlayId + \") already exists\"\n        };\n        return rc;\n      }\n\n      // Create the layer\n      layer = new EMPWorldWind.data.EmpLayer(empOverlay);\n      this.rootOverlayId = empOverlay.overlayId;\n      this.worldWindow.addLayer(layer.layer);\n\n      // Register the layer\n      this.layers[layer.id] = layer;\n\n      // Update the display\n      this.worldWindow.redraw();\n\n      rc.success = true;\n\n      return rc;\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Overlay | EMPWorldWind.data.EmpLayer} layer\n     * @returns {{success: boolean, message: string}}\n     */\n    removeLayer: function(layer) {\n      var featureKey, id,\n        result = {\n          success: false,\n          message: \"\"\n        };\n\n      id = layer.id || layer.coreId;\n      layer = this.getLayer(id);\n      if (layer) {\n        for (featureKey in layer.featureKeys) {\n          if (layer.featureKeys.hasOwnProperty(featureKey)) {\n            this.removeFeatureSelection(featureKey);\n          }\n        }\n\n        // Update the display\n        this.worldWindow.removeLayer(layer.layer);\n        this.worldWindow.redraw();\n\n        // Remove the record of the layer\n        delete this.layers[layer.id];\n\n        result.success = true;\n      } else {\n        result.message = \"No layer found with the id \" + id;\n      }\n\n      return result;\n    },\n    /**\n     *\n     * @param {object} args\n     * @param {number} args.latitude\n     * @param {number} args.longitude\n     * @param {number} [args.altitude]\n     * @param {number} [args.tilt]\n     * @param {number} [args.roll]\n     * @param {number} [args.heading]\n     * @param {boolean} [args.animate = false]\n     * @param {function} [args.animateCB]\n     */\n    centerOnLocation: function(args) {\n      var position;\n\n      /**\n       *\n       * @param args\n       * @returns {*}\n       * @private\n       */\n      function _getLocation(args) {\n        if (typeof args.altitude === \"number\") {\n          return new WorldWind.Position(args.latitude, args.longitude, args.altitude);\n        } else {\n          return new WorldWind.Location(args.latitude, args.longitude);\n        }\n      }\n\n      // Get the location\n      position = _getLocation(args);\n\n      // Set the navigator options\n      this.worldWindow.navigator.heading = args.heading || 0;\n      this.worldWindow.navigator.roll = args.roll || 0;\n      this.worldWindow.navigator.tilt = args.tilt || 0;\n\n      // Fire the move\n      this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n      this.goToAnimator.goTo(position, args.animateCB);\n    },\n    /**\n     *\n     * @param {object} args\n     * @param {number} args.latitude\n     * @param {number} args.longitude\n     * @param {number} [args.altitude] Currently unused by WorldWind\n     * @param {number} args.range\n     * @param {number} args.tilt\n     * @param {number} args.heading\n     * @param {boolean} [args.animate]\n     * @param {function} [args.animateCB]\n     */\n    lookAt: function(args) {\n      // substituting range for altitude for now\n      if (args.range !== 0) {\n        args.range = args.range || this.worldWindow.navigator.range;\n      }\n\n      var position = new WorldWind.Position(args.latitude, args.longitude, args.range);\n\n      /**\n       * @this {EMPWorldWind.Map}\n       * @private\n       */\n      function _completeLookAtMotion() {\n        this.worldWindow.navigator.lookAtLocation.latitude = args.latitude;\n        this.worldWindow.navigator.lookAtLocation.longitude = args.longitude;\n\n        // lookAt does not support altitude in WorldWind yet\n        // this.worldWindow.navigator.lookAtLocation.altitude = args.altitude;\n\n        this.worldWindow.navigator.range = args.range;\n        this.worldWindow.navigator.tilt = args.tilt;\n        this.worldWindow.navigator.heading = args.heading;\n\n        if (args.animateCB) {\n          args.animateCB();\n        }\n\n        this.worldWindow.redraw();\n      }\n\n      this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n      this.goToAnimator.goTo(position, _completeLookAtMotion.bind(this));\n    },\n    /**\n     * @param {emp.typeLibrary.Feature|EMPWorldWind.data.EmpFeature} feature\n     * @param {PlotFeatureCB} [callback]\n     */\n    plotFeature: function(feature, callback) {\n      /**\n       * Handle the async plotFeature method\n       * @private\n       */\n      var _callback = function(cbArgs) {\n        // Trigger an update for the display\n        this.worldWindow.redraw();\n\n        if (cbArgs.success) {\n          // Add the new feature to the global list of features\n          if (!(cbArgs.feature.id in this.features)) {\n            this.features[cbArgs.feature.id] = cbArgs.feature;\n          }\n        }\n\n        if (callback) {\n          callback(cbArgs);\n        }\n      }.bind(this);\n\n      // Check if we are using a EMPWorldWind feature internally\n      if (feature instanceof EMPWorldWind.data.EmpFeature) {\n        feature = feature.feature;\n      }\n\n      if (feature.featureId in this.features) {\n        // Update an existing feature\n        EMPWorldWind.editors.EditorController.updateFeature.call(this, this.features[feature.featureId], feature, _callback);\n      } else {\n        // Plot a new feature\n        EMPWorldWind.editors.EditorController.plotFeature.call(this, feature, _callback);\n      }\n    },\n    /**\n     * @callback PlotFeatureCB\n     * @param {object} cbArgs\n     * @param {EMPWorldWind.data.Feature} cbArgs.feature\n     * @param {boolean} cbArgs.success\n     * @param {string} [cbArgs.message]\n     * @param {string} [cbArgs.jsError]\n     */\n    /**\n     *\n     * @param {emp.typeLibrary.Feature} feature\n     */\n    unplotFeature: function(feature) {\n      var layer,\n        rc = {\n          success: false,\n          message: \"\"\n        };\n\n      layer = this.getLayer(feature.parentCoreId);\n      if (layer) {\n        layer.removeFeatureById(feature.coreId);\n\n        this.removeFeatureSelection(feature.coreId);\n        if (this.features.hasOwnProperty(feature.coreId)) {\n          delete this.features[feature.coreId];\n        }\n        this.worldWindow.redraw();\n        rc.success = true;\n      } else {\n        rc.messge = 'Could not find the parent overlay';\n      }\n\n      return rc;\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Selection[]} empSelections\n     */\n    selectFeatures: function(empSelections) {\n      var selected = [],\n        failed = [];\n\n      emp.util.each(empSelections, function(selectedFeature) {\n        var feature = this.features[selectedFeature.featureId];\n        if (feature) {\n          feature.selected = selectedFeature.select;\n          (feature.selected) ? this.storeFeatureSelection(selectedFeature.featureId) : this.removeFeatureSelection(selectedFeature.featureId);\n          //selected.push(feature);\n        } else {\n          failed.push(selectedFeature.featureId);\n        }\n      }.bind(this));\n\n      this.worldWindow.redraw();\n\n      return {\n        success: selected.length !== 0,\n        selected: selected,\n        failed: failed\n      };\n    },\n    /**\n     *\n     * @param {string} id\n     * @returns {EMPWorldWind.data.EmpLayer}\n     */\n    getLayer: function(id) {\n      if (this.layers.hasOwnProperty(id)) {\n        return this.layers[id];\n      }\n    },\n    /**\n     *\n     * @param layer\n     * @param enable\n     */\n    enableLayer: function(layer, enable) {\n      var id, subLayer;\n\n      /**\n       * Recursively invoke for sub layers\n       * @param layer\n       * @private\n       */\n      function _handleSubLayers(layer) {\n        for (id in layer.subLayers) {\n          if (layer.subLayers.hasOwnProperty(id)) {\n            subLayer = layer.getSubLayer(id);\n            if (subLayer) {\n              this.enableLayer(subLayer, enable);\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove the layer if it is one of the appropriate types\n       * @param layer\n       * @private\n       */\n      function _removeLayer(layer) {\n        var layerTypes = [\n          EMPWorldWind.constants.layerType.ARCGIS_93_REST_LAYER,\n          EMPWorldWind.constants.layerType.BING_LAYER,\n          EMPWorldWind.constants.layerType.IMAGE_LAYER,\n          EMPWorldWind.constants.layerType.OSM_LAYER,\n          EMPWorldWind.constants.layerType.TMS_LAYER,\n          EMPWorldWind.constants.layerType.WMS_LAYER,\n          EMPWorldWind.constants.layerType.WMTS_LAYER\n        ];\n\n        if (layerTypes.indexOf(layer.globalType) !== -1) {\n          this.worldWindow.removeLayer(layer);\n        }\n      }\n\n      // Check if it exists\n      if (this.layerExists(layer)) {\n        // Update whether it's enabled or not\n        layer.enabled = enable;\n\n        // Handle any children\n        _handleSubLayers(layer);\n\n        // Remove if necessary\n        if (!enable) {\n          _removeLayer.call(this, layer);\n        }\n      }\n    },\n    /**\n     *\n     * @param layer\n     * @returns {boolean}\n     */\n    layerExists: function(layer) {\n      return this.layers.hasOwnProperty(layer.id);\n    },\n    /**\n     * Adds a WMS layer to the map\n     * @param {emp.typeLibrary.WMS} wms\n     */\n    addWMS: function(wms) {\n      var wmsLayer;\n\n      // Remove existing WMS if it already exists, we shall re-add it\n      wmsLayer = this.getLayer(wms.coreId);\n      if (wmsLayer) {\n        this.removeWMS(wmsLayer);\n      }\n\n      // Create the new layer\n      wmsLayer = new EMPWorldWind.data.EmpWMSLayer(wms);\n\n      this.layers[wmsLayer.id] = wmsLayer;\n      this.worldWindow.addLayer(wmsLayer.layer);\n      this.worldWindow.redraw();\n    },\n    /**\n     * Removes a WMS layer from the map\n     * @param {emp.typeLibrary.WMS|EMPWorldWind.data.EmpWMSLayer} wms\n     */\n    removeWMS: function(wms) {\n      var layer,\n        id = wms.coreId || wms.id;\n\n      layer = this.getLayer(id);\n      if (layer) {\n        this.worldWindow.removeLayer(layer.layer);\n        delete this.layers[layer.id];\n        this.worldWindow.redraw();\n      }\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.KmlLayer} kml\n     * @param {function} cb\n     */\n    addKML: function(kml, cb) {\n      var kmlFilePromise,\n        kmlLayer = new EMPWorldWind.data.EmpKMLLayer(kml);\n\n      // // Build the KML file promise\n      kmlFilePromise = new WorldWind.KmlFile(kmlLayer.url);\n      kmlFilePromise\n        .then(function(kmlFile) {\n          // Construct the KML layer to hold the document\n          var kmlRenderableLayer = new WorldWind.RenderableLayer(kmlLayer.id);\n          kmlLayer.layer = kmlRenderableLayer;\n\n          // Add the KML layer to the map\n          kmlRenderableLayer.addRenderable(kmlFile);\n          this.worldWindow.addLayer(kmlRenderableLayer);\n\n          // Record the layer so we can remove/modify it later\n          this.layers[kmlLayer.id] = kmlLayer;\n          if (typeof cb === \"function\") {\n            return cb({success: true});\n          }\n        }.bind(this))\n        .catch(function() {\n          return cb({success: false, message: 'Failed to add KML Layer'});\n        });\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.KmlLayer} kml\n     * @param {function} [cb]\n     */\n    removeKML: function(kml, cb) {\n      if (kml.coreId in this.layers) {\n        this.worldWindow.removeLayer(this.layers[kml.coreId].layer);\n        delete this.layers[kml.coreId];\n        this.worldWindow.redraw();\n      }\n\n      if (typeof cb === \"function\") {\n        return cb({success: true});\n      }\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isFeatureSelected: function(id) {\n      return Boolean(this.empSelections.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getFeatureSelection: function(id) {\n      if (this.isFeatureSelected(id)) {\n        return this.empSelections[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param id\n     */\n    storeFeatureSelection: function(id) {\n      this.empSelections[id] = id;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeFeatureSelection: function(id) {\n      if (this.empSelections.hasOwnProperty(id)) {\n        delete this.empSelections[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*|null}\n     */\n    getSelections: function() {\n      return this.empSelections;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isMultiPointPresent: function(id) {\n      return Boolean(this.multiPointCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getMultiPoint: function(id) {\n      if (this.isMultiPointPresent(id)) {\n        return this.multiPointCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param multiPoint\n     */\n    storeMultiPoint: function(multiPoint) {\n      this.multiPointCollection[multiPoint.id] = multiPoint;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeMultiPoint: function(id) {\n      if (this.multiPointCollection.hasOwnProperty(id)) {\n        delete this.multiPointCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isAirspacePresent: function(id) {\n      return Boolean(this.airspaceCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getAirspace: function(id) {\n      if (this.isAirspacePresent(id)) {\n        return this.airspaceCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param airspace\n     */\n    storeAirspace: function(airspace) {\n      this.airspaceCollection[airspace.id || airspace.coreId] = airspace;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeAirspace: function(id) {\n      if (this.airspaceCollection.hasOwnProperty(id)) {\n        delete this.airspaceCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*|null}\n     */\n    getSinglePoints: function() {\n      return this.singlePointCollection;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isSinglePointPresent: function(id) {\n      return Boolean(this.singlePointCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getSinglePoint: function(id) {\n      if (this.isSinglePointPresent(id)) {\n        return this.singlePointCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param singlePoint\n     */\n    storeSinglePoint: function(singlePoint) {\n      this.singlePointCollection[singlePoint.id] = singlePoint;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeSinglePoint: function(id) {\n      if (this.isSinglePointPresent(id)) {\n        delete this.singlePointCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {number}\n     */\n    getSinglePointCount: function() {\n      if (this.defined(this.singlePointCollection)) {\n        return Object.keys(this.singlePointCollection).length;\n      } else {\n        return 0;\n      }\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isSinglePointIdOnHoldPresent: function(id) {\n      return Boolean(this.singlePointCollectionIdOnHold.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getSinglePointIdOnHold: function(id) {\n      if (this.isSinglePointIdOnHoldPresent(id)) {\n        return this.singlePointCollectionOnHold[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param singlePointId\n     */\n    storeSinglePointIdOnHold: function(singlePointId) {\n      this.singlePointCollectionIdOnHold[singlePointId] = singlePointId;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeSinglePointIdOnHold: function(id) {\n      if (this.isSinglePointIdOnHoldPresent(id)) {\n        delete this.singlePointCollectionIdOnHold[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*}\n     */\n    getSinglePointsIdOnHold: function() {\n      return this.singlePointCollectionIdOnHold;\n    },\n    /**\n     *\n     * @returns {*}\n     */\n    getSinglePointsIdOnHoldCount: function() {\n      if (this.defined(this.singlePointCollectionIdOnHold)) {\n        return Object.keys(this.singlePointCollectionIdOnHold).length;\n      } else {\n        return 0;\n      }\n    },\n    /**\n     *\n     * @param {Array} styles\n     */\n    setLabelStyle: function(styles) {\n      var style, featureId, feature;\n      for (style in this.state.labelStyles) {\n        if (this.state.labelStyles.hasOwnProperty(style)) {\n          this.state.labelStyles[style] = styles.includes(style);\n        }\n      }\n\n      // TODO refresh only visible points and mark the rest as update when requested\n      for (featureId in this.features) {\n        if (this.features.hasOwnProperty(featureId)) {\n          feature = this.features[featureId];\n          EMPWorldWind.editors.EditorController.updateFeatureLabelStyle.call(this, feature);\n        }\n      }\n      this.worldWindow.redraw();\n    },\n    /**\n     * Expose a refresh\n     */\n    refresh: function() {\n      EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n      //var featureId, feature;\n\n      // for (featureId in this.features) {\n      //   if (this.features.hasOwnProperty(featureId)) {\n      //     feature = this.features[featureId];\n      //\n      //     // TODO check if it is visible first\n      //     //EMPWorldWind.editors.EditorController.updateRender.call(this, feature);\n      //   }\n      // }\n\n      // TODO trigger redraw if necessary only\n      this.worldWindow.redraw();\n    },\n    /**\n     * Adjust the background contrast\n     * @param {number} contrast Value from 0-100, 50 is default\n     */\n    setContrast: function(contrast) {\n      if (contrast > 100) {\n        contrast = 100;\n      } else if (contrast < 0) {\n        contrast = 0;\n      }\n\n      if (contrast >= 50) {\n        this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, (contrast - 50) / 50);\n        this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0);\n      } else {\n        this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0);\n        this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, (50 - contrast) / 50);\n      }\n\n      this.worldWindow.redraw();\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Lock} lockState\n     */\n    setLockState: function(lockState) {\n      this.state.lockState = lockState.lock;\n    },\n    /**\n     * Spins the globe if autoPanning is enabled\n     */\n    spinGlobe: function() {\n      var vertical, horizontal, goToPosition,\n        step = this.worldWindow.navigator.range / (WorldWind.EARTH_RADIUS);\n\n      /**\n       *\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      function _getVerticalPan() {\n        if (this.state.autoPanning.up) {\n          return step;\n        } else if (this.state.autoPanning.down) {\n          return -step;\n        } else {\n          return 0;\n        }\n      }\n\n      /**\n       *\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      function _getHorizontalPan() {\n        if (this.state.autoPanning.left) {\n          return -step;\n        } else if (this.state.autoPanning.right) {\n          return step;\n        } else {\n          return 0;\n        }\n      }\n\n      vertical = _getVerticalPan.call(this);\n      horizontal = _getHorizontalPan.call(this);\n\n      goToPosition = new WorldWind.Position(\n        this.worldWindow.navigator.lookAtLocation.latitude + vertical,\n        this.worldWindow.navigator.lookAtLocation.longitude + horizontal,\n        this.worldWindow.navigator.range);\n      this.goToAnimator.travelTime = 500; // TODO smooth the transition if this is getting called too often\n\n      if (this.state.autoPanning.up ||\n        this.state.autoPanning.left ||\n        this.state.autoPanning.down ||\n        this.state.autoPanning.right) {\n        this.goToAnimator.goTo(goToPosition);\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n        setTimeout(this.spinGlobe.bind(this), 250);\n      } else {\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      }\n    },\n    /**\n     * Returns a data URI of the current view of the canvas\n     * @todo Handle iconURL within Placemarks\n     * @returns {string}\n     */\n    screenshot: function() {\n      // This forces webgl to render which exposes current context for the canvas.toDataURL function\n      // Note: this is still lacking functionality as Placemarks are not rendered\n      this.worldWindow.drawFrame();\n      return this.worldWindow.canvas.toDataURL();\n    },\n    /**\n     * Calculate the current bounds of the WorldWindow\n     * @returns {Bounds}\n     */\n    getBounds: function() {\n      var topRight, bottomLeft;\n\n      // Check the viewport corners\n      topRight = this.worldWindow.pickTerrain(new WorldWind.Vec2(this.worldWindow.viewport.width - 1, 1)).terrainObject();\n      bottomLeft = this.worldWindow.pickTerrain(new WorldWind.Vec2(1, this.worldWindow.viewport.height - 1)).terrainObject();\n\n      // If the corners don't contain the globe assume we are zoomed very far out, estimate an arbitrary rectangle\n      if (!topRight) {\n        topRight = {\n          position: WorldWind.Location.linearLocation(\n            this.worldWindow.navigator.lookAtLocation,\n            this.worldWindow.navigator.heading + 45,\n            Math.PI / 3,\n            new WorldWind.Location())\n        };\n      }\n\n      if (!bottomLeft) {\n        bottomLeft = {\n          position: WorldWind.Location.linearLocation(\n            this.worldWindow.navigator.lookAtLocation,\n            this.worldWindow.navigator.heading + 45, -Math.PI / 3,\n            new WorldWind.Location())\n        };\n      }\n\n      return {\n        north: topRight.position.latitude,\n        south: bottomLeft.position.latitude,\n        east: topRight.position.longitude,\n        west: bottomLeft.position.longitude\n      };\n    },\n    /**\n     * Returns the center of focus of the map\n     * @returns {{latitude: number, longitude:number}}\n     */\n    getCenter: function() {\n      return this.worldWindow.navigator.lookAtLocation;\n    },\n    /**\n     * Deletes and removes all features and layers on the map\n     */\n    shutdown: function() {\n      this.features = {};\n      this.layers = {};\n      this.worldWindow = undefined;\n    },\n    /**\n     * checks is map is moving outside an epsilon. This function is used\n     * to reduce the calls to update the features of the map.\n     */\n    isMapMoving: function() {\n      return (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.latitude, this.lastNavigator.lookAtLocation.latitude, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.longitude, this.lastNavigator.lookAtLocation.longitude, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.range, this.lastNavigator.range, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.tilt, this.lastNavigator.tilt, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.roll, this.lastNavigator.roll, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.heading, this.lastNavigator.heading, this.optimizationMapMoveEpsilon));\n    },\n    /**\n     *\n     * @returns {PickedObjectList|*}\n     */\n    pickShapesInViewRegion: function() {\n      var shapes;\n      //var bound = this.getBounds();\n      //var boundRectangle = new this.worldwind.Rectangle(new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude), this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n      // this.worldWindow.viewport\n      var canvasCoordinates = this.worldWindow.canvasCoordinates(0, 0);\n      //var screenLocation = new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude);\n      var boundRectangle = new WorldWind.Rectangle(canvasCoordinates[0], canvasCoordinates[1], 5000, 4000);\n      //var boundRectangle  = new WorldWind.Rectangle(0, 0 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n      //var boundRectangle  = new WorldWind.Rectangle(this.worldWindow.canvas.width/2, this.worldWindow.canvas.height/2 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n\n      shapes = this.worldWindow.pickShapesInRegion(boundRectangle);\n      return shapes;\n    },\n    /**\n     * checks if feature is within view area of map.\n     * @param {emp.typeLibrary.Feature} empFeature object representing a feature (not a ww feature).\n     */\n    isMilStdMultiPointShapeInViewRegion: function(empFeature) {\n      var p,\n        inView = false;\n\n      // Highlight the items picked.\n      if (!this.bounds) {\n        this.bounds = this.getBounds();\n      }\n\n      for (p = 0; p < empFeature.coordinates.length; p++) {\n        var coordinate = empFeature.coordinates[p];\n        if ((coordinate[0] <= this.bounds.east && coordinate[0] >= this.bounds.west) && (coordinate[1] > this.bounds.south && coordinate[1] < this.bounds.north)) {\n          inView = true;\n          break;\n        }\n      }\n      return inView;\n    },\n    /**\n     *\n     * @param {string} color\n     */\n    setSelectionColor: function(color) {\n      function _validateColor(color) {\n        return color || this.state.selectionStyle.lineColor;\n      }\n\n      function _prefixColorString(color) {\n        if (!color.startsWith(\"#\")) {\n          return \"#\" + color;\n        }\n        return color;\n      }\n\n      color = _validateColor(color);\n      color = _prefixColorString(color);\n\n      this.state.selectionStyle.lineColor = color;\n\n      // Update all features\n      _redrawAllFeatures.call(this);\n    },\n    /**\n     *\n     * @param {number} scale\n     */\n    setSelectionScale: function(scale) {\n      this.state.selectionStyle.scale = scale;\n\n      // Update all features\n      _redrawAllFeatures.call(this);\n    }\n  };\n}();\n","var EMPWorldWind = EMPWorldWind || {};\n/**\n * Namespace for EMPWorldWind feature classes\n * @namespace\n */\nEMPWorldWind.data = {};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.Overlay} overlay\n */\nEMPWorldWind.data.EmpLayer = function(overlay) {\n  /** @type {Object.<string, EMPWorldWind.Data.EmpLayer>} */\n  this.subLayers = {};\n\n  /** @type {Object.<string, EMPWorldWind.Data.EmpFeature>} */\n  this.featureKeys = {};\n\n  /** @member {string} */\n  this.name = overlay.name || undefined;\n\n  /** @member {string} */\n  this.description = overlay.description;\n\n  /** @member {string} */\n  this.id = overlay.overlayId;\n\n  /** @member {string} */\n  this.parentId = overlay.parentId;\n\n  /** @member {string} */\n  this.globalType = overlay.globalType || \"vector\"; // vector, wms\n\n  var _overlay = overlay;\n  /**\n   * @name EMPWorldWind.data.EmpLayer#overlay\n   * @type {emp.typeLibrary.Overlay}\n   */\n  Object.defineProperty(this, 'overlay', {\n    enumerable: true,\n    value: _overlay\n  });\n\n  // TODO handle WMS, WMTS, KML...\n  var _layer = new WorldWind.RenderableLayer(this.id);\n  /**\n   * @name EMPWorldWind.data.EmpLayer#layer\n   * @type {WorldWind.RenderableLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _layer\n  });\n\n  /** @member {boolean} */\n  this.enabled = true; // true by default\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature} feature\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    emp.util.each(feature.shapes, function(shape) {\n      this.layer.addRenderable(shape);\n    }.bind(this));\n\n    this.featureKeys[feature.id] = {\n      \"id\": feature.id,\n      \"type\": EMPWorldWind.constants.FeatureType.RENDERABLE,\n      \"feature\": feature\n    };\n\n    feature.overlayId = this.id;\n  } else {\n    // feature already present in map. First remove existing one and then add as new one. The updateFeature\n    // does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes.\n    this.updateFeature(feature);\n  }\n};\n\n/**\n * Expose a refresh for the actual WorldWind layer\n */\nEMPWorldWind.data.EmpLayer.prototype.refresh = function() {\n  this.layer.refresh();\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature[]} features\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatures = function(features) {\n  emp.util.each(features, function(feature) {\n    this.addFeature(feature);\n  }.bind(this));\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (!this.isFeaturePresent(childEntity)) {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        this.addFeature(childEntity);\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (this.isFeaturePresent(childEntity)) // must be present in layer\n      {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeatureChildPresent = function(parentEntity, childEntity) {\n  if (parentEntity && childEntity) {\n    if (parentEntity.childrenFeatureKeys) {\n      return (childEntity.id in parentEntity.childrenFeatureKeys);\n    } else {\n      return false;\n    }\n  }\n};\n\n/**\n *\n * @param subLayer\n */\nEMPWorldWind.data.EmpLayer.prototype.addSubLayer = function(subLayer) {\n  if (!this.isSubLayerPresent(subLayer.id)) {\n    subLayer.parentId = this.id;\n    this.subLayers[subLayer.id] = subLayer;\n  }\n};\n\n/**\n *\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isLayerEmpty = function() {\n  return (this.featuresLength() + this.subOverlaysLength() <= 0);\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeature = function(id) {\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    return empFeature.feature;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isPrimitive = function(id) {\n  var isPrimitive = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE || empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      isPrimitive = true;\n    }\n  }\n\n  return isPrimitive;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isDataSource = function(id) {\n  var isDataSource = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      isDataSource = true;\n    }\n  }\n\n  return isDataSource;\n};\n\n/**\n *\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatures = function() {\n  var features = [], id;\n  for (id in this.featureKeys) {\n    if (id && this.featureKeys.hasOwnProperty(id)) {\n      features.push(this.getFeature(id));\n    }\n  }\n\n  return features;\n};\n\n/**\n *\n * @param id\n * @returns {undefined}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayer = function(id) {\n  var subLayer = undefined;\n  if (this.isSubLayerPresent(id)) {\n    subLayer = this.subLayers[id];\n  }\n\n  return subLayer;\n};\n\n/**\n *\n * @param id\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayers = function(id) {\n  var layers = [];\n  for (id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      layers.push(this.getSubLayer(id));\n    }\n  }\n\n  return layers;\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatures = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      this.removeFeature(entity);\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureSelections = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      //TODO this.empWorldWind.removeFeatureSelection(id);\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeatures = function(visibility) {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      if (entity) {\n        this.showFeature(entity.id, visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n * @param id\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeature = function(id, visibility) {\n  var oMultiPoint,\n    childrenFeatureId,\n    childrenEntity,\n    feature = this.getFeature(id);\n  if (!feature) {\n    return;\n  }\n  if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n    feature.show = visibility;\n    if (feature.billboard !== undefined) {\n      if (feature.reRenderBillboardRequired && visibility) {\n        // when the overlay or parent if hidden the billboard is added to the entity collection with show = false but the loadImage is never called\n        // in the Cesium sdk. Here I'm removing and then re adding the entity when the show visibility is set to true for the for the first  time.\n        // This fixes the issue for kml and geojson points.\n        feature.reRenderBillboardRequired = undefined;\n        feature.show = visibility;\n        feature.billboard.show = visibility;\n        this.updateFeature(feature); // the update removes and then adds the feature to the entity or primitive collection. The children are not remove and re-added.\n      }\n      feature.billboard.show = visibility;\n    }\n    if (feature.path !== undefined) {\n      feature.path.show = visibility;\n    }\n    if (feature.polyline !== undefined) {\n      feature.polyline.show = visibility;\n    }\n    if (feature.polygon !== undefined) {\n      feature.polygon.show = visibility;\n    }\n    if (feature.label !== undefined) {\n      feature.label.show = visibility;\n    }\n    if (feature.rectangle !== undefined) {\n      feature.show = visibility;\n      if (this.empCesium.isMultiPointPresent(id)) {\n        oMultiPoint = this.empCesium.getMultiPoint(id);\n        if (oMultiPoint) {\n          oMultiPoint.visible = visibility;\n        }\n      }\n    }\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  }\n  else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n    feature.show = visibility;\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n    feature.show = visibility;\n    //primitive could represent a 3D multipoint that uses labels (entity.rectangle... with canvas)\n    var airspaceLabelPresent = this.empCesium.isMultiPointPresent(id + \"_label\");\n    if (airspaceLabelPresent) {\n      var airspaceLabel = this.getFeature(id + \"_label\");\n      if (airspaceLabel) {\n        airspaceLabel.show = visibility;    //new this.empCesium.ConstantProperty(visibility);\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n    if (feature.length > 0) {\n      feature.get(0).show = visibility;\n    }\n    if (this.empCesium.isAirspacePresent(id)) {\n      var oAirspace = this.empCesium.getAirspace(id);\n      if (oAirspace) {\n        oAirspace.visible = visibility;\n      }\n    } else if (this.empCesium.isSinglePointPresent(id)) {\n      var oSinglePoint = this.empCesium.getSinglePoint(id);\n      if (oSinglePoint) {\n        oSinglePoint.visible = visibility;\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayers = function() {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.removeFeatures();\n        subLayer.removeSubLayers();\n        delete this.subLayers[id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showSubLayers = function(visibility) {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.visibility = visibility;\n        subLayer.showFeatures(visibility);\n        subLayer.showSubLayers(visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.clearLayer = function() {\n  switch (this.globalType) {\n    case EMPWorldWind.constants.LayerType.ARCGIS_93_REST_LAYER:\n    case EMPWorldWind.constants.LayerType.BING_LAYER:\n    case EMPWorldWind.constants.LayerType.IMAGE_LAYER:\n    case EMPWorldWind.constants.LayerType.OSM_LAYER:\n    case EMPWorldWind.constants.LayerType.WMS_LAYER:\n    case EMPWorldWind.constants.LayerType.TMS_LAYER:\n    case EMPWorldWind.constants.LayerType.WMTS_LAYER:\n      this.enabled = false;\n      break;\n    default:\n    // do nothing\n  }\n  this.removeFeatureSelections();\n  this.removeFeatures();\n  this.removeSubLayers();\n};\n\n/**\n *\n * @param isVisible\n */\nEMPWorldWind.data.EmpLayer.prototype.showLayer = function(isVisible) {\n  this.showFeatures(isVisible);\n  this.showSubLayers(isVisible);\n};\n\n/**\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeature = function(feature) {\n  if (this.isFeaturePresent(feature)) {\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (var id in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    if (EMPWorldWind.utils.defined(feature.parentFeature)) {\n      this.deallocateFeatureChild(feature.parentFeature, feature);\n    }\n\n    emp.util.each(feature.shapes, function(shape){\n      if (shape instanceof WorldWind.RenderableLayer) {\n        // Handle KML features\n        this.worldwind.removeLayer(shape);\n      } else {\n        // Handle normal primitives\n        this.layer.removeRenderable(shape);\n      }\n    }.bind(this));\n\n    delete this.featureKeys[feature.id];\n\n  }\n};\n\n/**\n * feature already present in map. First remove existing one and then add as new one. The updateFeature\n * does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes. The addFeature from the emp engine api\n * takes care of the case of an update. The updateFeature is used for internal removal and then re-adding the feature to map with same id. The\n * presence of the feature in the layers , and any child entities ( ojo - would a replace erase any children feature association to updated feature?) under the updated feature is mantained (v2)..\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.updateFeature = function(feature) {\n  var renderable;\n  //feature already present in map. First remove existing one and then add as new one\n  if (feature.id && feature.id !== null) {\n    renderable = this.getFeature(feature.id); // entity is the current geometry rendered on map\n    // keep children association to parent when updating\n    feature.childrenFeatureKeys = renderable.childrenFeatureKeys;\n    feature.parentFeature = renderable.parentFeature;\n    this.layer.removeRenderable(renderable);\n    this.layer.addRenderable(feature);\n    this.featureKeys[feature.id].feature = feature;\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n * remove feature recursively from layer but keep feature in the Cesium entityCollection\n * this function is used for the moving of features.\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.deallocateFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    entity.overlayId = undefined;\n    delete this.featureKeys[entity.id];\n  }\n};\n\n/**\n * Add feature recursively to layer. the feature must  already be part of the Cesium entityCollection\n * this function is used for the moving of features.\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.DATA_SOURCE\n      };\n    }\n    var featureChildrenLength = this.featureChildrenLength(feature);\n    if (featureChildrenLength > 0) {\n      var childrenFeatures = this.getFeatureChildrenEntityArray(feature);\n      for (var index = 0; index < featureChildrenLength; index++) {\n        var childrenFeature = childrenFeatures[index];\n        this.allocateFeature(childrenFeature);\n      }\n    }\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n *\n * @param entity\n */\nEMPWorldWind.data.EmpLayer.prototype.clearFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n      entity.childrenFeatureKeys = undefined;\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        //this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n        childEntity.parentFeature = undefined;\n        childEntity.overlayId = undefined;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatureChildrenEntityArray = function(entity) {\n  var featureChildrenEntityArray = [];\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            featureChildrenEntityArray.push(childrenEntity);\n          }\n        }\n      }\n    }\n  }\n\n  return featureChildrenEntityArray;\n\n};\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureById = function(id) {\n  var feature;\n  if (this.isFeaturePresentById(id)) {\n    feature = this.getFeature(id);\n    this.removeFeature(feature);\n  }\n};\n\n/**\n *\n * @param subOverlay\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayer = function(subOverlay) {\n  if (this.isSubLayerPresent(subOverlay.id)) {\n    this.subLayer.removeFeatures();\n    this.subLayer.removeSubLayers();\n    delete this.SubLayers[this.subLayer.id];\n  }\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayerById = function(id) {\n  if (this.isSubLayerPresent(id)) {\n    var subLayer = this.getLayer(id);\n    this.removeSubLayer(subLayer);\n  }\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.featuresLength = function() {\n  return Object.keys(this.featureKeys).length;\n};\n\n/**\n *\n * @param entity\n * @returns {number}\n */\nEMPWorldWind.data.EmpLayer.prototype.featureChildrenLength = function(entity) {\n  var length = 0;\n  if (entity.childrenFeatureKeys) {\n    length = Object.keys(entity.childrenFeatureKeys).length;\n  }\n\n  return length;\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.subLayersLength = function() {\n  return Object.keys(this.subLayers).length;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresentById = function(id) {\n  if (id)\n    return (id in this.featureKeys);\n};\n\n/**\n *\n * @param entity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresent = function(entity) {\n  if (entity && entity.id) {\n    return (entity.id in this.featureKeys);\n  } else {\n    return false;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isSubLayerPresent = function(id) {\n  if (id) {\n    return (id in this.subLayers);\n  }\n\n  return false;\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.data.EmpWMSLayer = function(wms) {\n  var layerNames, config, url;\n\n  this.id = wms.coreId;\n\n  var _wms = wms;\n\n  /**\n   * @name EMPWorldWind.data.EmpWMSLayer#wms\n   * @type {emp.typeLibrary.WMS}\n   */\n  Object.defineProperty(this, 'wms', {\n    enumerable: true,\n    value: _wms\n  });\n\n  layerNames = wms.activeLayers.join();\n\n  // Set the URL to the service\n  if (wms.useProxy) {\n    url = emp3.api.global.configuration.urlProxy + \"?url=\" + wms.url;\n  } else {\n    url = wms.url;\n  }\n\n  config = {\n    service: url,\n    layerNames: layerNames,\n    sector: WorldWind.Sector.FULL_SPHERE,\n    levelZeroDelta: new WorldWind.Location(36, 36),\n    numLevels: 15,\n    format: \"image/png\",\n    size: 256\n  };\n\n  // Purposely null for now\n  var timeString = '';\n  var _wmsLayer = new WorldWind.WmsLayer(config, timeString);\n  /**\n   * @name EMPWorldWind.data.EmpWMS#layer\n   * @type {WorldWind.WmsLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _wmsLayer\n  });\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.KmlLayer} kml\n */\nEMPWorldWind.data.EmpKMLLayer = function(kml) {\n  this.id = kml.coreId;\n\n  /** @type {emp.typeLibrary.KmlLayer} */\n  this.kml = kml;\n\n  /**\n   * @param {emp.typeLibrary.KmlLayer} kml\n   * @private\n   */\n  function _buildURL(kml) {\n    // Set the URL to the service\n    if (kml.useProxy) {\n      return emp3.api.global.configuration.urlProxy + \"?url=\" + kml.url;\n    }\n    return kml.url;\n  }\n\n  /** @type {string} */\n  this.url = _buildURL(kml);\n\n  /**\n   * @type {WorldWind.KmlFile}\n   */\n  this.layer = new WorldWind.RenderableLayer(this.id);\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc Container class for establishing mappings between empFeatures and the WorldWind representations.\n * A Feature may consist of any number of WorldWind Surface shapes. Any direct interaction with the WorldWind features\n * will occur in this class.\n *\n * @class\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.data.EmpFeature = function(feature) {\n  /**\n   * The storage of all the shapes composing the primary shape\n   * @type {WorldWind.SurfaceShape[]}\n   */\n  this.shapes = [];\n\n  /**\n   * The native EMP Feature\n   * @type {emp.typeLibrary.Feature}\n   */\n  this.feature = feature;\n\n  var _id = feature.coreId;\n  /**\n   * @readonly\n   * @name EMPWorldWind.data.EmpFeature#id\n   */\n  Object.defineProperty(this, 'id', {\n    enumerable: true,\n    value: _id\n  });\n\n  var _altitudeMode = WorldWind.CLAMP_TO_GROUND;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#altitudeMode\n   */\n  Object.defineProperty(this, 'altitudeMode', {\n    enumerable: true,\n    get: function() { return _altitudeMode; },\n    set: function(altMode) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].altitudeMode = altMode;\n      }\n      _altitudeMode = altMode;\n    }\n  });\n\n  var _selected = false;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#selected\n   */\n  Object.defineProperty(this, 'selected', {\n    enumerable: true,\n    get: function() { return _selected; },\n    set: function(value) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].highlighted = value;\n      }\n      _selected = value;\n    }\n  });\n};\n\n/**\n * Convenience function\n * @returns {Number}\n */\nEMPWorldWind.data.EmpFeature.prototype.shapesCount = function() {\n  return this.shapes.length;\n};\n\n/**\n *\n * @param {WorldWind.SurfaceShape|WorldWind.SurfaceShape[]|*} primitives\n */\nEMPWorldWind.data.EmpFeature.prototype.addShapes = function(primitives) {\n  if (!Array.isArray(primitives)) {\n    if (primitives instanceof WorldWind.RenderableLayer) { // TODO this doesn't smell right, may need to handle KML differently\n      primitives.renderables[0].userProperties.id = this.id;\n    } else {\n      primitives.userProperties.id = this.id;\n    }\n    this.shapes.push(primitives);\n\n  } else {\n    emp.util.each(primitives, function(primitive) {\n      primitive.userProperties.id = this.id;\n      this.shapes.push(primitive);\n    }.bind(this));\n  }\n};\n\n/**\n * Clears all primitives from the feature. It does not remove them from any layers they are rendered on so that must be\n * done first.\n */\nEMPWorldWind.data.EmpFeature.prototype.clearShapes = function() {\n  this.shapes = [];\n};\n\n/**\n *\n * @param {boolean} visible\n */\nEMPWorldWind.data.EmpFeature.prototype.setVisible = function(visible) {\n  emp.util.each(this.shapes, function(shape) {\n    shape.enabled = visible;\n  });\n};","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants = {\n  view: {\n    MAX_HEIGHT: 10000000\n  }\n};\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasMoving = false;\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasZooming = false;\n\n/** @type {number} */\nEMPWorldWind.constants.globeMoveTime = 2000;\n\n/** @type {number} */\nEMPWorldWind.constants.extentBufferFactor = .4; // use when flyto a feature so the camera is not too close to it.\n\n/** @type {boolean} */\nEMPWorldWind.constants.USE_DATA_SOURCE = false;\n\n/** @constant {number} */\nEMPWorldWind.constants.WHITE_CONTRAST = 0;\n\n/** @constant {number} */\nEMPWorldWind.constants.BLACK_CONTRAST = 1;\n\n/**\n * No panning state for autoPanning in smart motion\n * @constant {object}\n */\nEMPWorldWind.constants.NO_PANNING = {\n  step: 0,\n  up: false,\n  down: false,\n  right: false,\n  left: false\n};\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.METERS_PER_INCH = 0.0254;\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.SCALE_LINE_LENGTH = 50;\n\n/**\n * @readonly\n */\nEMPWorldWind.constants.propertyDefaults = {\n  FILL_COLOR_HEX: \"ffffff\",\n  LINE_COLOR_HEX: \"000000\",\n  LINE_WIDTH: 3\n};\n\n/**\n * @readonly\n * @type {{COLOR_HEX: string, WIDTH: number, SCALE: number}}\n */\nEMPWorldWind.constants.selectionProperties = {\n  COLOR_HEX: 'FFFF00',\n  WIDTH: 2,\n  SCALE: 0.5\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.FeatureType = {\n  ENTITY: \"entity\",\n  RENDERABLE: \"renderable\",\n  PRIMITIVE: \"primitive\",\n  GROUND_PRIMITIVE: \"ground_primitive\",\n  DATA_SOURCE: \"dataSource\",\n  COMPOUND_ENTITY: \"compoundEntity\",\n  PRIMITIVE_COLLECTION: \"primitiveCollection\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LayerType = {\n  OVERLAY_LAYER: \"overlay\",\n  WMS_LAYER: \"wms\",\n  IMAGE_LAYER: \"image\",\n  BING_LAYER: \"bing\",\n  ARCGIS_93_REST_LAYER: \"arcgis93rest\",\n  OSM_LAYER: \"osm\",\n  TMS_LAYER: \"tms\",\n  TERRAIN_LAYER: \"terrain\",\n  WMTS_LAYER: \"wmts\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.EntityType = {\n  BILLBOARD: \"billboard\",\n  BOX: \"box\",\n  CORRIDOR: \"corridor\",\n  CYLINDER: \"cylinder\",\n  DESCRIPTION: \"description\",\n  ELLIPSE: \"ellipse\",\n  ELLIPSOID: \"ellipsoid\",\n  LABEL: \"label\",\n  MODEL: \"model\",\n  ORIENTATION: \"orientation\",\n  PATH: \"path\",\n  POLYGON: \"polygon\",\n  POLYLINE: \"polyline\",\n  POLYLINE_VOLUME: \"polylineVolume\",\n  POSITION: \"position\",\n  RECTANGLE: \"rectangle\",\n  VIEW_FROM: \"viewFrom\",\n  WALL: \"wall\",\n  KML: \"kml\"\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.MultiPointRenderType = {\n  KML: 0,\n  /** @deprecated */\n  JSON: 1,\n  GEOJSON: 2,\n  DATA_URL: 4,\n  CANVAS: 3,\n  CANVAS_LABEL_ONLY: 5,\n  SVG: 6,\n  SVG_LABEL_ONLY: 7\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.SinglePointAltitudeRangeMode = {\n  LOW_RANGE: 0,\n  MID_RANGE: 1,\n  HIGHEST_RANGE: 2\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererWorker = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LabelStyle = {\n  REQUIRED_LABELS: 'required_labels',\n  COMMON_LABELS: 'common_labels',\n  ALL_LABELS: 'all_labels'\n};\n\n/**\n * Modifiers for All labels to be displayed\n * @enum {object}\n * @constant\n */\nEMPWorldWind.constants.AllLabels = {\n  \"V\": true,\n  \"L\": true,\n  \"S\": true,\n  \"AA\": true,\n  \"AB\": true,\n  \"AC\": true, \n  \"H\": true,\n  \"M\": true,\n  \"T\": true,\n  \"T1\": true,\n  \"CN\": true,\n  \"C\": true,\n  \"F\": true,\n  \"G\": true,\n  \"H1\": true,\n  \"H2\": true,\n  \"J\": true,\n  \"K\": true,\n  \"N\": true,\n  \"P\": true,\n  \"W\": true,\n  \"W1\": true,\n  \"X\": true,\n  \"Y\": true,\n  \"Z\": true\n};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants.RendererSettings = {};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.standard = {\n  'Symbology_2525Bch2_USAS_13_14': 0,\n  'Symbology_2525C': 1\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.modifierLookup = {\n  QUANTITY: \"quantity\",\n  REDUCED_OR_REINFORCED: \"reinforcedOrReduced\",\n  STAFF_COMMENTS: \"staffComments\",\n  ADDITIONAL_INFO_1: \"additionalInfo1\",\n  ADDITIONAL_INFO_2: \"additionalInfo2\",\n  ADDITIONAL_INFO_3: \"additionalInfo3\",\n  EVALUATION_RATING: \"evaluationRating\",\n  COMBAT_EFFECTIVENESS: \"combatEffectiveness\",\n  SIGNATURE_EQUIPMENT: \"signatureEquipment\",\n  HIGHER_FORMATION: \"higherFormation\",\n  HOSTILE: \"hostile\",\n  IFF_SIF: \"iffSiff\",\n  DIRECTION_OF_MOVEMENT: \"directionOfMovement\",\n  OFFSET_INDICATOR: \"offsetIndicator\",\n  UNIQUE_DESIGNATOR_1: \"uniqueDesignation1\",\n  UNIQUE_DESIGNATOR_2: \"uniqueDesignation2\",\n  EQUIPMENT_TYPE: \"equipmentType\",\n  DATE_TIME_GROUP: \"dateTimeGroup1\",\n  DATE_TIME_GROUP_2: \"dateTimeGroup2\",\n  ALTITUDE_DEPTH: \"altitudeDepth\",\n  LOCATION: \"location\",\n  SPEED: \"speed\",\n  SPECIAL_C2_HEADQUARTERS: \"specialC2Headquarters\",\n  DISTANCE: \"distance\",\n  AZIMUTH: \"azimuth\",\n  FILL_COLOR: \"fillColor\",\n  LINE_COLOR: \"lineColor\",\n  TEXT_COLOR: \"textColor\",\n  X_OFFSET: \"xOffset\",\n  X_UNITS: \"xUnits\",\n  Y_OFFSET: \"yOffset\",\n  Y_UNITS: \"yUnits\",\n  NAME: \"name\",\n  STANDARD: \"standard\"\n};\n\nEMPWorldWind.constants.highAltitudeRangeImage = {};\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\"  r=\"3\" fill=\"red\" stroke=\"red\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle cx=\"12\" cy=\"12\"  r=\"3\" fill=\"blue\" stroke=\"blue\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"green\" stroke=\"green\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"yellow\" stroke=\"yellow\" stroke-width=\"1\"  /></g></svg>');\n//EMPWorldWind.constants.highAltitudeRangeImage.blankMultipoint = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"2px\" height=\"2px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"black\" stroke=\"black\" stroke-width=\"1\"  /></g></svg>');\n\n\n","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.utils = {};\n\n/**\n * @typedef {object} RGBAColor\n * @property {number} red\n * @property {number} green\n * @property {number} blue\n * @property {number} alpha 0-1\n */\n\n/**\n *\n * @param {MouseEvent} event\n * @returns {{lat: undefined, lon: undefined, clientX: *, clientY: *, screenX: *, screenY: *}}\n */\nEMPWorldWind.utils.getEventCoordinates = function(event) {\n  var pickPoint = this.worldWindow.canvasCoordinates(event.clientX, event.clientY);\n  var terrainObject = this.worldWindow.pickTerrain(pickPoint).terrainObject();\n\n  return {\n    lat: terrainObject ? terrainObject.position.latitude : undefined,\n    lon: terrainObject ? terrainObject.position.longitude : undefined,\n    clientX: event.clientX,\n    clientY: event.clientY,\n    screenX: event.screenX,\n    screenY: event.screenY\n  };\n};\n\n/**\n *\n * @param value\n * @returns {boolean}\n */\nEMPWorldWind.utils.defined = function(value) {\n  return value !== undefined && value !== null;\n};\n\n\n/**\n * @namespace\n */\nEMPWorldWind.utils.milstd = {};\n\n/**\n *\n * @param properties\n * @param name\n * @param iconLabels\n * @param iconPixelSize\n * @returns {{}}\n */\nEMPWorldWind.utils.milstd.updateModifierLabels = function(properties, name, iconLabels, iconPixelSize) {\n  var mod,\n    modifiedModifiers = {},\n    property,\n    size;\n\n  // loop through all the properties, add a parameter for each property\n  for (property in properties) {\n    if (properties.hasOwnProperty(property)) {\n      switch (property) {\n        case \"labelColor\":\n          // Convert labelColor to textColor\n          modifiedModifiers[\"textColor\"] = properties[property];\n          break;\n        case \"fillColor\":\n          modifiedModifiers[\"fillColor\"] = properties[property];\n          break;\n        case \"lineColor\":\n          modifiedModifiers[\"lineColor\"] = properties[property];\n          break;\n        case \"modifiers\":\n          // modifiers contains an object that has other properties in it.\n          // loop through each of the properties and add parameters to those\n          // that are relevant.\n          for (mod in properties[property]) {\n            if (properties[property].hasOwnProperty(mod)) {\n              switch (mod) {\n                case \"quantity\":\n                  if (iconLabels.C && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"quantity\"] = properties[property][mod];\n                  }\n                  break;\n                case \"reinforcedOrReduced\":\n                  if (iconLabels.F && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"reinforcedOrReduced\"] = properties[property][mod];\n                  }\n                  break;\n                case \"staffComments\":\n                  if (iconLabels.G && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"staffComments\"] = properties[property][mod];\n                  }\n                  break;\n                case \"additionalInfo1\":\n                  if (iconLabels.H && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"additionalInfo1\"] = properties[property][mod];\n                  }\n                  break;\n                case \"additionalInfo2\":\n                  if (iconLabels.H1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"additionalInfo2\"] = properties[property][mod];\n                  }\n                  break;\n                case \"additionalInfo3\":\n                  if (iconLabels.H2 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"additionalInfo3\"] = properties[property][mod];\n                  }\n                  break;\n                case \"evaluationRating\":\n                  if (iconLabels.J && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"evaluationRating\"] = properties[property][mod];\n                  }\n                  break;\n                case \"combatEffectiveness\":\n                  if (iconLabels.K && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"combatEffectiveness\"] = properties[property][mod];\n                  }\n                  break;\n                case \"signatureEquipment\":\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"signatureEquipment\"] = properties[property][mod];\n                  }\n                  break;\n                case \"higherFormation\":\n                  if (iconLabels.M && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"higherFormation\"] = properties[property][mod];\n                  }\n                  break;\n                case \"hostile\":\n                  if (iconLabels.N && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"hostile\"] = properties[property][mod];\n                  }\n                  break;\n                case \"iffSif\":\n                  if (iconLabels.P && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"iffSif\"] = properties[property][mod];\n                  }\n                  break;\n                case \"offsetIndicator\":\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"offsetIndicator\"] = properties[property][mod];\n                  }\n                  break;\n                case \"uniqueDesignation1\":\n                  if (iconLabels.T && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"uniqueDesignation1\"] = properties[property][mod];\n                  }\n                  break;\n                case \"uniqueDesignation2\":\n                  if (iconLabels.T1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"uniqueDesignation2\"] = properties[property][mod];\n                  }\n                  break;\n                case \"equipmentType\":\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"equipmentType\"] = properties[property][mod];\n                  }\n                  break;\n                case \"dateTimeGroup1\":\n                  if (iconLabels.W && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"dateTimeGroup1\"] = properties[property][mod];\n                  }\n                  break;\n                case \"dateTimeGroup2\":\n                  if (iconLabels.W1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"dateTimeGroup2\"] = properties[property][mod];\n                  }\n                  break;\n                case \"altitudeDepth\":\n                  if (iconLabels.X) {\n                    modifiedModifiers[\"altitudeDepth\"] = properties[property][mod];\n                  }\n                  break;\n                case \"location\":\n                  if (iconLabels.Y && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"location\"] = properties[property][mod];\n                  }\n                  break;\n                case \"speed\":\n                  if (iconLabels.Z && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"speed\"] = properties[property][mod];\n                  }\n                  break;\n                case \"specialC2Headquarters\":\n                  if (iconLabels.AA && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"specialC2Headquarters\"] = properties[property][mod];\n                  }\n                  break;\n                case \"distance\":\n                  modifiedModifiers[\"distance\"] = properties[property][mod];\n                  break;\n                case \"azimuth\":\n                  modifiedModifiers[\"azimuth\"] = properties[property][mod];\n                  break;\n                case \"standard\":\n                  modifiedModifiers[\"standard\"] = properties[property][mod];\n                  break;\n                case \"size\":\n                  size = properties[property][mod];\n                  if (!size) {\n                    size = iconPixelSize;\n                  }\n                  modifiedModifiers[\"size\"] = size;\n                  break;\n                default:\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[mod] = properties[property][mod];\n                  }\n                  break;\n              }\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  if (iconLabels.CN) {\n    modifiedModifiers[\"name\"] = name;\n  }\n  return modifiedModifiers;\n};\n\n\n/**\n *\n * @param modifiers\n * @param showModLabels\n * @returns {object}\n */\nEMPWorldWind.utils.milstd.convertModifierStringTo2525 = function(modifiers, showModLabels) {\n  var standardModifiers = {};\n\n  if (modifiers !== undefined && modifiers !== null) {\n    for (var sModifier in modifiers) {\n      if (modifiers.hasOwnProperty(sModifier)) {\n        var modValue = modifiers[sModifier];\n        if (modValue !== null && modValue !== \"null\" && modValue !== 0) {\n          switch (sModifier) {\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.QUANTITY:\n              if (showModLabels) {\n                standardModifiers[\"C\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.REDUCED_OR_REINFORCED:\n              if (showModLabels) {\n                standardModifiers[\"F\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.STAFF_COMMENTS:\n              if (showModLabels) {\n                standardModifiers[\"G\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_1:\n              if (showModLabels) {\n                standardModifiers[\"H\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_2:\n              if (showModLabels) {\n                standardModifiers[\"H1\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_3:\n              if (showModLabels) {\n                standardModifiers[\"H2\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.EVALUATION_RATING:\n              if (showModLabels) {\n                standardModifiers[\"J\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.COMBAT_EFFECTIVENESS:\n              if (showModLabels) {\n                standardModifiers[\"K\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.SIGNATURE_EQUIPMENT:\n              if (showModLabels) {\n                standardModifiers[\"L\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.HIGHER_FORMATION:\n              if (showModLabels) {\n                standardModifiers[\"M\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.HOSTILE:\n              if (showModLabels) {\n                standardModifiers[\"N\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.IFF_SIF:\n              if (showModLabels) {\n                standardModifiers[\"P\"] = modValue;\n              }\n              break;\n            // Direction of movement cannot work on 3D because the view can rotate\n            // case EMPWorldWind.constants.RendererSettings.modifierLookup.DIRECTION_OF_MOVEMENT:\n            //    modifiersArray.push(\"Q=\" + modValue);\n            //    break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.OFFSET_INDICATOR:\n              standardModifiers[\"S\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_1:\n              if (showModLabels) {\n                standardModifiers[\"T\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_2:\n              if (showModLabels) {\n                standardModifiers[\"T1\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.EQUIPMENT_TYPE:\n              if (showModLabels) {\n                standardModifiers[\"V\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP:\n              if (showModLabels) {\n                standardModifiers[\"W\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP_2:\n              if (showModLabels) {\n                standardModifiers[\"W1\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ALTITUDE_DEPTH:\n              if (showModLabels) {\n                standardModifiers[\"X\"] = JSON.parse(JSON.stringify(modValue));\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.LOCATION:\n              if (showModLabels) {\n                standardModifiers[\"Y\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.SPEED:\n              if (showModLabels) {\n                standardModifiers[\"Z\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.SPECIAL_C2_HEADQUARTERS:\n              if (showModLabels) {\n                standardModifiers[\"AA\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.DISTANCE:\n              standardModifiers[\"AM\"] = JSON.parse(JSON.stringify(modValue));\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.AZIMUTH:\n              standardModifiers[\"AN\"] = JSON.parse(JSON.stringify(modValue));\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.FILL_COLOR:\n              standardModifiers[\"FILLCOLOR\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.LINE_COLOR:\n              standardModifiers[\"LINECOLOR\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.TEXT_COLOR:\n              standardModifiers[\"TEXTCOLOR\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.STANDARD:\n              // convert standard string value  to modifier numeric\n              standardModifiers[emp.typeLibrary.utils.milstd.Modifiers.STANDARD] = EMPWorldWind.utils.convertSymbolStandardToRendererFormat(modifiers);\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.NAME:\n            case \"CN\":\n              if (showModLabels) {\n                standardModifiers[\"CN\"] = modValue;\n              }\n              break;\n            default:\n              standardModifiers[sModifier] = modValue;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  return standardModifiers;\n};\n\n/**\n * Borrowed from the Cesium Implementation\n *\n * @param item\n * @returns {object}\n */\nEMPWorldWind.utils.milstd.checkForRequiredModifiers = function(item) {\n  var result = {},\n    symbolCode,\n    properties = {},\n    modifiers = {},\n    oAM = [],\n    oAN = [],\n    basicSymbolCode,\n    standard,\n    symbolDef,\n    i,\n    lonDistance,\n    overrides = {};\n\n  // Check to see if the properties and modifiers have not yet been set.\n  // If they don't exist, this will default them to empty objects.\n  if (item.data && item.data.symbolCode) {\n    symbolCode = item.data.symbolCode;\n  }\n  else if (item.symbolCode) {\n    symbolCode = item.symbolCode;\n  }\n\n  if (item.properties) {\n    properties = item.properties;\n    if (properties.modifiers) {\n      modifiers = properties.modifiers;\n    }\n    else {\n      properties.modifiers = {};\n      modifiers = properties.modifiers;\n    }\n  }\n  else {\n    item.properties = {\n      modifiers: {}\n    };\n\n    modifiers = item.properties.modifiers;\n  }\n\n  // Get the basic symbol code.  We need the basic code because we need to look it up with\n  // getSymbolDef.  This requires the basic code.\n  basicSymbolCode = armyc2.c2sd.renderer.utilities.SymbolUtilities.getBasicSymbolID(symbolCode);\n  // Get the standard we are using.  We need to convert it to what the function getSymbolDef uses.\n  standard = EMPWorldWind.utils.milstd.checkSymbolStandard(item.properties.modifiers);\n  // Retrieve the symbol definition object.  This contains information about the required\n  // symbol modifiers.  We will use this to determine which modifiers are not sufficiently\n  // populated.\n  symbolDef = armyc2.c2sd.renderer.utilities.SymbolDefTable.getSymbolDef(basicSymbolCode, standard);\n  if ((symbolDef === undefined) || (symbolDef === null)) {\n    return result;\n  }\n  // The only modifiers that are sometimes required in MIL-STD-2525B and C are\n  // distance and azimuth.\n  //\n  // First check if distance and azimuth has already been set.  If they are, we\n  // still may not have enough entries for them (as both are arrays), so we still need to\n  // verify that they are good.\n\n  // If distance already exists retrieve the values in it.\n  if (modifiers.hasOwnProperty(\"distance\")) {\n    // Lets make sure that if it is there that it is an array.\n    if (modifiers.distance instanceof Array) {\n      oAM = modifiers.distance;\n    }\n  }\n  // If azimuth already exists retrieve the values of it.\n  if (modifiers.hasOwnProperty(\"azimuth\")) {\n    // Lets make sure that if it is there that it is an array.\n    if (modifiers.azimuth instanceof Array) {\n      oAN = modifiers.azimuth;\n    }\n  }\n  // Based on the symbol draw category, we can determine if the symbol has\n  // has the required parameters or not.  For each draw category, we do a different\n  // check.\n  switch (symbolDef.drawCategory) {\n    // These are circle graphics represented by a single point and a radius.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE: //16\n      if (oAM !== null && oAM.length > 0) {\n        oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n      }\n      else {\n        oAM[0] = 5000;\n      }\n\n      overrides = {\n        distance: oAM\n      };\n      break;\n    // These are 1-point rectangles with an azimuth that determine the angle, and a distance that determines width\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE: //17\n      if ((oAM !== null) && (oAM.length >= 2) &&\n        (typeof (oAM[0]) === \"number\") &&\n        (typeof (oAM[1]) === \"number\")) {\n        oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n      }\n      else {\n        // Check to see if the [0] value is present and its a number.\n        // If not set a value.\n        if ((oAM[0] === undefined) || (typeof (oAM[0]) !== \"number\")) {\n          oAM[0] = 10000;\n        }\n        // Check to see if the [1] value is present and its a number.\n        // If not set a value.\n        if ((oAM[1] === undefined) || (typeof (oAM[1]) !== \"number\")) {\n          oAM[1] = 5000;\n        }\n        oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n      }\n\n      if ((oAN !== null) && (oAN.length >= 1) &&\n        (typeof (oAN[1]) === \"number\")) {\n        oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n      }\n      else {\n        // Check to see if the [0] value is present and its a number.\n        // If not set a value.\n        if ((oAN[0] === undefined) || (typeof (oAN[0]) !== \"number\")) {\n          oAN[0] = 0;\n        }\n        oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n      }\n      overrides = {\n        distance: oAM,\n        azimuth: oAN\n      };\n      break;\n    // This is a sector range fan, requires a point, a min and max distance for each sector, and left\n    // and right azimuths for each sector.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE: //18\n      if ((oAM !== null) && (oAM.length >= 2)) {\n        for (i = 0; i < oAM.length;) {\n          if (typeof (oAM[i]) !== \"number\") {\n            oAM.splice(i, 1);\n          }\n          else {\n            i++;\n          }\n        }\n      }\n      if (oAM.length > 1) {\n        // Check to see if the each value is present.\n        for (i = 0; i < oAM.length; i++) {\n          if (oAM[i] === undefined) {\n            oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n          }\n        }\n      }\n      else {\n        if (oAM[0] === undefined) {\n          oAM[0] = 2000;\n        }\n      }\n      // You need at least 2 azimuth values for this to be a drawable graphic\n      // If it doesn't have it, create it.\n      if (oAN.length === 0) {\n        oAN.push(315);\n        oAN.push(45);\n      }\n      else if (oAN.length === 1) {\n        var newVal = oAN[0] + 90;\n        if (newVal > 360) {\n          newVal = newVal - 360;\n        }\n        oAN.push(newVal);\n      }\n      overrides = {\n        distance: oAM,\n        azimuth: oAN\n      };\n      break;\n    // A circular range fan that is a point and multiple distances for each ring.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE: //19\n      if ((oAM !== null) && (oAM.length > 0)) {\n        for (i = 0; i < oAM.length;) {\n          if (typeof (oAM[i]) !== \"number\") {\n            oAM.splice(i, 1);\n          }\n          else {\n            i++;\n          }\n        }\n      }\n      if (oAM.length < 2) {\n        // Check to see if the each value is present.\n        for (i = 0; i < 2; i++) {\n          if (oAM[i] === undefined) {\n            oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n          }\n        }\n      }\n      overrides = {\n        distance: oAM\n      };\n      break;\n    // These are 2-point rectangles that determine the angle, and a distance that requires width\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE: //20\n      if (oAM !== null && oAM.length > 0) {\n        if (typeof (oAM[0]) !== \"number\") {\n          oAM[0] = 5000;\n        }\n        oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n      }\n      else {\n        oAM[0] = 5000;\n      }\n      overrides = {\n        distance: oAM\n      };\n      break;\n    // Any air corridor.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_LINE:\n      // This really only applies to air corridors.  As far as\n      // I know the only line that requires distance is air corridors.\n\n      // If we do not have the distance field set, or it is set\n      // and the array length is 0, then we want to set it to a default\n      // width.  We want to make the width in relation to the current\n      // scale of the map, otherwise the air corridor won't look like\n      // an air corridor; it will look like a line.\n\n      if ((oAM === null || oAM.length === 0) || (oAM.length > 0 && (isNaN(oAM[0]) || oAM[0] === null))) {\n        if (item.data && item.data.coordinates && item.data.coordinates.length > 1) {\n          var coord0 = item.data.coordinates[0];\n          var coord1 = item.data.coordinates[1];\n\n          // var pointCartographic0 = Cesium.Cartographic.fromDegrees(coord0[0], coord0[1], 0);\n          // var pointCartographic1 = Cesium.Cartographic.fromDegrees(coord1[0], coord1[1], 0);\n          // var dist = pointCartographic0.distanceTo(pointCartographic1);\n          // lonDistance = dist / 4;\n\n          var pointCartographic0 = new WorldWind.Location(coord0[0], coord0[1]);\n          var pointCartographic1 = new WorldWind.Location(coord1[0], coord1[1]);\n\n          var dist = WorldWind.Location.greatCircleDistance(pointCartographic0, pointCartographic1);\n\n          lonDistance = dist / 4;\n        }\n        else {\n          lonDistance = lonDistance / 34;\n        }\n\n        oAM[0] = lonDistance;\n        overrides = {\n          distance: oAM\n        };\n      }\n      else {\n        overrides = {\n          distance: oAM\n        };\n      }\n\n      break;\n  }\n\n  return overrides;\n};\n\n/**\n *\n * @param modifiers\n * @returns {number}\n */\nEMPWorldWind.utils.milstd.checkSymbolStandard = function(modifiers) {\n  var standard = 1,\n    modifiersCopy,\n    modValue;\n\n  try {\n    if (modifiers !== undefined && modifiers !== null && modifiers !== \"\") {\n      modifiersCopy = typeof (modifiers) === \"string\" ? JSON.parse(modifiers) : emp.helpers.copyObject(modifiers);\n\n      if (modifiersCopy.hasOwnProperty(\"modifiers\")) {\n        modifiersCopy = modifiersCopy.modifiers;\n      }\n\n      if (modifiersCopy.hasOwnProperty(\"renderer\")) {\n        modValue = modifiersCopy.renderer;\n        if (modValue !== undefined && modValue !== null && modValue !== 0) {\n          if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n          }\n          else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n          }\n          else {\n            standard = modValue;\n          }\n        }\n      }\n      else if (modifiersCopy.hasOwnProperty(\"standard\")) {\n        modValue = modifiersCopy.standard;\n        if (modValue !== undefined && modValue !== null && modValue !== 0) {\n          if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n          }\n          else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) > -1) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n          }\n          else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n          }\n          else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) > -1) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n          }\n          else {\n            standard = modValue;\n          }\n        }\n      }\n    }\n  }\n  catch (err) {\n    window.console.log(\"Error getting symbol standard\");\n  }\n\n  return standard;\n};\n\n\n/**\n *\n * @param modifiers\n */\nEMPWorldWind.utils.convertSymbolStandardToRendererFormat = function(modifiers) {\n  var standard,\n    modValue;\n\n  modValue = modifiers.standard;\n  if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n    standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n  }\n  else {\n    standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n  }\n\n  return standard;\n};\n\n/**\n * Parses a 6 character color string, assumes full opacity\n * @param hex #RRGGBB\n * @returns {RGBAColor}\n * @private\n */\nfunction _hex6ToRGBA(hex) {\n  hex = hex.replace('#', '');\n  var r, g, b;\n\n  r = parseInt(hex.substring(0, 2), 16);\n  g = parseInt(hex.substring(2, 4), 16);\n  b = parseInt(hex.substring(4, 6), 16);\n\n  return {\n    red: r,\n    green: g,\n    blue: b,\n    alpha: 1\n  };\n}\n\n/**\n * Parses an 8 character color string\n * @param hex AARRGGBB format\n * @returns {RGBAColor}\n * @private\n */\nfunction _hex8ToRGBA(hex) {\n  var r, g, b, a;\n\n  a = parseInt(hex.substring(0, 2), 16) / 256.0;\n  r = parseInt(hex.substring(2, 4), 16);\n  g = parseInt(hex.substring(4, 6), 16);\n  b = parseInt(hex.substring(6, 8), 16);\n\n  return {\n    red: r,\n    green: g,\n    blue: b,\n    alpha: a\n  };\n}\n\n/**\n * @example\n * hexToRGBA(\"#00FF83\")\n *\n * @param {string} hex\n * @param {float} [alpha=1] 0-1 expected range\n * @param {boolean} [normalize=true] True produce float values between 0 and 1, otherwise integers between 0 and 255\n * @returns {RGBAColor}\n */\nEMPWorldWind.utils.hexToRGBA = function(hex, alpha, normalize) {\n  var newHex;\n\n  if (!hex) {\n    return {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    };\n  }\n  normalize = EMPWorldWind.utils.defined(normalize) ? normalize : true;\n  alpha = EMPWorldWind.utils.defined(alpha) ? alpha : 1;\n\n  if (hex.length === 8) {\n    newHex = _hex8ToRGBA(hex);\n  }\n  else {\n    newHex = _hex6ToRGBA(hex);\n    newHex.alpha = alpha;\n  }\n\n  if (normalize) {\n    newHex.red = newHex.red / 256.0;\n    newHex.green = newHex.green / 256.0;\n    newHex.blue = newHex.blue / 256.0;\n  }\n\n  return newHex;\n};\n\n/**\n * Will normalize an {@link RGBAColor} object, will return the same object if already normalized\n * (contains a decimal in the value)\n *\n * WorldWind.Color requires 0-1 values for color\n *\n * @param {RGBAColor} color\n * @returns {RGBAColor}\n */\nEMPWorldWind.utils.normalizeRGBAColor = function(color) {\n  var normalize,\n    normalColor = Object.assign({}, color);\n\n  normalize = color.red.toString().indexOf('.') === -1 ||\n    color.green.toString().indexOf('.') === -1 ||\n    color.blue.toString().indexOf('.') === -1;\n\n  if (normalize) {\n    normalColor.red = color.red / 256.0;\n    normalColor.green = color.green / 256.0;\n    normalColor.blue = color.blue / 256.0;\n  }\n\n  return normalColor;\n};\n\n/**\n * Returns the east-west distance of the bounds\n * @param {Bounds} bounds\n * @returns {number}\n */\nEMPWorldWind.utils.boundsWidth = function(bounds) {\n  return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n      new WorldWind.Location(0, bounds.west),\n      new WorldWind.Location(0, bounds.east));\n};\n\n/**\n * Returns the north-south distance of the bounds\n * @param {Bounds} bounds\n * @returns {number}\n */\nEMPWorldWind.utils.boundsHeight = function(bounds) {\n  return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n      new WorldWind.Location(bounds.south, 0),\n      new WorldWind.Location(bounds.north, 0));\n};\n\n\n/**\n * Dot color based on the symbol code affiliation\n * @param symbolCode\n * @returns {*}\n */\nEMPWorldWind.utils.selectHighAltitudeRangeImage = function(symbolCode) {\n  var affiliationLetter,\n    highAltitudeRangeImage;\n\n  if (!EMPWorldWind.utils.defined(symbolCode)) {\n    return EMPWorldWind.constants.highAltitudeRangeImage.highScaleImageYellow; // unknown\n  }\n\n  affiliationLetter = symbolCode.substring(1, 2);\n  switch (affiliationLetter.toLowerCase()) {\n    case \"h\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed;\n      break;\n    case \"f\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue;\n      break;\n    case \"n\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen;\n      break;\n    case \"u\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n      break;\n    default:\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n      break;\n  }\n  return highAltitudeRangeImage;\n};\n\n/**\n *\n * @param CameraAltitude\n * @param singlePointAltitudeRanges\n * @returns {EMPWorldWind.constants.SinglePointAltitudeRangeMode|number}\n */\nEMPWorldWind.utils.getSinglePointAltitudeRangeMode = function(CameraAltitude, singlePointAltitudeRanges) {\n  if (CameraAltitude < singlePointAltitudeRanges.mid) {\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n  }\n  else if (CameraAltitude >= singlePointAltitudeRanges.mid && CameraAltitude < singlePointAltitudeRanges.high) {\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE;\n  }\n  else if (CameraAltitude >= singlePointAltitudeRanges.high) {\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE;\n  }\n  else {\n    //default\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n  }\n};\n\n\nEMPWorldWind.utils.getFontInfo = function (name, size, style)\n{\n    var _ModifierFont;\n    var _ModifierFontStyle = size;\n    if (style !== 'bold' || style !== 'normal')\n    {\n        _ModifierFontStyle = style;\n    }\n    else\n    {\n        _ModifierFontStyle = 'bold';\n    }\n    _ModifierFont = _ModifierFontStyle + \" \" + size + \"pt \" + name;\n\n    var measurements = armyc2.c2sd.renderer.utilities.RendererUtilities.measureFont(_ModifierFont);\n    return {name: name, size: size, style: style, measurements: measurements};\n};\n\n\nEMPWorldWind.Math = {};\n\n/**\n * Determines if two values are equal using an absolute or relative tolerance test. This is useful\n * to avoid problems due to roundoff error when comparing floating-point values directly. The values are\n * first compared using an absolute tolerance test. If that fails, a relative tolerance test is performed.\n * Use this test if you are unsure of the magnitudes of left and right.\n *\n * @param {Number} left The first value to compare.\n * @param {Number} right The other value to compare.\n * @param {Number} relativeEpsilon The maximum inclusive delta between <code>left</code> and <code>right</code> for the relative tolerance test.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The maximum inclusive delta between <code>left</code> and <code>right</code> for the absolute tolerance test.\n * @returns {Boolean} <code>true</code> if the values are equal within the epsilon; otherwise, <code>false</code>.\n *\n * @example\n * var a = Cesium.Math.equalsEpsilon(0.0, 0.01, Cesium.Math.EPSILON2); // true\n * var b = Cesium.Math.equalsEpsilon(0.0, 0.1, Cesium.Math.EPSILON2);  // false\n * var c = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON7); // true\n * var d = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON9); // false\n */\nEMPWorldWind.Math.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\n  absoluteEpsilon = EMPWorldWind.Math.defaultValue(absoluteEpsilon, relativeEpsilon);\n  var absDiff = Math.abs(left - right);\n  return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\n};\n\n\n/**\n * Returns the first parameter if not undefined, otherwise the second parameter.\n * Useful for setting a default value for a parameter.\n *\n * @exports defaultValue\n *\n * @param {*} a\n * @param {*} b\n * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\n *\n * @example\n * param = Cesium.defaultValue(param, 'default');\n */\nEMPWorldWind.Math.defaultValue = function(a, b) {\n  if (a !== undefined) {\n    return a;\n  }\n  return b;\n};\n\n\n/**\n * 0.1\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON1 = 0.1;\n\n/**\n * 0.01\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON2 = 0.01;\n\n/**\n * 0.001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON3 = 0.001;\n\n/**\n * 0.0001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON4 = 0.0001;\n\n/**\n * 0.00001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON5 = 0.00001;\n\n/**\n * 0.000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON6 = 0.000001;\n\n/**\n * 0.0000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON7 = 0.0000001;\n\n/**\n * 0.00000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON8 = 0.00000001;\n\n/**\n * 0.000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON9 = 0.000000001;\n\n/**\n * 0.0000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON10 = 0.0000000001;\n\n/**\n * 0.00000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON11 = 0.00000000001;\n\n/**\n * 0.000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON12 = 0.000000000001;\n\n/**\n * 0.0000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON13 = 0.0000000000001;\n\n/**\n * 0.00000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON14 = 0.00000000000001;\n\n/**\n * 0.000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON15 = 0.000000000000001;\n\n/**\n * 0.0000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON16 = 0.0000000000000001;\n\n/**\n * 0.00000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON17 = 0.00000000000000001;\n\n/**\n * 0.000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON18 = 0.000000000000000001;\n\n/**\n * 0.0000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON19 = 0.0000000000000000001;\n\n/**\n * 0.00000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON20 = 0.00000000000000000001;\n\n/**\n * 3.986004418e14\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.GRAVITATIONALPARAMETER = 3.986004418e14;\n\n/**\n * Radius of the sun in meters: 6.955e8\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.SOLAR_RADIUS = 6.955e8;\n\n/**\n * The mean radius of the moon, according to the \"Report of the IAU/IAG Working Group on\n * Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000\",\n * Celestial Mechanics 82: 83-110, 2002.\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.LUNAR_RADIUS = 1737400.0;\n\n/**\n * 64 * 1024\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.SIXTY_FOUR_KILOBYTES = 64 * 1024;\n\n/**\n * Returns the sign of the value; 1 if the value is positive, -1 if the value is\n * negative, or 0 if the value is 0.\n *\n * @param {Number} value The value to return the sign of.\n * @returns {Number} The sign of value.\n */\nEMPWorldWind.Math.sign = function(value) {\n  if (value > 0) {\n    return 1;\n  }\n  if (value < 0) {\n    return -1;\n  }\n\n  return 0;\n};\n\n/**\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n * This is similar to {@link CesiumMath#sign} except that returns 1.0 instead of\n * 0.0 when the input value is 0.0.\n * @param {Number} value The value to return the sign of.\n * @returns {Number} The sign of value.\n */\nEMPWorldWind.Math.signNotZero = function(value) {\n  return value < 0.0 ? -1.0 : 1.0;\n};\n","var EMPWorldWind = window.EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * Set of builder functions that produce singular WorldWind primitive shapes and renderables.\n * @namespace\n */\nEMPWorldWind.editors.primitiveBuilders = (function() {\n\n  /**\n   *\n   * @param feature\n   * @param selectionStyle\n   * @private\n   */\n  function _createPlacemarkAttributes(feature, selectionStyle) {\n    var attributes, highlightAttributes, selectedLineColor;\n\n    // Use PlacemarkAttributes\n    attributes = new WorldWind.PlacemarkAttributes();\n\n    // Set the leaderline options\n    attributes.drawLeaderLine = feature.properties.extrude || false;\n\n    // Set the imageURL\n    if (feature.properties.iconUrl) {\n      attributes.imageSource = feature.properties.iconUrl;\n      if (feature.properties.useProxy) {\n        attributes.imageSource = emp3.api.global.configuration.urlProxy + \"?url=\" + attributes.imageSource;\n      }\n    } else {\n      attributes.imageSource = WorldWind.configuration.baseUrl + \"images/emp-default-icon.png\";\n    }\n\n\n    // Create the label attributes\n    attributes.labelAttributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n    // Create the highlight attributes\n    highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n\n    // Create separate label highlights, will be linked and overridden to the normal attributes if not\n    highlightAttributes.labelAttributes = new WorldWind.TextAttributes(attributes.labelAttributes);\n\n    // Image scale may differ when selected\n    if (selectionStyle.scale) {\n      highlightAttributes.imageScale = selectionStyle.scale;\n    }\n\n    if (selectionStyle.lineColor) {\n      selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n      highlightAttributes.imageColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n    } else {\n      highlightAttributes.imageColor = WorldWind.Color.YELLOW;\n    }\n\n    // Update the label attributes for highlighted labels\n    highlightAttributes.labelAttributes.offset = attributes.labelAttributes.offset;\n    highlightAttributes.labelAttributes.color = highlightAttributes.imageColor;\n\n\n    return {\n      attributes: attributes,\n      highlightAttributes: highlightAttributes\n    };\n  }\n\n  function _createTextAttributes(feature, selectionStyle) {\n    var attributes, highlightAttributes, selectedLabelColor;\n    // GeographicText requires TextAttributes instead\n    attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n    // Create highlight attributes from the regular attributes, only update highlight color\n    highlightAttributes = new WorldWind.TextAttributes(attributes);\n    if (selectionStyle.lineColor) {\n      selectedLabelColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n      highlightAttributes.color = new WorldWind.Color(selectedLabelColor.red, selectedLabelColor.green, selectedLabelColor.blue, selectedLabelColor.alpha);\n    } else {\n      highlightAttributes.color = WorldWind.Color.YELLOW;\n    }\n\n    return {\n      attributes: attributes,\n      highlightAttributes: highlightAttributes\n    };\n  }\n\n  function _createSurfaceShapeAttributes(feature, selectionStyle) {\n    var attributes, highlightAttributes, lineColor, fillColor, selectedLineColor, selectedFillColor;\n\n    attributes = new WorldWind.ShapeAttributes();\n    // Set stroke color\n    if (feature.properties.strokeStyle && feature.properties.strokeStyle.strokeColor) {\n      lineColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.strokeStyle.strokeColor);\n      attributes.outlineColor = new WorldWind.Color(lineColor.red, lineColor.green, lineColor.blue, lineColor.alpha);\n    } else {\n      attributes.outlineColor = WorldWind.Color.BLACK;\n    }\n\n    // Set fill color\n    if (feature.properties.fillColor) {\n      fillColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fillColor);\n      attributes.interiorColor = new WorldWind.Color(fillColor.red, fillColor.green, fillColor.blue, fillColor.alpha);\n    } else {\n      attributes.drawInterior = false;\n    }\n\n    // TODO fillPattern is not yet supported by the ShapeAttributes class\n\n    // Line width\n    if (feature.properties.strokeWidth || feature.properties.lineWidth) {\n      attributes.outlineWidth = feature.properties.strokeWidth || feature.properties.lineWidth;\n    }\n\n    // Stippling of outline\n    attributes.outlineStippleFactor = feature.properties.stippleFactor || attributes.outlineStippleFactor;\n    attributes.outlineStipplePattern = feature.properties.stipplePattern || attributes.outlineStipplePattern;\n\n    // Generate the highlight attributes from the normal attributes\n    highlightAttributes = new WorldWind.ShapeAttributes(attributes);\n\n    // Update the selected lineColor\n    if (selectionStyle.lineColor) {\n      selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n      highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n    } else {\n      highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n    }\n\n    // Update the selected fillColor\n    if (selectionStyle.fillColor) {\n      selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n      highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n    } else {\n      highlightAttributes.drawInterior = false;\n    }\n\n    return {\n      attributes: attributes,\n      highlightAttributes: highlightAttributes\n    };\n  }\n\n  return {\n    /**\n     * @param {emp.typeLibrary.Feature | object} feature\n     * @returns {WorldWind.TextAttributes}\n     */\n    createTextAttributes: function(feature) {\n      var textColor, size,\n        attributes = new WorldWind.TextAttributes();\n\n      // Set the offset\n      attributes.offset = new WorldWind.Offset(\n        WorldWind.OFFSET_FRACTION, -0.05, // To the right of the point by default\n        WorldWind.OFFSET_FRACTION, 0.5 // Center Y be default\n      );\n\n      // Should not be occluded by terrain or objects when false\n      attributes.depthTest = false;\n\n      // Label Color\n      if (feature.properties.labelStyle && feature.properties.labelStyle.color) {\n        textColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.labelStyle.color);\n      } else if (feature.properties.fontColor) {\n        textColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fontColor);\n      } else {\n        textColor = EMPWorldWind.utils.hexToRGBA(EMPWorldWind.constants.propertyDefaults.FILL_COLOR_HEX);\n      }\n      attributes.color = new WorldWind.Color(textColor.red, textColor.green, textColor.blue, textColor.alpha);\n\n      // Font Family\n      if (feature.properties.labelStyle && feature.properties.labelStyle.family) {\n        attributes.font.family = feature.properties.labelStyle.family;\n      } else if (feature.properties.fontFamily) {\n        attributes.font.family = feature.properties.fontFamily;\n      }\n\n      // Justification\n      if (feature.properties.labelStyle && feature.properties.labelStyle.justification) {\n        attributes.font.horizontalAlignment = feature.properties.labelStyle.justification;\n      } else if (feature.properties.labelAlign) {\n        attributes.font.horizontalAlignment = feature.properties.labelAlign;\n      }\n\n      // Font size\n      if (feature.properties.labelStyle && feature.properties.labelStyle.size) {\n        attributes.font.size = feature.properties.labelStyle.size;\n      } else if (feature.properties.fontSize) {\n        size = feature.properties.fontSize;\n        size = size.substring(0, size.length - 2);\n        if (!isNaN(size)) {\n          attributes.font.size = parseInt(feature.properties.fontSize);\n        }\n      }\n\n      // Label Scale\n      if (feature.properties.labelStyle && feature.properties.labelStyle.scale) {\n        attributes.scale = feature.properties.labelStyle.scale;\n      }\n\n      return attributes;\n    },\n\n    /**\n     * Wrapper function for generating the appropriate attributes based on the given feature and selection style\n     * @param {emp.typeLibrary.Feature | object} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {{attributes: *, highlightAttributes: *}}\n     */\n    createShapeAttributes: function(feature, selectionStyle) {\n      var attributes;\n\n      switch (feature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO handle GEO_ACM attributes\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL: // Do nothing, handled by renderer, no primitives\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          attributes = _createPlacemarkAttributes(feature, selectionStyle);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          attributes = _createTextAttributes(feature, selectionStyle);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH: // Not all of the attributes are used for path/polyline\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n        default:\n          attributes = _createSurfaceShapeAttributes(feature, selectionStyle);\n      }\n\n      return attributes;\n    },\n\n    /**\n     * @todo Use update from NASA WW to handle 3d airspaces\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Polygon}\n     */\n    constructAirControlMeasure: function(feature, selectionStyle) {\n      var primitivePolygon, boundaries, attributes, highlightAttributes,\n        i, selectedFillColor,\n        len = feature.data.coordinates.length;\n\n      attributes = new WorldWind.ShapeAttributes();\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      // TODO highlight attributes for ACM\n\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.interiorColor = WorldWind.Color.YELLOW;\n      }\n\n      boundaries = [];\n      for (i = 0; i < len; i++) {\n        // TODO need updates to WorldWind to fix this correctly, also not setting altitude if there are multiple attributes\n        //boundaries[0].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].minAlt));\n        //boundaries[1].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n        boundaries.push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n      }\n\n      primitivePolygon = new WorldWind.Polygon(boundaries, attributes);\n      primitivePolygon.altitudeMode = WorldWind.ABSOLUTE;\n      primitivePolygon.extrude = true;\n      primitivePolygon.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return primitivePolygon;\n    },\n\n    /**\n     * Builds a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceCircle} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceCircle}\n     */\n    constructSurfaceCircle: function(feature, selectionStyle) {\n      var attributes, location, circlePrimitive;\n\n      // Construct circle attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the location\n      location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n      // Construct the primitive\n      circlePrimitive = new WorldWind.SurfaceCircle(location, feature.properties.radius, attributes.attributes);\n\n      // Set the primitive properties\n      circlePrimitive.displayName = feature.name;\n      circlePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      circlePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return circlePrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceEllipse} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceEllipse}\n     */\n    constructSurfaceEllipse: function(feature, selectionStyle) {\n      var attributes, location, ellipsePrimitive;\n\n      // Construct the ellipse attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the location\n      location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n      // Construct the primitive\n      ellipsePrimitive = new WorldWind.SurfaceEllipse(location,\n        feature.properties.semiMajor,\n        feature.properties.semiMinor,\n        feature.properties.azimuth,\n        attributes.attributes);\n\n      // Set the primitive properties\n      ellipsePrimitive.displayName = feature.name;\n      ellipsePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      ellipsePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return ellipsePrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolyline} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolyline}\n     */\n    constructSurfacePolyline: function(feature, selectionStyle) {\n      var i, pathPrimitive, attributes,\n        len = feature.data.coordinates.length,\n        locations = [];\n\n      // Construct the path attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the locations\n      for (i = 0; i < len; i++) {\n        locations.push(new WorldWind.Location(feature.data.coordinates[i][1], feature.data.coordinates[i][0]));\n      }\n\n      // Construct the primitive\n      pathPrimitive = new WorldWind.SurfacePolyline(locations, attributes.attributes);\n\n      // Set the primitive properties\n      pathPrimitive.displayName = feature.name;\n      pathPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      pathPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return pathPrimitive;\n    },\n\n    /**\n     * This function is similar to the feature based version except it takes a geoJSON object as the only parameter.\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolyline}\n     */\n    constructSurfacePolylineFromGeoJSON: function(geoJSON, selectionStyle) {\n      var i, color, attributes, highlightAttributes, polylinePrimitive, selectedLineColor,\n        len = geoJSON.coordinates.length,\n        locations = [];\n\n      attributes = new WorldWind.ShapeAttributes();\n      // SurfacePolyline uses the following attributes\n      if (geoJSON.properties.strokeColor) {\n        color = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor, geoJSON.properties.lineOpacity);\n        attributes.outlineColor = new WorldWind.Color(color.red, color.green, color.blue, color.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n      for (i = 0; i < len; i++) {\n        locations.push(new WorldWind.Location(geoJSON.coordinates[i][1], geoJSON.coordinates[i][0]));\n      }\n\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n\n      polylinePrimitive = new WorldWind.SurfacePolyline(locations, attributes);\n      polylinePrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polylinePrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return polylinePrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Placemark} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Placemark}\n     */\n    constructPlacemark: function(feature, selectionStyle) {\n      var position, placemark, attributes,\n        eyeDistanceScaling = false;\n\n      // Create the placemark attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the position\n      position = new WorldWind.Position(\n        feature.data.coordinates[1],\n        feature.data.coordinates[0],\n        feature.data.coordinates[2] || 0);\n\n      // Construct the primitive\n      placemark = new WorldWind.Placemark(position, eyeDistanceScaling, attributes.attributes);\n\n      // Set the placemark attributes\n      placemark.alwaysOnTop = true;\n      placemark.label = feature.name;\n      placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(attributes.highlightAttributes);\n\n      return placemark;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolygon} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolygon}\n     */\n    constructSurfacePolygon: function(feature, selectionStyle) {\n      var polygonPrimitive, attributes, boundaryLen,\n        i, j,\n        boundaries = [],\n        numBounds = feature.data.coordinates.length;\n\n      // Construct the polygon attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the boundary locations\n      for (i = 0; i < numBounds; i++) {\n        boundaryLen = feature.data.coordinates[i].length;\n        var subBoundary = [];\n        for (j = 0; j < boundaryLen; j++) {\n          subBoundary.push(new WorldWind.Location(feature.data.coordinates[i][j][1], feature.data.coordinates[i][j][0]));\n        }\n        boundaries.push(subBoundary);\n      }\n\n      // Construct the primitive\n      polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes.attributes);\n\n      // Set the primitive properties\n      polygonPrimitive.displayName = feature.name;\n      polygonPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polygonPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return polygonPrimitive;\n    },\n\n    /**\n     *\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolygon}\n     */\n    constructSurfacePolygonFromGeoJSON: function(geoJSON, selectionStyle) {\n      var attributes, interiorColor, outlineColor, boundaryLen, polygonPrimitive,\n        selectedLineColor, selectedFillColor, highlightAttributes,\n        i, j,\n        boundaries = [],\n        numBounds = geoJSON.geometry.coordinates.length;\n\n      for (i = 0; i < numBounds; i++) {\n        boundaryLen = geoJSON.geometry.coordinates[i].length;\n        var subBoundary = [];\n        for (j = 0; j < boundaryLen; j++) {\n          subBoundary.push(new WorldWind.Location(geoJSON.geometry.coordinates[i][j][1], geoJSON.geometry.coordinates[i][j][0]));\n        }\n        boundaries.push(subBoundary);\n      }\n\n      attributes = new WorldWind.ShapeAttributes();\n      if (geoJSON.properties.strokeColor) {\n        outlineColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor);\n        attributes.outlineColor = new WorldWind.Color(outlineColor.red, outlineColor.green, outlineColor.blue, outlineColor.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      if (geoJSON.properties.fillColor) {\n        interiorColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.fillColor);\n        attributes.interiorColor = new WorldWind.Color(interiorColor.red, interiorColor.green, interiorColor.blue, interiorColor.alpha);\n      } else {\n        attributes.drawInterior = false;\n      }\n\n      attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n      attributes.outlineStippleFactor = geoJSON.properties.stippleFactor || attributes.outlineStippleFactor;\n      attributes.outlineStipplePattern = geoJSON.properties.stipplePattern || attributes.outlineStipplePattern;\n\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.drawInterior = false;\n      }\n\n      polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes);\n      polygonPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polygonPrimitive.displayName = geoJSON.properties.name;\n      polygonPrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return polygonPrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceRectangle} primitive\n     * This handles rectangles and squares\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceRectangle}\n     */\n    constructSurfaceRectangle: function(feature, selectionStyle) {\n      var attributes, location, width, height, rectPrimitive;\n\n      // Construct the rectangle/square attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the location\n      location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n      // Determine rect or square\n      if (feature.format === emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE) {\n        // Rectangle\n        width = feature.properties.width;\n        height = feature.properties.height;\n      } else {\n        // Square, width equals height\n        width = feature.properties.width;\n        height = feature.properties.width;\n      }\n\n      // Construct the primitive\n      rectPrimitive = new WorldWind.SurfaceRectangle(location, width, height, feature.properties.azimuth, attributes.attributes);\n\n      // Set the primitive properties\n      rectPrimitive.displayName = feature.name;\n      rectPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      rectPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return rectPrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Text} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Text}\n     */\n    constructText: function(feature, selectionStyle) {\n      var attributes, position, textPrimitive;\n\n      // Construct circle attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the position\n      position = new WorldWind.Position(\n        feature.coordinates[1], // Latitude\n        feature.coordinates[0], // Longitude\n        feature.coordinates[2] ? feature.coordinates[2] : 0); // Altitude\n\n      // Construct the text\n      textPrimitive = new WorldWind.GeographicText(position, feature.name);\n\n      // Set the primitive properties\n      textPrimitive.attributes = attributes.attributes;\n      textPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      textPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return textPrimitive;\n    },\n\n    /**\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Text}\n     */\n    constructTextFromGeoJSON: function(geoJSON, selectionStyle) {\n      var textPrimitive, attributes, highlightAttributes, selectedColor, position;\n\n      // Create the attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(geoJSON);\n\n      // Create the highlight attributes\n      highlightAttributes = new WorldWind.TextAttributes(attributes);\n      if (selectionStyle.lineColor) {\n        selectedColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.color = new WorldWind.Color(selectedColor.red, selectedColor.green, selectedColor.blue, selectedColor.alpha);\n      } else {\n        highlightAttributes.color = WorldWind.Color.YELLOW;\n      }\n\n      // Set the position\n      position = new WorldWind.Position(\n        geoJSON.geometry.coordinates[1], // Latitude\n        geoJSON.geometry.coordinates[0], // Longitude\n        geoJSON.geometry.coordinates[2] ? geoJSON.geometry.coordinates[0] : 0); // Altitude\n\n      // Construct the primitive\n      textPrimitive = new WorldWind.GeographicText(position, geoJSON.properties.label);\n\n      // Set the attributes\n      textPrimitive.attributes = attributes;\n      textPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      textPrimitive.highlightAttributes = highlightAttributes;\n\n      return textPrimitive;\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * @classdesc The EditorController handles all drawing, editing, and updating of features\n * @class\n */\nEMPWorldWind.editors.EditorController = (function() {\n    /**\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {object} modifiers\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Placemark}\n     * @private\n     */\n    function _constructSinglePointMilStdSymbol(feature, modifiers, selectionStyle) {\n        var placemark, attributes, highlightAttributes, position, imageInfo, imageCenter, imageBounds, imageOffset,\n            selectedImage, symbolCode, selectedModifiers,\n            eyeDistanceScaling = false;\n\n        attributes = new WorldWind.PlacemarkAttributes();\n\n        // Leaderline settings\n        attributes.drawLeaderLine = feature.properties.extrude || false;\n        // TODO choose color based on some other setting (affiliation perhaps)\n        attributes.leaderLineAttributes.outlineColor = WorldWind.Color.RED;\n\n        if (feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n            // Optimization\n            attributes.imageScale = 1;\n            attributes.imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.symbolCode);\n            highlightAttributes = new WorldWind.PlacemarkAttributes();\n            highlightAttributes.imageColor = WorldWind.Color.WHITE;\n            highlightAttributes.imageSource = attributes.imageSource;\n        } else {\n\n            if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) && feature.symbolCode) {\n                // do not display country code\n                symbolCode = feature.symbolCode.substr(0, 12) + \"--\" + feature.symbolCode.substr(14);\n            } else {\n                // display country code\n                symbolCode = feature.symbolCode;\n            }\n            // Render\n            imageInfo = armyc2.c2sd.renderer.MilStdIconRenderer.Render(symbolCode, modifiers);\n            imageCenter = imageInfo.getCenterPoint();\n            imageBounds = imageInfo.getImageBounds();\n\n            // Calculate offset\n            imageOffset = new WorldWind.Offset(\n                WorldWind.OFFSET_FRACTION, imageCenter.x / imageBounds.width,\n                WorldWind.OFFSET_FRACTION, 1 - (imageCenter.y / imageBounds.height)\n            );\n\n            attributes.imageScale = 1;\n            attributes.imageOffset = imageOffset;\n            attributes.imageSource = imageInfo.toDataUrl();\n\n            // Highlight attributes\n            highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n            highlightAttributes.imageColor = WorldWind.Color.WHITE;\n            highlightAttributes.imageOffset = imageOffset;\n            highlightAttributes.imageScale = this.state.selectionStyle.scale;\n\n            // Note that this is done statically, if the selection style changes a bulk update to every feature will need to be done\n            selectedModifiers = Object.assign({}, modifiers);\n            selectedModifiers.LINECOLOR = selectionStyle.lineColor;\n            selectedModifiers.FILLCOLOR = selectionStyle.fillColor;\n            selectedImage = armyc2.c2sd.renderer.MilStdIconRenderer.Render(feature.symbolCode, selectedModifiers).toDataUrl();\n            highlightAttributes.imageSource = selectedImage;\n        }\n\n        position = new WorldWind.Position(\n            feature.data.coordinates[1],\n            feature.data.coordinates[0],\n            EMPWorldWind.utils.defined(feature.data.coordinates[2]) ? feature.data.coordinates[2] : 0);\n\n        placemark = new WorldWind.Placemark(position, eyeDistanceScaling);\n        placemark.alwaysOnTop = true;\n        placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n        placemark.attributes = new WorldWind.PlacemarkAttributes(attributes);\n        placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(highlightAttributes);\n\n        return placemark;\n    }\n\n    /**\n     *\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {object} modifiers\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceShape[]}\n     * @private\n     */\n    function _constructMultiPointMilStdFeature(feature, modifiers) {\n        var bbox, bounds, scale, featureCoords,\n            i, data = {},\n            positions = \"\",\n            shapes = [];\n\n        // Generate position string\n        featureCoords = feature.data.coordinates.join().split(\",\");\n        for (i = 0; i < featureCoords.length; i += 2) {\n            positions += featureCoords[i] + \",\" + featureCoords[i + 1] + \" \";\n        }\n        positions = positions.trim();\n\n        // Convert bounds to bbox\n        bounds = this.getBounds();\n        bbox = bounds.west + \",\" + bounds.south + \",\" + bounds.east + \",\" + bounds.north;\n\n        // Calculate the approximate scale\n        scale = EMPWorldWind.utils.boundsWidth(bounds) >> 2;\n\n        data.batch = [];\n        data.scale = scale;\n        // if (this.isSkyWithinMapVisibleArea())\n        //    {\n        //     data.bbox = null; //\"-180,-90,180,90\"; //max rectangle;\n        // }\n        //  else\n        //  {\n        data.bbox = bbox;\n        //     }\n        data.format = EMPWorldWind.constants.MultiPointRenderType.GEOJSON;\n        data.pixelHeight = this.worldWindow.canvas.clientHeight;\n        data.pixelWidth = this.worldWindow.canvas.clientWidth;\n        //data.altMode = WorldWind.CLAMP_TO_GROUND;\n        //data.pixelHeight = this.canvas.height;\n        //data.pixelWidth = this.canvas.width;\n        //data.altMode = \"clampToGround\";\n        // data.converter = this.cesiumConverter;\n        //data.symstd = standard;\n        data.fontInfo = EMPWorldWind.utils.getFontInfo(\"arial\", 10, \"bold\");\n        //sceneInfo.canvasClientWidth = this.canvas.width;\n        //sceneInfo.canvasClientHeight = this.canvas.height;\n        //sceneInfo.drawingBufferWidth = this.viewer.scene.drawingBufferWidth;\n        //sceneInfo.drawingBufferHeight = this.viewer.scene.drawingBufferHeight;\n        data.worldWindow = {};\n        //data.worldWindow.drawContext  = this.worldWindow.drawContext;\n        data.worldWindow.globe = this.worldWindow.globe;\n        //data.cameraInfo = cameraInfo;\n        //data.sceneInfo.mapProjectionEllipsoid = this.ellipsoid;\n        //data.cameraInfo = this.saveCamera(this.viewer.camera);\n        //data.sceneInfo.frameState = {};\n        //data.sceneInfo.frameState.mode = this.viewer.scene.frameState.mode;\n        //data.sceneInfo.frameState.morphTime = this.viewer.scene.frameState.morphTime;\n\n        modifiers[armyc2.c2sd.renderer.utilities.MilStdAttributes.GeoJSONFormat] = 1; // 0 for string geojson, 1 for object geojson\n        var batchObject = {};\n        batchObject.id = feature.coreId;\n        batchObject.name = feature.name;\n        batchObject.description = unescape(feature.description);\n        batchObject.symbolID = feature.symbolCode;\n        batchObject.scale = scale; //scale;\n        batchObject.bbox = data.bbox;\n        batchObject.modifiers = modifiers;\n        batchObject.format = EMPWorldWind.constants.MultiPointRenderType.GEOJSON;\n        batchObject.symstd = 1; //TODO remove this harcoding of synstd    1;//1=2525C, 0=2525Bch2\n        batchObject.fontInfo = EMPWorldWind.utils.getFontInfo(\"arial\", 10, \"bold\");\n        batchObject.altMode = WorldWind.CLAMP_TO_GROUND;\n        batchObject.points = positions;\n        data.batch[0] = batchObject;\n        //call sec renderer worker\n        this.secRendererWorker.A.postMessage(data);\n        //return empty shapes for now. The worker will add the shapes to the feature in a asynchronous way.\n        return shapes;\n        }\n\n        /**\n         * Requires access to the current scope ie .bind .call .apply\n         *\n         * @param {emp.typeLibrary.Feature} feature\n         */\n        function processModifiers(feature) {\n            var modifiers, enhancedModifiers, override, lowRangeMode;\n            if (feature.data.type === \"Point\") {\n                modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n                    feature.properties,\n                    feature.name,\n                    this.state.labelStyles, // Single-point shows symbols based on settings\n                    this.state.pixelSize);\n            } else {\n                modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n                    feature.properties,\n                    feature.name,\n                    EMPWorldWind.constants.AllLabels, // Multi-point always shows symbols\n                    this.state.pixelSize);\n            }\n\n            lowRangeMode = feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n            modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(modifiers, ((this.state.labelStyles.CN === true) && lowRangeMode));\n            //modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(modifiers, true);\n\n            enhancedModifiers = EMPWorldWind.utils.milstd.checkForRequiredModifiers(feature);\n\n            for (override in enhancedModifiers) {\n                if (enhancedModifiers.hasOwnProperty(override)) {\n                    modifiers[override] = enhancedModifiers[override];\n                }\n            }\n\n            return modifiers;\n        }\n\n        /**\n         * Requires access to the current scope.\n         * ie .bind .call .apply\n         *\n         * @param {emp.typeLibrary.Feature} feature\n         * @param {SelectionStyle} selectionStyle\n         * @returns {WorldWind.SurfaceShape[]}\n         */\n        function constructMilStdSymbol(feature, selectionStyle) {\n            var modifiers, shapes = [];\n\n            // Process the modifiers\n            modifiers = processModifiers.call(this, feature);\n\n            if (feature.data.type === \"Point\") {\n                shapes.push(_constructSinglePointMilStdSymbol.call(this, feature, modifiers, selectionStyle));\n            } else if (feature.data.type === \"LineString\") {\n                // Requires access to the WorldWindow navigator, bind to the current scope\n                shapes = shapes.concat(_constructMultiPointMilStdFeature.call(this, feature, modifiers, selectionStyle));\n            } else {\n                // TODO alert the user more gracefully that the type is unhandled\n                window.console.error(\"Unhandled feature type: \" + feature.data.type + \" in EMPWorldWind\");\n            }\n\n        return shapes;\n    }\n\n    /**\n     * Async function\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {PlotFeatureCB} callback\n     * @this EMPWorldWind.Map\n     */\n    function asyncPlotKMLFeature(feature, callback) {\n        var url, kmlFilePromise, kmlLayer, wwFeature,\n            rc = {\n                success: false\n            };\n\n        // Convert the kml string to a data url\n        url = \"data:text/xml,\" + encodeURIComponent(feature.data);\n\n        // Build the KML file promise\n        kmlFilePromise = new WorldWind.KmlFile(url);\n        kmlFilePromise\n            .then(function(kmlFile) {\n                // Construct the KML layer to hold the document\n                kmlLayer = new WorldWind.RenderableLayer(feature.coreId);\n\n                // Add the KML layer to the map\n                kmlLayer.addRenderable(kmlFile);\n                this.worldWindow.addLayer(kmlLayer);\n\n                // Use the standard data holder to keep track of the layer\n                wwFeature = new EMPWorldWind.data.EmpFeature(feature);\n                wwFeature.addShapes(kmlLayer); // This isn't a WW primitive but use it as if it was\n\n                // Record the layer so we can remove/modify it later\n                this.layers[feature.coreId] = kmlLayer;\n\n                // Configure the callback args\n                rc.success = true;\n                rc.feature = wwFeature;\n\n                // Fire the callback\n                callback(rc);\n            }.bind(this));\n    }\n\n    return {\n        /**\n         * Creates a new EMPWorldWind feature and associated WorldWind features from an EMP feature and adds it to the map\n         *\n         * @param {emp.typeLibrary.Feature} empFeature\n         * @param {PlotFeatureCB} callback Callback to be invoked on completion\n         * @this EMPWorldWind.Map\n         */\n        plotFeature: function(empFeature, callback) {\n            var wwFeature, layer, buildShapes, shapes;\n\n            var rc = {\n                message: \"\",\n                success: true,\n                feature: undefined\n            };\n\n            switch (empFeature.format) {\n                case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n                    buildShapes = constructMilStdSymbol.bind(this);\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructPlacemark;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n                case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n                    buildShapes = EMPWorldWind.editors.primitiveBuilders.constructText;\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.KML:\n                    // KML is not supported as native primitives in WorldWind\n                    // TODO KML selection, not sure how to support it or represent it\n                    return asyncPlotKMLFeature.call(this, empFeature, callback);\n                default:\n                    rc.success = false;\n                    rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n            }\n\n            // Check if we have a builder for standard primitives\n            if (!rc.success) {\n                callback(rc);\n                return;\n            }\n            // construct the feature\n            wwFeature = new EMPWorldWind.data.EmpFeature(empFeature);\n            wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n            empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n            empFeature.range = this.worldWindow.navigator.range;\n            // Add the feature to the layer\n            layer = this.getLayer(empFeature.parentCoreId);\n            // Build the primitives\n            // next call is  asynchronized for the case of mil std multipoints so shapes is initially an empty aray. (SEC renderer worker)\n            shapes = buildShapes(empFeature, this.state.selectionStyle);\n            wwFeature.addShapes(shapes);\n            layer.addFeature(wwFeature);\n            // Configure the callback params\n            rc.feature = wwFeature;\n            rc.success = true;\n            // Fire the callback\n            callback(rc);\n        },\n        /**\n         * Updates a WorldWind Renderable object on the map and returns the updated objects in the response\n         * @param {EMPWorldWind.data.EmpFeature} wwFeature\n         * @param {emp.typeLibrary.Feature} empFeature\n         * @param {PlotFeatureCB} callback\n         * @this EMPWorldWind.Map\n         */\n        updateFeature: function(wwFeature, empFeature, callback) {\n            var layer,\n                rc = {\n                    success: true,\n                    message: \"\",\n                    feature: wwFeature\n                };\n\n            // Remove existing primitives from the map\n            if (empFeature.format !== emp3.api.enums.FeatureTypeEnum.KML) {\n                layer = this.getLayer(empFeature.parentCoreId);\n                empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n                layer.removeFeature(wwFeature);\n            } else {\n                // Handle KML\n                this.worldWindow.removeLayer(this.layers[empFeature.coreId]);\n            }\n\n            // Clear the primitives from the feature\n            wwFeature.clearShapes();\n\n            switch (empFeature.format) {\n                case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n                    wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n                    empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n                    wwFeature.addShapes(constructMilStdSymbol.call(this, empFeature, this.state.selectionStyle));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructPlacemark(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n                case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n                    wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructText(empFeature, this.state.labelStyles));\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.KML:\n                    // KML is not supported as native primitives in WorldWind\n                    return asyncPlotKMLFeature.call(this, empFeature, callback);\n                default:\n                    rc.success = false;\n                    rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n            }\n\n            // Redraw the new shapes\n            if (rc.success) {\n                // tag empFeature with current range.\n                empFeature.range = this.worldWindow.navigator.range;\n                // Update the empFeature stored in the wwFeature\n                wwFeature.feature = empFeature;\n                wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n\n                // Update the layer\n                layer.addFeature(wwFeature);\n\n                // Setup the return\n                rc.feature = wwFeature;\n            }\n            callback(rc);\n        },\n        /**\n         *\n         * @param {EMPWorldWind.data.EmpFeature} wwFeature\n         * @this EMPWorldWind.Map\n         */\n        updateFeatureLabelStyle: function(wwFeature) {\n            var shapes,\n                empLayer = this.getLayer(wwFeature.feature.parentCoreId);\n\n            switch (wwFeature.feature.format) {\n                case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n                    empLayer.removeFeature(wwFeature);\n                    wwFeature.clearShapes();\n                    shapes = constructMilStdSymbol.call(this, wwFeature.feature, this.state.selectionStyle);\n                    wwFeature.addShapes(shapes);\n                    empLayer.addFeature(wwFeature);\n                    break;\n                case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n                case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n                case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n                case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n                case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n                case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n                case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n                case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n                case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n                default:\n                    // do nothing\n            }\n        }\n    };\n})();\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * Throttles a function to a restrict the number of calls to it to prevent the engine from locking up under heavy use\n * @param {function} fn callback to throttle\n * @param {number} [threshold=20]\n * @param {context} scope\n * @returns {Function}\n */\nEMPWorldWind.eventHandlers.throttle = function(fn, threshold, scope) {\n  threshold = threshold || 20; // 20 ms throttle\n  var last, deferTimer;\n\n  return function() {\n    var context = scope || this;\n\n    var now = +new Date,\n      args = arguments;\n    if (last && now < last + threshold) {\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function() {\n        last = now;\n        fn.apply(context, args);\n      }, threshold);\n    }\n    else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n};\n\n/**\n * Notifies the map the view has been updated\n *\n * NOTE: The altitude, latitude, and longitude for the returned view may not be accurate as they are still based on\n * the navigator which is based on the lookAt location.\n *\n * @param {emp3.api.enums.CameraEventEnum} [viewEventType]\n * @this EMPWorldWind.Map\n */\nEMPWorldWind.eventHandlers.notifyViewChange = function(viewEventType) {\n  var view = {\n    range: this.worldWindow.navigator.range,\n    tilt: this.worldWindow.navigator.tilt,\n    roll: this.worldWindow.navigator.roll,\n    heading: this.worldWindow.navigator.heading,\n    altitude: this.worldWindow.navigator.range, // TODO this is not correct, just an approximation until camera support\n    location: {\n      lat: this.worldWindow.navigator.lookAtLocation.latitude,\n      lon: this.worldWindow.navigator.lookAtLocation.longitude\n    },\n    bounds: this.getBounds()\n  };\n\n  var lookAt = {\n    range: this.worldWindow.navigator.range,\n    tilt: this.worldWindow.navigator.tilt,\n    heading: this.worldWindow.navigator.heading,\n    altitude: this.worldWindow.navigator.lookAtLocation.altitude || 0,\n    latitude: this.worldWindow.navigator.lookAtLocation.latitude,\n    longitude: this.worldWindow.navigator.lookAtLocation.longitude\n  };\n\n  //optimization . isMapMoving uses an epsilon to reduce the calls to triggerRenderUpdate function.\n  if (viewEventType === emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED) {\n    EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  } else if (this.isMapMoving()) {\n    this.empMapInstance.eventing.ViewChange(view, lookAt, viewEventType);\n    this.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n    this.bounds = this.getBounds();\n\n    // this.shapesInViewArea = this.pickShapesInViewRegion();\n    EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n    this.lastNavigator.range = this.worldWindow.navigator.range;\n    this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n    this.lastNavigator.roll = this.worldWindow.navigator.roll;\n    this.lastNavigator.heading = this.worldWindow.navigator.heading;\n    this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n  }\n};\n\n/**\n * Notify the that a re-render of the MilStd graphics is required based off of a delta from the last time the renderer\n * was called. This may trigger based on altitude delta or distance delta.\n * @this EMPWorldWind.Map\n */\nEMPWorldWind.eventHandlers.triggerRenderUpdate = function() {\n\n  // Don't render until the map has stopped being dragged\n  if (this.state.dragging) {\n    return;\n  }\n\n  this.state.lastRender.bounds = this.getBounds();\n  this.state.lastRender.altitude = this.worldWindow.navigator.range;\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleMidOrLowRange(feature) {\n    feature.isHighAltitudeRangeImage = false;\n    feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.singlePointAltitudeRangeChanged = false;\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleHighRange(feature) {\n    feature.isHighAltitudeRangeImage = true;\n    //  dot image based on affiliation\n    feature.shapes[0].attributes._imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.feature.symbolCode);\n    feature.shapes[0].highlightAttributes._imageSource = feature.shapes[0].attributes._imageSource;\n    feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.singlePointAltitudeRangeChanged = false;\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleMultiPoint(feature) {\n    if (this.isMilStdMultiPointShapeInViewRegion(feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON3) ||\n      feature.feature.wasClipped)) {\n      // optimization - update feature only if inside view region and  (range outside range epsilon or was clipped)\n      this.plotFeature(feature);\n    }\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleSinglePoint(feature) {\n    var callRenderer = false;\n    feature.singlePointAltitudeRangeChanged = feature.singlePointAltitudeRangeMode !== this.singlePointAltitudeRangeMode;\n\n    if (feature.singlePointAltitudeRangeChanged) {\n      if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE) && (this.iconLabelOption !== 'none') ||\n        this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) {\n        callRenderer = true;\n        _handleMidOrLowRange.call(this, feature);\n      } else if (this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n        _handleHighRange.call(this, feature);\n      }\n    }\n\n    // Redraw if necessary\n    if (callRenderer) {\n      this.plotFeature(feature);\n    }\n  }\n\n  emp.util.each(Object.keys(this.features), function(featureId) {\n    var feature = this.features[featureId];\n\n    if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n      feature.feature.data.type === \"LineString\") {\n      _handleMultiPoint.call(this, feature);\n    } else if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n      feature.feature.data.type === \"Point\") {\n      // Optimization required\n      _handleSinglePoint.call(this, feature);\n    }\n  }.bind(this));\n\n  this.worldWindow.redraw();\n};\n\n/**\n *\n * @param mouseEvent\n * @param empEventingArgs\n */\nEMPWorldWind.eventHandlers.extractFeatureFromEvent = function(mouseEvent, empEventingArgs) {\n  var obj, i,\n    pickList = this.worldWindow.pick(this.worldWindow.canvasCoordinates(mouseEvent.clientX, mouseEvent.clientY)),\n    len = pickList.objects.length;\n\n  // Reverse down the list of features to get the topmost first (useful when editing)\n  for (i = len - 1; i >= 0; i--) {\n    obj = pickList.objects[i];\n    if (!obj.isTerrain) {\n      if (obj.userObject.userProperties && obj.userObject.userProperties.id) {\n        empEventingArgs.coreId = obj.userObject.userProperties.id;\n        empEventingArgs.target = \"feature\";\n        break;\n      }\n    }\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent}\n * @typedef {Object} MouseEvent\n */\n\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent}\n * @typedef {Object} WheelEvent\n */\n\n/**\n * Mouse event handlers\n */\nEMPWorldWind.eventHandlers.mouse = (function() {\n  var throttleTime = 50; // 50ms\n  var _throttleWrapper = EMPWorldWind.eventHandlers.throttle;\n\n  /**\n   * Sends a message to EMP Pointer eventing handler\n   */\n  var _notifyEMPPointing = _throttleWrapper(function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n  }, throttleTime);\n\n  /**\n   * Sends a message to EMP that the view has changed\n   */\n  var _notifyEMPViewChanged = _throttleWrapper(function(state) {\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, state);\n  }, throttleTime);\n\n  return {\n    /**\n     * @param {MouseEvent} event\n     * @this EMPWorldWind.Map\n     */\n    click: function(event) {\n      var clickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      clickEvent.type = emp.typeLibrary.Pointer.EventType.SINGLE_CLICK;\n\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, clickEvent);\n      this.empMapInstance.eventing.Pointer(clickEvent);\n    },\n    /**\n     *\n     * @param {MouseEvent} event\n     * @this EMPWorldWind.Map\n     */\n    dblclick: function(event) {\n      var dblClickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      dblClickEvent.type = emp.typeLibrary.Pointer.EventType.DBL_CLICK;\n\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, dblClickEvent);\n\n      this.empMapInstance.eventing.Pointer(dblClickEvent);\n    },\n    /**\n     *\n     * @param {WheelEvent} event\n     * @this EMPWorldWind.Map\n     */\n    wheel: function(event) {\n      // Handle different browser wheel values\n      var deltaY = event.wheelDeltaY /* Chrome */ || -event.deltaY /* Firefox */ || 0;\n\n      if (deltaY < 0 && this.worldWindow.navigator.range > EMPWorldWind.constants.view.MAX_HEIGHT) {\n        this.worldWindow.navigator.range = EMPWorldWind.constants.view.MAX_HEIGHT;\n        event.preventDefault();\n      }\n\n      var preventDefaultLockStates = [\n        emp3.api.enums.MapMotionLockEnum.NO_MOTION,\n        emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN,\n        emp3.api.enums.MapMotionLockEnum.NO_ZOOM\n      ];\n\n      if (preventDefaultLockStates.includes(this.state.lockState)) {\n        event.preventDefault();\n      }\n\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n    },\n    /**\n     * Wrapper for mousedown\n     * @see EMPWorldWind.eventHandlers.mouse.mousedown\n     * @this EMPWorldWind.Map\n     */\n    mousedown: function(event) {\n      var mousedownEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n      mousedownEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mousedownEvent);\n\n      this.empMapInstance.eventing.Pointer(mousedownEvent);\n    },\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mouseup\n     * @this EMPWorldWind.Map\n     */\n    mouseup: function(event) {\n      var mouseupEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      mouseupEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n\n      if (this.state.dragging) {\n        this.state.dragging = false;\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      }\n\n      this.state.autoPanning = EMPWorldWind.constants.NO_PANNING;\n      this.empMapInstance.eventing.Pointer(mouseupEvent);\n    },\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mousemove\n     * @this EMPWorldWind.Map\n     */\n    mousemove: function(event) {\n\n      /**\n       * Returns true if the location and buttons pressed are identical\n       * @returns boolean\n       * @private\n       */\n      var _filterDuplicateMouseEvents = function(event) {\n        return event.clientX === this.state.lastInteractionEvent.clientX &&\n          event.clientY === this.state.lastInteractionEvent.clientY &&\n          event.buttons === this.state.lastInteractionEvent.buttons;\n      }.bind(this);\n\n      /**\n       * Detects the location for auto-panning in smartMotion mode\n       * @private\n       */\n      var _handleSmartMotion = function() {\n        var smartAreaBuffer = 0.05,\n          element = event.srcElement || event.originalTarget,\n          elementBounds = element.getBoundingClientRect(),\n          pan = {\n            up: false,\n            down: false,\n            left: false,\n            right: false\n          };\n\n        // Pan left or right\n        pan.left = event.offsetX < elementBounds.width * smartAreaBuffer;\n        pan.right = event.offsetX > elementBounds.width - (elementBounds.width * smartAreaBuffer);\n\n        // Pan up or down\n        pan.up = event.offsetY < elementBounds.height * smartAreaBuffer;\n        pan.down = event.offsetY > elementBounds.height - (elementBounds.height * smartAreaBuffer);\n\n        if (pan.up || pan.down || pan.left || pan.right) {\n          this.state.autoPanning = pan;\n          this.spinGlobe();\n        } else {\n          this.state.autoPanning = EMPWorldWind.constants.NO_PANNING;\n        }\n      }.bind(this);\n\n      /**\n       * Checks if the event needs to be cancelled based on the lock state\n       * @private\n       */\n      var _checkForPreventDefault = function() {\n        var preventDefault = [\n          emp3.api.enums.MapMotionLockEnum.NO_MOTION,\n          emp3.api.enums.MapMotionLockEnum.NO_PAN,\n          emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN,\n          emp3.api.enums.MapMotionLockEnum.SMART_MOTION\n        ];\n\n        if (preventDefault.includes(this.state.lockState)) {\n          event.preventDefault();\n        }\n      }.bind(this);\n\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (this.state.lastInteractionEvent && _filterDuplicateMouseEvents(event)) {\n        return;\n      }\n\n      // Check if we prevent default\n      _checkForPreventDefault();\n\n      // If we are in a smartMotion state handle it\n      if (this.state.lockState === emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        _handleSmartMotion();\n      }\n\n      // Store the event\n      this.state.lastInteractionEvent = event;\n\n      // Update EMP (throttled)\n      _notifyEMPPointing.call(this, event);\n\n      // If right or left mouse or both notify the view must have changed\n      if (event.buttons !== 0 && event.buttons < 3) {\n        this.state.dragging = true;\n        _notifyEMPViewChanged.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n      } else {\n        this.state.dragging = false;\n      }\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch}\n * @typedef {object} Touch\n */\n\n/**\n * @typedef {object} TouchEvent\n * @property {Touch[]} touches\n */\n\n/**\n * Touch event handlers\n */\nEMPWorldWind.eventHandlers.touch = (function() {\n\n\n  return {\n    /**\n     * Touch down event handler,\n     * Approximates mousedown\n     * @param {TouchEvent} event\n     * @this EMPWorldWind.Map\n     */\n    touchstart: function(event) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n\n      coords.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n      this.state.lastInteractionEvent = event;\n      this.empMapInstance.eventing.Pointer(coords);\n    },\n    /**\n     * Touch end event handler\n     * Approximates mouseup\n     * @this EMPWorldWind.Map\n     */\n    touchend: function(/*event*/) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent.touches[0]);\n\n      coords.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n      this.empMapInstance.eventing.Pointer(coords);\n    },\n    /**\n     * Touch cancel event handler, placeholder until it is needed\n     */\n    touchcancel: function(/*event*/) {\n      // Placeholder\n      // var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n      // window.console.debug(event, coords);\n    },\n    /**\n     * Touch move event handler\n     * @param {TouchEvent} event\n     * @this EMPWorldWind.Map\n     */\n    touchmove: function(event) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n      coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n      if (coords.lat !== undefined) {\n        this.empMapInstance.eventing.Pointer(coords);\n      }\n\n      // TODO check if map is locked or not before notifying view change\n      this.state.lastInteractionEvent = event;\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n/**\n * @typedef {object} WWDragEvent\n */\n\n\n/**\n * The event handlers listed here are not standard DOM drag event handlers. They represent notification functions\n * to alert the core to different drag states.\n *\n * @see WorldWind.DragRecognizer\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.drag = (function() {\n\n\n  return {\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    began: function(/*event*/) {\n      //window.console.debug(event);\n    },\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    changed: function(/*event*/) {\n      //window.console.debug(event);\n    },\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    ended: function(/*event*/) {\n      //window.console.debug(event);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events}\n * @typedef {object} PointerEvent\n */\n\n/**\n * Pointer events are currently aliases for their mouseevent counterparts\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.pointer = (function() {\n\n\n  return {\n    /**\n     * Wrapper for mousedown\n     * @see EMPWorldWind.eventHandlers.mouse.mousedown\n     * @this EMPWorldWind.Map\n     */\n    pointerdown: EMPWorldWind.eventHandlers.mouse.mousedown,\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mouseup\n     * @this EMPWorldWind.Map\n     */\n    pointerup: EMPWorldWind.eventHandlers.mouse.mouseup,\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mousemove\n     * @this EMPWorldWind.Map\n     */\n    pointermove: EMPWorldWind.eventHandlers.mouse.mousemove\n  };\n}());\n"]}