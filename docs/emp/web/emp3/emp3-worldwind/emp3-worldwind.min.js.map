{"version":3,"sources":["../../../src/mapengine/worldwind/worldwind-map-engine.js","../../../src/mapengine/worldwind/EMPWorldWind.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpWMSLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpKMLLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpFeature.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.constants.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.utils.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.primitiveBuilders.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.EditorController.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.mouse.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.touch.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.drag.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.pointer.js"],"names":["EMPWorldWind","window","emp","engineDefs","worldWindMapEngine","args","empMapInstance","mapInstance","empWorldWind","engineInterface","map","createEngineTemplate","mapEngineExposed","implementation","displayName","version","capabilities","mapType","type3D","type2_5D","formats","GEOJSON_BASIC","plot","draw","edit","GEOJSON_FULL","WMS","version_1_1","version_1_3","elevationData","KML_BASIC","KML_COMPLEX","IMAGE","MILSTD","version2525B","version2525C","AIRSPACE","AOI","settings","milstd","iconSize","labelOption","requirements","wmsCapabilities","projection","flat","initialize","succeed","empWorldWindInstance","engineDirect","name","ref","eventing","StatusChange","status","states","READY","err","console","error","fail","MAP_INSTANCE_INIT_FAILED","view","set","transaction","altitude","bottomLeft","topRight","feature","bufferScale","t1","t2","toRad","Math","PI","items","globalType","location","latitude","lat","longitude","lon","tilt","roll","heading","bounds","west","south","east","north","pow","sin","WorldWind","EARTH_RADIUS","asin","sqrt","cos","format","emp3","api","enums","FeatureTypeEnum","GEO_CIRCLE","properties","radius","GEO_ELLIPSE","max","semiMajor","semiMinor","GEO_RECTANGLE","width","height","GEO_SQUARE","GEO_ACM","coordinates","failures","push","animate","pause","animateCB","getCenter","getBounds","run","eventHandlers","notifyViewChange","call","CameraEventEnum","CAMERA_MOTION_STOPPED","CAMERA_IN_MOTION","centerOnLocation","lookAt","range","overlay","add","rc","failList","util","each","addLayer","success","typeLibrary","Error","coreId","message","level","MINOR","remove","removeLayer","overlayId","wms","addWMS","removeWMS","itemsCount","length","plotFeature","featureCount","cbArgs","bind","this","unplotFeature","mil2525","icon","labels","setLabelStyle","getLatLonFromXY","pickPoint","Vec2","x","y","terrainObject","worldWindow","pickTerrain","position","undefined","visibility","featureId","features","setVisible","visible","refresh","config","bRangeChanged","configHandlers","brightness","value","setContrast","milStdIconLabels","renderingOptimization","utils","defined","enableRenderingOptimization","midDistanceThreshold","singlePointAltitudeRanges","mid","farDistanceThreshold","high","selectionScale","setSelectionScale","selectionColor","setSelectionColor","setIconSize","prop","hasOwnProperty","singlePointAltitudeRangeMode","getSinglePointAltitudeRangeMode","navigator","navigation","enable","setLockState","selection","selectFeatures","failed","capture","screenshot","dataUrl","state","destroy","shutdown","kmllayer","_complete","id","kmlLayer","addKML","removeKML","wmts","itemCount","addWmtsToMap","count","removeWmtsFromMap","isV2Core","Map","wwd","layers","services","pixelSize","drawing","editing","dragging","lastInteractionEvent","lockState","MapMotionLockEnum","UNLOCKED","lastRender","selectionStyle","scale","lineColor","fillColor","autoPanning","String","constants","PAN_STATE","HALTED","step","up","down","left","right","IconSize","medium","labelStyles","V","L","S","AA","AB","AC","H","M","T","T1","CN","C","F","G","H1","H2","J","K","N","P","W","W1","X","Y","Z","SinglePointAltitudeRangeMode","LOW_RANGE","empSelections","optimizationMapMoveEpsilon","EPSILON5","lastNavigator","shapesInViewArea","secRendererWorker","A","B","lastSelected","RendererWorker","throttleAddMultiPointRedraws","prototype","_redrawAllFeatures","Object","keys","featureKey","_createContrastLayers","blackContrastLayer","SurfaceSector","Sector","FULL_SPHERE","attributes","interiorColor","Color","drawOutline","whiteContrastLayer","contrastLayer","RenderableLayer","pickEnabled","addRenderable","_addEventHandlers","eventClass","eventHandler","addEventListener","_setInitialExtent","extent","alt","centerLat","centerLon","isNaN","Location","greatCircleDistance","_applyConfigProperties","far","_initializeWebWorkers","Worker","configuration","baseUrl","onerror","armyc2","c2sd","renderer","utilities","ErrorLogger","LogException","onMessage","e","rendererData","data","result","rendererItem","layer","i","wwFeature","shapes","geojson","componentFeature","lineCount","strokeWidth","strokeWeight","geometry","type","subGeoJSON","editors","primitiveBuilders","constructSurfacePolylineFromGeoJSON","constructTextFromGeoJSON","constructSurfacePolygonFromGeoJSON","getLayer","rootOverlayId","removeFeature","clearShapes","addShapes","selected","isFeatureSelected","addFeature","redraw","onmessage","goToAnimator","GoToAnimator","dragRecognizer","DragRecognizer","canvas","event","drag","lookAtLocation","helpers","copyObject","configProperties","MultiPointRateLimit","EditorController","redrawMilStdSymbols","empOverlay","EmpLayer","featureKeys","removeFeatureSelection","_getLocation","Position","_goToCompleteCallback","travelTime","globeMoveTime","goTo","_completeLookAtMotion","callback","_callback","EmpFeature","updateFeature","_handleKMLFeature","_handleDefaultFeature","parentCoreId","removeFeatureById","messge","selectedFeature","select","storeFeatureSelection","enableLayer","subLayer","_handleSubLayers","subLayers","getSubLayer","_removeLayer","layerTypes","layerType","ARCGIS_93_REST_LAYER","BING_LAYER","IMAGE_LAYER","OSM_LAYER","TMS_LAYER","WMS_LAYER","WMTS_LAYER","indexOf","layerExists","enabled","wmsLayer","EmpWMSLayer","kml","cb","kmlFilePromise","EmpKMLLayer","KmlFile","url","then","kmlFile","kmlRenderableLayer","catch","Boolean","getFeatureSelection","empWMTS","xhr","async","_createWMTSLayer","xmlDom","wmtsCapabilities","wmtsLayerCapabilities","wmtsConfig","WmtsCapabilities","WmtsLayer","formLayerConfiguration","xhrSuccess","wmtsLayer","responseXML","xhrError","statusText","XMLHttpRequest","open","onload","send","getSelections","isFeaturePresent","isMultiPointPresent","multiPointCollection","getMultiPoint","storeMultiPoint","multiPoint","removeMultiPoint","isAirspacePresent","airspaceCollection","getAirspace","storeAirspace","airspace","removeAirspace","getSinglePoints","singlePointCollection","isSinglePointPresent","getSinglePoint","storeSinglePoint","singlePoint","removeSinglePoint","getSinglePointCount","isSinglePointIdOnHoldPresent","singlePointCollectionIdOnHold","getSinglePointIdOnHold","singlePointCollectionOnHold","storeSinglePointIdOnHold","singlePointId","removeSinglePointIdOnHold","getSinglePointsIdOnHold","getSinglePointsIdOnHoldCount","styles","style","includes","updateFeatureLabelStyle","triggerRenderUpdate","contrast","renderables","WHITE_CONTRAST","BLACK_CONTRAST","lock","SMART_MOTION","spinGlobe","pan","_getVerticalPan","_getHorizontalPan","_cleanPanArgs","_allowPan","_notifyEMPPointer","coords","getEventCoordinates","Pointer","EventType","MOVE","_panMap","vertical","horizontal","goToPosition","PANNING","COMPLETE","cancel","assign","NO_PANNING","drawFrame","toDataURL","viewport","linearLocation","isMapMoving","equalsEpsilon","EPSILON1","pickShapesInViewRegion","canvasCoordinates","boundRectangle","Rectangle","pickShapesInRegion","isMilStdMultiPointShapeInViewRegion","empFeature","p","coordinate","_boundsContainsPoint","color","_validateColor","_prefixColorString","startsWith","size","description","parentId","_overlay","defineProperty","enumerable","_layer","shape","FeatureType","RENDERABLE","addFeatures","addFeatureChild","entity","childEntity","isFeatureChildPresent","parentFeature","childrenFeatureKeys","allocateFeatureChild","parentEntity","addSubLayer","isSubLayerPresent","isLayerEmpty","featuresLength","subOverlaysLength","getFeature","isFeaturePresentById","isPrimitive","PRIMITIVE","PRIMITIVE_COLLECTION","isDataSource","DATA_SOURCE","getFeatures","getSubLayers","removeFeatures","removeFeatureSelections","showFeatures","showFeature","oMultiPoint","childrenFeatureId","childrenEntity","featureType","ENTITY","show","billboard","reRenderBillboardRequired","path","polyline","polygon","label","rectangle","empCesium","COMPOUND_ENTITY","airspaceLabelPresent","airspaceLabel","get","oAirspace","oSinglePoint","removeSubLayers","showSubLayers","clearLayer","LayerType","showLayer","isVisible","deallocateFeatureChild","worldwind","removeRenderable","renderable","deallocateFeature","allocateFeature","featureChildrenLength","childrenFeatures","getFeatureChildrenEntityArray","index","childrenFeature","clearFeature","removeFeatureChild","featureChildrenEntityArray","removeSubLayer","subOverlay","SubLayers","removeSubLayerById","subLayersLength","layerNames","_wms","activeLayers","join","useProxy","global","urlProxy","service","sector","levelZeroDelta","numLevels","timeString","_wmsLayer","WmsLayer","_buildURL","_id","_altitudeMode","CLAMP_TO_GROUND","altMode","shapesCount","altitudeMode","_selected","highlighted","primitives","Array","isArray","userProperties","primitive","MAX_HEIGHT","globeWasMoving","globeWasZooming","extentBufferFactor","USE_DATA_SOURCE","verySmall","tiny","small","large","extraLarge","METERS_PER_INCH","SCALE_LINE_LENGTH","propertyDefaults","FILL_COLOR_HEX","LINE_COLOR_HEX","LINE_WIDTH","selectionProperties","COLOR_HEX","WIDTH","SCALE","GROUND_PRIMITIVE","OVERLAY_LAYER","TERRAIN_LAYER","EntityType","BILLBOARD","BOX","CORRIDOR","CYLINDER","DESCRIPTION","ELLIPSE","ELLIPSOID","LABEL","MODEL","ORIENTATION","PATH","POLYGON","POLYLINE","POLYLINE_VOLUME","POSITION","RECTANGLE","VIEW_FROM","WALL","KML","MultiPointRenderType","JSON","GEOJSON","DATA_URL","CANVAS","CANVAS_LABEL_ONLY","SVG","SVG_LABEL_ONLY","MID_RANGE","HIGHEST_RANGE","D","LabelStyle","REQUIRED_LABELS","COMMON_LABELS","ALL_LABELS","AllLabels","RendererSettings","standard","Symbology_2525Bch2_USAS_13_14","Symbology_2525C","modifierLookup","QUANTITY","REDUCED_OR_REINFORCED","STAFF_COMMENTS","ADDITIONAL_INFO_1","ADDITIONAL_INFO_2","ADDITIONAL_INFO_3","EVALUATION_RATING","COMBAT_EFFECTIVENESS","SIGNATURE_EQUIPMENT","HIGHER_FORMATION","HOSTILE","IFF_SIF","DIRECTION_OF_MOVEMENT","OFFSET_INDICATOR","UNIQUE_DESIGNATOR_1","UNIQUE_DESIGNATOR_2","EQUIPMENT_TYPE","DATE_TIME_GROUP","DATE_TIME_GROUP_2","ALTITUDE_DEPTH","LOCATION","SPEED","SPECIAL_C2_HEADQUARTERS","DISTANCE","AZIMUTH","FILL_COLOR","LINE_COLOR","TEXT_COLOR","X_OFFSET","X_UNITS","Y_OFFSET","Y_UNITS","NAME","STANDARD","highAltitudeRangeImage","highRangeImageRed","btoa","highRangeImageBlue","highRangeImageGreen","highRangeImageYellow","clientX","clientY","screenX","screenY","updateModifierLabels","iconLabels","iconPixelSize","mod","modifiedModifiers","property","convertModifierStringTo2525","modifiers","showModLabels","standardModifiers","sModifier","modValue","parse","stringify","Modifiers","convertSymbolStandardToRendererFormat","checkForRequiredModifiers","item","symbolCode","oAM","oAN","basicSymbolCode","symbolDef","lonDistance","overrides","SymbolUtilities","getBasicSymbolID","checkSymbolStandard","SymbolDefTable","getSymbolDef","distance","azimuth","drawCategory","DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE","slice","DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE","splice","newVal","DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE","DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_LINE","coord0","coord1","pointCartographic0","pointCartographic1","dist","modifiersCopy","toLowerCase","featureMilStdVersionType","MILSTD_2525C","MILSTD_2525B","log","_hex6ToRGBA","hex","replace","r","g","b","parseInt","substring","red","green","blue","alpha","_hex8ToRGBA","a","hexToRGBA","normalize","newHex","normalizeRGBAColor","normalColor","toString","boundsWidth","boundsHeight","selectHighAltitudeRangeImage","affiliationLetter","highScaleImageYellow","CameraAltitude","getFontInfo","_ModifierFont","_ModifierFontStyle","measurements","RendererUtilities","measureFont","fn","delay","context","queue","timer","processQueue","shift","arguments","apply","clearInterval","limited","setInterval","relativeEpsilon","absoluteEpsilon","defaultValue","absDiff","abs","EPSILON2","EPSILON3","EPSILON4","EPSILON6","EPSILON7","EPSILON8","EPSILON9","EPSILON10","EPSILON11","EPSILON12","EPSILON13","EPSILON14","EPSILON15","EPSILON16","EPSILON17","EPSILON18","EPSILON19","EPSILON20","GRAVITATIONALPARAMETER","SOLAR_RADIUS","LUNAR_RADIUS","SIXTY_FOUR_KILOBYTES","sign","signNotZero","_createPlacemarkAttributes","highlightAttributes","selectedLineColor","PlacemarkAttributes","drawLeaderLine","extrude","iconUrl","imageSource","imageScale","labelAttributes","createTextAttributes","TextAttributes","imageColor","YELLOW","offset","_createTextAttributes","selectedLabelColor","_createSurfaceShapeAttributes","selectedFillColor","ShapeAttributes","strokeStyle","strokeColor","outlineColor","BLACK","drawInterior","lineWidth","outlineWidth","outlineStippleFactor","stippleFactor","outlineStipplePattern","stipplePattern","textColor","Offset","OFFSET_FRACTION","depthTest","labelStyle","fontColor","family","font","fontFamily","justification","horizontalAlignment","labelAlign","fontSize","createShapeAttributes","GEO_MIL_SYMBOL","GEO_POINT","GEO_TEXT","GEO_PATH","GEO_POLYGON","constructAirControlMeasure","primitivePolygon","boundaries","len","maxAlt","Polygon","ABSOLUTE","constructSurfaceCircle","circlePrimitive","SurfaceCircle","constructSurfaceEllipse","ellipsePrimitive","SurfaceEllipse","constructSurfacePolyline","pathPrimitive","locations","SurfacePolyline","geoJSON","polylinePrimitive","lineOpacity","constructPlacemark","placemark","eyeDistanceScaling","Placemark","alwaysOnTop","constructSurfacePolygon","polygonPrimitive","boundaryLen","j","numBounds","subBoundary","SurfacePolygon","constructSurfaceRectangle","rectPrimitive","SurfaceRectangle","constructText","textPrimitive","GeographicText","selectedColor","_constructSinglePointMilStdSymbol","imageInfo","imageCenter","imageBounds","imageOffset","selectedImage","selectedModifiers","leaderLineAttributes","RED","WHITE","substr","MilStdIconRenderer","Render","getCenterPoint","getImageBounds","toDataUrl","LINECOLOR","FILLCOLOR","_constructMultiPointMilStdFeature","bbox","featureCoords","batch","pixelHeight","clientHeight","pixelWidth","clientWidth","fontInfo","positions","processModifiers","split","trim","MilStdAttributes","GeoJSONFormat","batchObject","unescape","symbolID","symstd","points","postMessage","enhancedModifiers","override","lowRangeMode","showLabels","constructMilStdSymbol","concat","asyncPlotKMLFeature","encodeURIComponent","buildShapes","empLayer","throttle","threshold","scope","last","deferTimer","now","Date","clearTimeout","setTimeout","viewEventType","ViewChange","featuresToRedraw","_handleMidOrLowRange","isHighAltitudeRangeImage","singlePointAltitudeRangeChanged","_handleHighRange","_imageSource","_handleMultiPoint","_handleSinglePoint","callRenderer","iconLabelOption","wasClipped","extractFeatureFromEvent","mouseEvent","empEventingArgs","obj","pickList","pick","objects","isTerrain","userObject","target","mouse","throttleTime","_notifyEMPPointing","_notifyEMPViewChanged","_isDuplicateEvent","buttons","click","clickEvent","SINGLE_CLICK","dblclick","dblClickEvent","DBL_CLICK","wheel","deltaY","wheelDeltaY","preventDefault","preventDefaultLockStates","NO_MOTION","NO_ZOOM_NO_PAN","NO_ZOOM","mousedown","mousedownEvent","MOUSEDOWN","mouseup","mouseupEvent","MOUSEUP","mousemove","_handleSmartMotion","smartAreaBuffer","element","srcElement","originalTarget","elementBounds","getBoundingClientRect","offsetX","offsetY","_checkForPreventDefault","NO_PAN","touch","touchstart","touches","touchend","touchcancel","touchmove","began","changed","ended","pointer","pointerdown","pointerup","pointermove"],"mappings":"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","file":"emp3-worldwind.min.js","sourcesContent":["var EMPWorldWind = window.EMPWorldWind || {};\nvar emp = window.emp || {};\nemp.engineDefs = emp.engineDefs || {};\n\n\n/**\n * @classdesc EMP3 WorldWind Map Engine Interface\n *\n * @class Instantiates a WorldWind map for EMP\n * @param args\n * @returns {engineInterface}\n */\nemp.engineDefs.worldWindMapEngine = function(args) {\n\n  var empMapInstance = args.mapInstance;\n  /** @type EMPWorldWind.Map# */\n  var empWorldWind;\n\n  var engineInterface = emp.map.createEngineTemplate(),\n    mapEngineExposed = engineInterface;\n\n  engineInterface.implementation.displayName = \"WorldWind Map Engine\";\n  engineInterface.implementation.version = \"1.0.0\";\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.mapType.type2_5D = true;\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.draw = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.edit = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.edit = true;\n  engineInterface.capabilities.formats.WMS.version_1_1 = true;\n  engineInterface.capabilities.formats.WMS.version_1_3 = true;\n  engineInterface.capabilities.formats.WMS.elevationData = true;\n  engineInterface.capabilities.formats.KML_BASIC.plot = true;\n  engineInterface.capabilities.formats.KML_BASIC.draw = true;\n  engineInterface.capabilities.formats.KML_BASIC.edit = true;\n  engineInterface.capabilities.formats.KML_COMPLEX.plot = true;\n  engineInterface.capabilities.formats.IMAGE.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.edit = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.edit = true;\n  engineInterface.capabilities.formats.AIRSPACE.plot = true;\n  engineInterface.capabilities.formats.AIRSPACE.draw = true;\n  engineInterface.capabilities.formats.AIRSPACE.edit = true;\n  engineInterface.capabilities.formats.AOI.plot = true;\n  engineInterface.capabilities.formats.AOI.draw = true;\n  engineInterface.capabilities.formats.AOI.edit = true;\n  engineInterface.capabilities.settings.milstd.iconSize = true;\n  engineInterface.capabilities.settings.milstd.labelOption = true;\n  engineInterface.requirements.wmsCapabilities = true;\n  engineInterface.capabilities.projection.flat = false;\n\n  /**\n   * Initialization\n   * @param {EMPWorldWind.Map} empWorldWindInstance\n   */\n  engineInterface.initialize.succeed = function(empWorldWindInstance) {\n    // Add initialization code here\n    try {\n      empWorldWind = empWorldWindInstance;\n      empWorldWind.mapEngineExposed = mapEngineExposed;\n      emp.map.engineDirect = {name: \"worldwind\", ref: empWorldWind};\n\n      // Notify application that the map is ready to receive data\n      empMapInstance.eventing.StatusChange({\n        status: emp.map.states.READY\n      });\n    }\n    catch (err) {\n      window.console.error(\"Error initializing WorldWind \", err);\n    }\n  };\n\n  /**\n   * Indicates a failed loading\n   */\n  engineInterface.initialize.fail = function() {\n    empMapInstance.eventing.StatusChange({\n      status: emp.map.states.MAP_INSTANCE_INIT_FAILED\n    });\n  };\n\n  /**\n   * @todo drop this functionality into the map itself and expose a simpler call\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.set = function(transaction) {\n    var args, altitude, bottomLeft, topRight, feature, bufferScale,\n      t1, t2,\n      toRad = Math.PI / 180.0; // save a few divisions later\n\n    switch (transaction.items[0].globalType) {\n      case \"view\":\n        if (transaction.items[0].location) {\n          // Set camera\n          args = {\n            latitude: transaction.items[0].location.lat,\n            longitude: transaction.items[0].location.lon,\n            altitude: transaction.items[0].altitude,\n            tilt: transaction.items[0].tilt,\n            roll: transaction.items[0].roll,\n            heading: transaction.items[0].heading\n          };\n        }\n        else if (transaction.items[0].bounds) {\n          // Zoom to overlay\n\n          // Express lat/lon as radians\n          bottomLeft = {\n            lat: transaction.items[0].bounds.west * toRad,\n            lon: transaction.items[0].bounds.south * toRad\n          };\n\n          topRight = {\n            lat: transaction.items[0].bounds.east * toRad,\n            lon: transaction.items[0].bounds.north * toRad\n          };\n\n          t1 = Math.pow(Math.sin((topRight.lat - bottomLeft.lat) / 2), 2);\n          t2 = Math.pow(Math.sin((topRight.lon - bottomLeft.lon) / 2), 2);\n\n          // Haversine formula\n          // TODO see if we can replace this with WorldWind functionality\n          altitude = 2 * WorldWind.EARTH_RADIUS * Math.asin(Math.sqrt(t1 + Math.cos(topRight.lat) * Math.cos(bottomLeft.lat) * t2));\n\n          args = {\n            latitude: (transaction.items[0].bounds.north + transaction.items[0].bounds.south) / 2,\n            longitude: (transaction.items[0].bounds.east + transaction.items[0].bounds.west) / 2,\n            altitude: altitude,\n            tilt: 0,\n            roll: 0,\n            heading: 0\n          };\n        }\n        break;\n      case \"feature\":\n        bufferScale = 2.25; // Assume conic view from the camera\n        feature = transaction.items[0];\n        switch (feature.format) {\n          case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n            altitude = feature.properties.radius * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n            altitude = Math.max(feature.properties.semiMajor, feature.properties.semiMinor) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n            altitude = Math.max(feature.properties.width, feature.properties.height) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n            altitude = feature.properties.width * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO compute bounding box diagonal distance\n          default:\n            altitude = 10000; // Default to 10000m\n        }\n\n        args = {\n          latitude: transaction.items[0].coordinates[1],\n          longitude: transaction.items[0].coordinates[0],\n          altitude: altitude,\n          tilt: 0,\n          roll: 0,\n          heading: 0\n        };\n        break;\n      default:\n        transaction.failures.push(transaction.items[0]);\n    }\n\n    // Check if we are animating\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n\n        // If we animated update the returned values\n        transaction.items[0].location = {\n          lat: empWorldWind.getCenter().latitude,\n          lon: empWorldWind.getCenter().longitude\n        };\n        transaction.items[0].bounds = empWorldWind.getBounds();\n\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n\n    // Notify start of movement\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    empWorldWind.centerOnLocation(args);\n\n    // Set initial transaction return values, to be overwritten if the move is animated\n    transaction.items[0].location = {\n      lat: empWorldWind.getCenter().latitude,\n      lon: empWorldWind.getCenter().longitude\n    };\n    transaction.items[0].bounds = empWorldWind.getBounds();\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.lookAt.set = function(transaction) {\n    var args = {\n      latitude: transaction.items[0].latitude,\n      longitude: transaction.items[0].longitude,\n      altitude: transaction.items[0].altitude,\n      range: transaction.items[0].range,\n      tilt: transaction.items[0].tilt,\n      heading: transaction.items[0].heading\n    };\n\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n    empWorldWind.lookAt(args);\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.add = function(transaction) {\n    var rc,\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.addLayer(overlay);\n\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message,\n          level: emp.typeLibrary.Error.level.MINOR\n        }));\n      }\n    });\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.remove = function(transaction) {\n    var rc = {},\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.removeLayer(overlay.overlayId);\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message\n        }));\n      }\n    });\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.add = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.addWMS(wms);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.remove = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.removeWMS(wms);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.add = function(transaction) {\n    var feature,\n      itemsCount = transaction.items.length;\n\n    // Pause the transaction\n    transaction.pause();\n\n    while (itemsCount) {\n      // Note pre-decrement\n      feature = transaction.items[--itemsCount];\n\n      empWorldWind.plotFeature(feature, function(featureCount, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error({\n            feature: cbArgs.feature\n          }));\n        }\n\n        // All items have been processed\n        if (featureCount === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemsCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.remove = function(transaction) {\n    var rc;\n\n    emp.util.each(transaction.items, function(feature) {\n\n      rc = empWorldWind.unplotFeature(feature);\n      if (!rc.success) {\n        transaction.fail(new emp.typeLibrary.Error({\n          message: rc.message\n        }));\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   * @deprecated\n   */\n  engineInterface.settings.mil2525.icon.labels.set = function(transaction) {\n    empWorldWind.setLabelStyle(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.getLatLonFromXY = function(transaction) {\n    var pickPoint = new WorldWind.Vec2(transaction.items[0].x, transaction.items[0].y);\n    var terrainObject = empWorldWind.worldWindow.pickTerrain(pickPoint).terrainObject();\n    transaction.items[0].lat = terrainObject ? terrainObject.position.latitude : undefined;\n    transaction.items[0].lon = terrainObject ? terrainObject.position.longitude : undefined;\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.visibility.set = function(transaction) {\n    emp.util.each(transaction.items, function(feature) {\n      if (feature.featureId in empWorldWind.features) {\n        empWorldWind.features[feature.featureId].setVisible(feature.visible);\n      }\n    });\n    empWorldWind.refresh();\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.map.config = function(transaction) {\n    var bRangeChanged;\n\n    var configHandlers = {\n      \"brightness\": function(value) {\n        empWorldWind.setContrast(value);\n      },\n      \"milStdIconLabels\": function(value) {\n        empWorldWind.setLabelStyle(value);\n      },\n      \"renderingOptimization\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.enableRenderingOptimization)) {\n          bRangeChanged = true;\n          empWorldWind.enableRenderingOptimization = value;\n        }\n      },\n      \"midDistanceThreshold\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.mid)) {\n          bRangeChanged = true;\n          empWorldWind.singlePointAltitudeRanges.mid = value;\n        }\n      },\n      \"farDistanceThreshold\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.high)) {\n          bRangeChanged = true;\n          empWorldWind.singlePointAltitudeRanges.high = value;\n          //empCesium.singlePointAltitudeRangeMode = cesiumEngine.utils.getSinglePointAltitudeRangeMode(empCesium.cameraAltitude, empCesium.singlePointAltitudeRanges);\n          //empCesium.processOnRangeChangeSinglePoints();\n        }\n      },\n      \"selectionScale\": function(value) {\n        empWorldWind.setSelectionScale(value);\n      },\n      \"selectionColor\": function(value) {\n        empWorldWind.setSelectionColor(value);\n      },\n      \"iconSize\": function(value) {\n        empWorldWind.setIconSize(value);\n      }\n    };\n\n    // Iterate through each transaction item, check for properties and apply them\n    emp.util.each(transaction.items, function(config) {\n      var prop, value;\n      for (prop in config) {\n        if (config.hasOwnProperty(prop)) {\n          // Skip meta data fields\n          if (prop === \"messageId\") {\n            continue;\n          }\n\n          // Extract the value\n          value = config[prop];\n\n          // Check if there is a handler for the property\n          if (configHandlers.hasOwnProperty(prop)) {\n            // Apply the change\n            configHandlers[prop](value);\n          } else {\n            transaction.fail(new emp.typeLibrary.Error({\n              message: 'Config property ' + prop + ' is not supported by this engine'\n            }));\n          }\n\n          if (bRangeChanged) {\n            empWorldWind.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(empWorldWind.worldWindow.navigator.range, empWorldWind.singlePointAltitudeRanges);\n            // force a render update when the altitude range changes\n            empWorldWind.refresh();\n          }\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.navigation.enable = function(transaction) {\n    empWorldWind.setLockState(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.selection.set = function(transaction) {\n    var rc = empWorldWind.selectFeatures(transaction.items);\n    transaction.failures = rc.failed;\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.capture.screenshot = function(transaction) {\n    return transaction.items[0].dataUrl = empWorldWind.screenshot();\n  };\n\n  /**\n   * Destroys the current engine\n   */\n  engineInterface.state.destroy = function() {\n    if (empWorldWind) {\n      empWorldWind.shutdown();\n      empWorldWind = undefined;\n    }\n  };\n\n  /**\n   * Creates a KML layer\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.kmllayer.add = function(transaction) {\n    var items = transaction.items.length;\n\n    /**\n     * Resume the transaction once all items have been processed\n     * @private\n     */\n    function _complete(args) {\n      items--;\n\n      if (!args.success) {\n        transaction.failures.push(new emp.typeLibrary.Error({\n          message: args.message,\n          coreId: args.id\n        }));\n      }\n\n      // There are other layers to add\n      if (items > 0) {\n        return;\n      }\n\n      transaction.run();\n    }\n\n    // Pause the transaction, KML is async in WorldWind\n    transaction.pause();\n    emp.util.each(transaction.items, function(kmlLayer) {\n      empWorldWind.addKML(kmlLayer, _complete);\n    });\n  };\n\n  /**\n   * Remove a KML Layer\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.kmllayer.remove = function(transaction) {\n    emp.util.each(transaction.items, function(kmlLayer) {\n      empWorldWind.removeKML(kmlLayer);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wmts.add = function(transaction) {\n    var itemCount = transaction.items.length;\n\n    // Pause the transaction, we have to manually get the capabilities\n    transaction.pause();\n\n    while (itemCount--) {\n      empWorldWind.addWmtsToMap(transaction.items[itemCount], function(count, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error(cbArgs));\n        }\n\n        if (count === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wmts.remove = function(transaction) {\n    var failures = [];\n\n    emp.util.each(transaction.items, function(wmts) {\n      var rc = empWorldWind.removeWmtsFromMap(wmts);\n      if (!rc.success) {\n        failures.push(wmts);\n      }\n    });\n\n    transaction.failures = failures;\n  };\n\n  // return the engineInterface object as a new engineTemplate instance\n  return engineInterface;\n};\n","/* global WorldWind */\n\n/**\n * @namespace\n */\nvar EMPWorldWind = {};\nEMPWorldWind.isV2Core = false;\n\n/**\n * @classdesc The main interface for interacting with NASA WebWorldWind. Any interaction with the WorldWindow will occur\n * in this class.\n *\n * @class\n * @param {WorldWind.WorldWindow} wwd\n */\nEMPWorldWind.Map = function(wwd) {\n  /**\n   * @type {WorldWind.WorldWindow}\n   */\n  this.worldWindow = wwd;\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpLayer>} */\n  this.layers = {};\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpFeature>} */\n  this.features = {};\n\n  /** @type {Object.<string, *>} */\n  this.services = {};\n\n  /**\n   * This holds the state of the instance\n   * @memberof EMPWorldWind.Map#\n   */\n  this.state = {\n    /**\n     * Pixel size\n     */\n    pixelSize: 1,\n    /**\n     * Whether the map is in drawing mode\n     */\n    drawing: false,\n    /**\n     * Whether the map is in editing mode\n     */\n    editing: false,\n    /**\n     * Whether we are dragging\n     */\n    dragging: false,\n    /**\n     * Placeholder for the last detected mouse move/touch/pointer event\n     */\n    lastInteractionEvent: undefined,\n    /**\n     * Lock state\n     */\n    lockState: emp3.api.enums.MapMotionLockEnum.UNLOCKED,\n    /**\n     * Object for holding state to compute when MilStdSymbols should be re-rendered\n     */\n    lastRender: {\n      bounds: {\n        north: 0,\n        south: 0,\n        east: 0,\n        west: 0\n      },\n      altitude: 0\n    },\n    /**\n     * Default selection style\n     * @type SelectionStyle\n     */\n    selectionStyle: {\n      scale: 1,\n      lineColor: \"#FFFF00\",\n      fillColor: undefined\n    },\n    /**\n     * Object for describing autoPanning behavior\n     */\n    autoPanning: {\n      state: String(EMPWorldWind.constants.PAN_STATE.HALTED),\n      step: 0.5,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    },\n    /**\n     * Defaults to 1:1 scale\n     */\n    iconSize: EMPWorldWind.constants.IconSize.medium,\n    /**\n     * Label styles for the renderer\n     */\n    labelStyles: {\n      \"V\": false,\n      \"L\": false,\n      \"S\": false,\n      \"AA\": false,\n      \"AB\": false,\n      \"AC\": true,\n      \"H\": false,\n      \"M\": false,\n      \"T\": false,\n      \"T1\": false,\n      \"CN\": false,\n      \"C\": false,\n      \"F\": false,\n      \"G\": false,\n      \"H1\": false,\n      \"H2\": false,\n      \"J\": false,\n      \"K\": false,\n      \"N\": false,\n      \"P\": false,\n      \"W\": false,\n      \"W1\": false,\n      \"X\": false,\n      \"Y\": false,\n      \"Z\": false\n    }\n  };\n\n  // Optimization for mil standard  single points.\n  /**\n   * Object for holding render optimization params\n   */\n  this.singlePointAltitudeRanges = {};\n  /**\n   * Mid-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.mid = 600000; // default\n  /**\n   * High-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.high = 1200000; // default\n  /**\n   * Current range mode\n   */\n  this.singlePointAltitudeRangeMode = EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n\n  /**\n   * Current set of selected objects\n   */\n  this.empSelections = {};\n  this.optimizationMapMoveEpsilon = EMPWorldWind.Math.EPSILON5;\n  this.lastNavigator = {};\n  this.shapesInViewArea = undefined;\n  this.bounds = undefined;\n\n  /** SEC renderer worker for multi-points */\n  this.secRendererWorker = {};\n  this.secRendererWorker.A = undefined;\n  this.secRendererWorker.B = undefined;\n  this.secRendererWorker.lastSelected = EMPWorldWind.constants.RendererWorker.B;\n\n  this.throttleAddMultiPointRedraws = undefined;\n};\n\n// typedefs ============================================================================================================\n/**\n * @typedef {object} SelectionStyle\n * @property {number} scale\n * @property {string|undefined} lineColor\n * @property {string|undefined} fillColor\n */\n\n/**\n * @callback EMPWorldWind.map~WMTSCallback\n */\n\n/**\n * @typedef {object} AutoPanParams\n * @property {boolean} up\n * @property {boolean} down\n * @property {boolean} left\n * @property {boolean} right\n */\n\n/**\n * @callback PlotFeatureCB\n * @param {object} cbArgs\n * @param {EMPWorldWind.data.Feature} cbArgs.feature\n * @param {boolean} cbArgs.success\n * @param {string} [cbArgs.message]\n * @param {string} [cbArgs.jsError]\n */\n//======================================================================================================================\n/**\n *\n */\nEMPWorldWind.Map.prototype = function() {\n\n  // Private Functions =================================================================================================\n  /**\n   * Redraws all features on the map, useful when updating selectionStyle\n   */\n  function _redrawAllFeatures() {\n    emp.util.each(Object.keys(this.features), function(featureKey) {\n      var feature = this.features[featureKey];\n      this.plotFeature(feature);\n    }.bind(this));\n  }\n\n  // Public interface ==================================================================================================\n  return {\n    /**\n     * Creates the initial layers\n     * @param {object} args\n     * @param {Bounds} [args.extent]\n     * @param {object} [args.configProperties]\n     * @param {emp.map} args.mapInstance\n     */\n    initialize: function(args) {\n      /**\n       * @memberof EMPWorldWind.Map#\n       * @type {emp.map}\n       */\n      this.empMapInstance = args.mapInstance;\n\n      /**\n       * Creates the two contrast layers\n       * @private\n       */\n      var _createContrastLayers = function() {\n        // Create the contrast layers\n        var blackContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n        blackContrastLayer.attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0.0);\n        blackContrastLayer.attributes.drawOutline = false;\n\n        var whiteContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n        whiteContrastLayer.attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0.0);\n        whiteContrastLayer.attributes.drawOutline = false;\n\n        this.contrastLayer = new WorldWind.RenderableLayer('contrast layer');\n        this.contrastLayer.pickEnabled = false;\n        this.worldWindow.addLayer(this.contrastLayer);\n\n        this.contrastLayer.addRenderable(whiteContrastLayer);\n        this.contrastLayer.addRenderable(blackContrastLayer);\n      }.bind(this);\n\n      /**\n       * Registers event handlers\n       * @private\n       */\n      var _addEventHandlers = function() {\n        // Register DOM event handlers\n        // var throttleValue = 50; // throttle on event calls in ms\n        var eventClass, eventHandler;\n        for (eventClass in EMPWorldWind.eventHandlers) {\n          if (EMPWorldWind.eventHandlers.hasOwnProperty(eventClass)) {\n            eventClass = EMPWorldWind.eventHandlers[eventClass];\n            for (eventHandler in eventClass) {\n              if (eventClass.hasOwnProperty(eventHandler)) {\n                this.worldWindow.addEventListener(eventHandler, eventClass[eventHandler].bind(this));\n              }\n            }\n          }\n        }\n      }.bind(this);\n\n      /**\n       * Sets the view to an initial extent or default of 44,44\n       * @param extent\n       * @private\n       */\n      var _setInitialExtent = function(extent) {\n        var alt;\n        extent = extent || {\n            centerLat: 44,\n            centerLon: 44\n          };\n\n        if (!isNaN(extent.north) && !isNaN(extent.south) && !isNaN(extent.east) && !isNaN(extent.west)) {\n          // Get approximate height from the width of the extent\n          alt = Math.PI * WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n              new WorldWind.Location(extent.north, extent.west),\n              new WorldWind.Location(extent.south, extent.east));\n\n          this.centerOnLocation({\n            latitude: (extent.north + extent.south) / 2,\n            longitude: (extent.east + extent.west) / 2,\n            altitude: alt\n          });\n        } else if (!isNaN(extent.centerLat) && !isNaN(extent.centerLon)) {\n          // Arbitrarily use 1e7 as altitude\n          this.centerOnLocation({\n            latitude: extent.centerLat,\n            longitude: extent.centerLon,\n            altitude: 1e7\n          });\n        }\n      }.bind(this);\n\n      /**\n       * Sets configs for the engine from initial params\n       * @param config\n       * @private\n       */\n      var _applyConfigProperties = function(config) {\n        config = config || {};\n\n        if (EMPWorldWind.utils.defined(config.midDistanceThreshold)) {\n          this.singlePointAltitudeRanges.mid = config.midDistanceThreshold;\n        }\n\n        if (EMPWorldWind.utils.defined(config.farDistanceThreshold)) {\n          this.singlePointAltitudeRanges.far = config.farDistanceThreshold;\n        }\n\n        if (EMPWorldWind.utils.defined(config.brightness)) {\n          this.setContrast(config.brightness);\n        }\n      }.bind(this);\n\n      /**\n       * Initializes the web workers for rendering\n       * @private\n       */\n      var _initializeWebWorkers = function() {\n        this.secRendererWorker.A = new Worker(WorldWind.configuration.baseUrl + 'renderer/MPCWorker.js');\n        this.secRendererWorker.B = new Worker(WorldWind.configuration.baseUrl + 'renderer/MPCWorker.js');\n\n        this.secRendererWorker.A.onerror = function(error) {\n          //logs error to console\n          armyc2.c2sd.renderer.utilities.ErrorLogger.LogException(\"MPWorker A\", \"postMessage\", error);\n        };\n\n        // Overwrite the interface function\n        this.secRendererWorker.onMessage = function(e) {\n          var rendererData = [];\n\n          if (e.data.id) { // Not a batch call\n            rendererData.push = e.data.result;\n          } else {\n            rendererData = e.data.result;\n          }\n\n          emp.util.each(rendererData, function(rendererItem) {\n            if (!EMPWorldWind.utils.defined(rendererItem) || typeof rendererItem === 'string') {\n              return;\n            }\n\n            var layer,\n              i,\n              wwFeature = this.features[rendererItem.id],\n              shapes = [],\n              data = rendererItem.geojson;\n\n            emp.util.each(data.features, function(componentFeature) {\n              var lineCount;\n\n              // TODO have the renderer return the proper width, manually overwriting the line width for now\n              componentFeature.properties.strokeWidth = 1;\n              componentFeature.properties.strokeWeight = 1;\n\n              switch (componentFeature.geometry.type) {\n                case \"MultiLineString\":\n                  lineCount = componentFeature.geometry.coordinates.length;\n\n                  for (i = 0; i < lineCount; i++) {\n                    var subGeoJSON = {\n                      properties: componentFeature.properties,\n                      coordinates: componentFeature.geometry.coordinates[i]\n                    };\n\n                    shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(subGeoJSON, this.state.selectionStyle));\n                  }\n                  break;\n                case \"LineString\":\n                  shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(componentFeature, this.state.selectionStyle));\n                  break;\n                case \"Point\":\n                  shapes.push(EMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON(componentFeature, this.state.selectionStyle));\n                  break;\n                case \"Polygon\":\n                  shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON(componentFeature, this.state.selectionStyle));\n                  break;\n                default:\n                  window.console.error(\"Unable to render symbol with type \" + componentFeature.geometry.type);\n              }\n            }.bind(this));\n\n            if (wwFeature) {\n              // Remove the feature from the root layer\n              layer = this.getLayer(this.rootOverlayId);\n              layer.removeFeature(wwFeature);\n\n              // Clear the primitives from the feature\n              wwFeature.clearShapes();\n\n              // Update the empFeature stored in the wwFeature\n              wwFeature.addShapes(shapes);\n              wwFeature.feature.range = this.worldWindow.navigator.range;\n              wwFeature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n              wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n\n              // Update the layer\n              layer.addFeature(wwFeature);\n            }\n          }.bind(this));\n\n          this.worldWindow.redraw();\n        }.bind(this);\n\n        this.secRendererWorker.A.onmessage = this.secRendererWorker.onMessage;\n\n\n        this.secRendererWorker.B.onerror = function(error) {\n          //logs error to console\n          armyc2.c2sd.renderer.utilities.ErrorLogger.LogException(\"MPWorker B\", \"postMessage\", error);\n        };\n        this.secRendererWorker.B.onmessage = this.secRendererWorker.onMessage;\n      }.bind(this);\n\n      // Create the contrast Layers\n      _createContrastLayers();\n\n      // Create the goTo manipulator\n      /** @member {WorldWind.GoToAnimator} */\n      this.goToAnimator = new WorldWind.GoToAnimator(this.worldWindow);\n\n      // Register drag event handlers\n      /** @member {WorldWind.DragRecognizer} */\n      this.dragRecognizer = new WorldWind.DragRecognizer(this.worldWindow.canvas, function(event) {\n        if (event.state in EMPWorldWind.eventHandlers.drag) {\n          EMPWorldWind.eventHandlers.drag[event.state].call(this, event);\n        }\n      }.bind(this));\n\n      // Register event handlers\n      _addEventHandlers();\n\n      // Set initial extent\n      _setInitialExtent(args.extent);\n\n      // Store initial navigator settings\n      if (this.worldWindow.navigator) {\n        this.lastNavigator.range = this.worldWindow.navigator.range;\n        this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n        this.lastNavigator.roll = this.worldWindow.navigator.roll;\n        this.lastNavigator.heading = this.worldWindow.navigator.heading;\n        this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n      }\n\n      // Update any other config properties passed in\n      _applyConfigProperties(args.configProperties);\n\n      // Trigger an initial camera update to update EMP\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n\n      // Initialize sec worker\n      _initializeWebWorkers();\n\n      this.throttleAddMultiPointRedraws = EMPWorldWind.utils.MultiPointRateLimit(EMPWorldWind.editors.EditorController.redrawMilStdSymbols, 1);\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Overlay} empOverlay\n     * @returns {{success: boolean, message: string}}\n     */\n    addLayer: function(empOverlay) {\n      var layer,\n        rc = {\n          success: false,\n          message: ''\n        };\n\n      if (empOverlay.overlayId in this.layers) {\n        rc = {\n          success: false,\n          message: \"An overlay with this id (\" + empOverlay.overlayId + \") already exists\"\n        };\n        return rc;\n      }\n\n      // Create the layer\n      layer = new EMPWorldWind.data.EmpLayer(empOverlay);\n      this.rootOverlayId = empOverlay.overlayId;\n      this.worldWindow.addLayer(layer.layer);\n\n      // Register the layer\n      this.layers[layer.id] = layer;\n\n      // Update the display\n      this.worldWindow.redraw();\n\n      rc.success = true;\n\n      return rc;\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Overlay | EMPWorldWind.data.EmpLayer} layer\n     * @returns {{success: boolean, message: string}}\n     */\n    removeLayer: function(layer) {\n      var featureKey, id,\n        result = {\n          success: false,\n          message: \"\"\n        };\n\n      id = layer.id || layer.coreId;\n      layer = this.getLayer(id);\n      if (layer) {\n        for (featureKey in layer.featureKeys) {\n          if (layer.featureKeys.hasOwnProperty(featureKey)) {\n            this.removeFeatureSelection(featureKey);\n          }\n        }\n\n        // Update the display\n        this.worldWindow.removeLayer(layer.layer);\n        this.worldWindow.redraw();\n\n        // Remove the record of the layer\n        delete this.layers[layer.id];\n\n        result.success = true;\n      } else {\n        result.message = \"No layer found with the id \" + id;\n      }\n\n      return result;\n    },\n    /**\n     *\n     * @param {object} args\n     * @param {number} args.latitude\n     * @param {number} args.longitude\n     * @param {number} [args.altitude]\n     * @param {number} [args.tilt]\n     * @param {number} [args.roll]\n     * @param {number} [args.heading]\n     * @param {boolean} [args.animate = false]\n     * @param {function} [args.animateCB]\n     */\n    centerOnLocation: function(args) {\n      var position;\n\n      /**\n       *\n       * @param args\n       * @returns {*}\n       * @private\n       */\n      function _getLocation(args) {\n        if (typeof args.altitude === \"number\") {\n          return new WorldWind.Position(args.latitude, args.longitude, args.altitude);\n        } else {\n          return new WorldWind.Location(args.latitude, args.longitude);\n        }\n      }\n\n      // Get the location\n      position = _getLocation(args);\n\n      // Set the navigator options\n      this.worldWindow.navigator.heading = args.heading || 0;\n      this.worldWindow.navigator.roll = args.roll || 0;\n      this.worldWindow.navigator.tilt = args.tilt || 0;\n\n      var _goToCompleteCallback = function() {\n        // Notify the view has changed, this also triggers a re-render of any graphics in view\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n\n        // Fire the original callback\n        if (typeof args.animateCB === \"function\") {\n          return args.animateCB();\n        }\n      }.bind(this);\n\n      // Fire the move\n      this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n      this.goToAnimator.goTo(position, _goToCompleteCallback);\n    },\n    /**\n     *\n     * @param {object} args\n     * @param {number} args.latitude\n     * @param {number} args.longitude\n     * @param {number} [args.altitude] Currently unused by WorldWind\n     * @param {number} args.range\n     * @param {number} args.tilt\n     * @param {number} args.heading\n     * @param {boolean} [args.animate]\n     * @param {function} [args.animateCB]\n     */\n    lookAt: function(args) {\n      // substituting range for altitude for now\n      if (args.range !== 0) {\n        args.range = args.range || this.worldWindow.navigator.range;\n      }\n\n      var position = new WorldWind.Position(args.latitude, args.longitude, args.range);\n\n      /**\n       * @this {EMPWorldWind.Map}\n       * @private\n       */\n      function _completeLookAtMotion() {\n        this.worldWindow.navigator.lookAtLocation.latitude = args.latitude;\n        this.worldWindow.navigator.lookAtLocation.longitude = args.longitude;\n\n        // lookAt does not support altitude in WorldWind yet\n        // this.worldWindow.navigator.lookAtLocation.altitude = args.altitude;\n\n        this.worldWindow.navigator.range = args.range;\n        this.worldWindow.navigator.tilt = args.tilt;\n        this.worldWindow.navigator.heading = args.heading;\n\n        if (args.animateCB) {\n          args.animateCB();\n        }\n\n        this.worldWindow.redraw();\n      }\n\n      this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n      this.goToAnimator.goTo(position, _completeLookAtMotion.bind(this));\n    },\n    /**\n     * @param {emp.typeLibrary.Feature|EMPWorldWind.data.EmpFeature} feature\n     * @param {PlotFeatureCB} [callback]\n     */\n    plotFeature: function(feature, callback) {\n      /**\n       * Handle the async plotFeature method\n       * @private\n       */\n      var _callback = function(cbArgs) {\n        // Trigger an update for the display\n        this.worldWindow.redraw();\n\n        if (cbArgs.success) {\n          // Add the new feature to the global list of features\n          if (!(cbArgs.feature.id in this.features)) {\n            this.features[cbArgs.feature.id] = cbArgs.feature;\n          }\n        }\n\n        if (typeof callback === \"function\") {\n          return callback(cbArgs);\n        }\n      }.bind(this);\n\n      // Check if we are using a EMPWorldWind feature internally\n      if (feature instanceof EMPWorldWind.data.EmpFeature) {\n        feature = feature.feature;\n      }\n\n      if (feature.featureId in this.features) {\n        // Update an existing feature\n        EMPWorldWind.editors.EditorController.updateFeature.call(this, this.features[feature.featureId], feature, _callback);\n      } else {\n        // Plot a new feature\n        EMPWorldWind.editors.EditorController.plotFeature.call(this, feature, _callback);\n      }\n    },\n\n    /**\n     *\n     * @param {emp.typeLibrary.Feature} feature\n     */\n    unplotFeature: function(feature) {\n      var layer,\n        rc = {\n          success: false,\n          message: \"\"\n        };\n\n      /**\n       * KML features are actually layers in WorldWind\n       * @private\n       */\n      var _handleKMLFeature = function() {\n        if (feature.coreId in this.layers) {\n          // Remove it from the map\n          this.worldWindow.removeLayer(this.layers[feature.coreId]);\n\n          // Remove our record of the KML feature\n          delete this.layers[feature.coreId];\n          delete this.features[feature.coreId];\n\n          // Update the map\n          this.worldWindow.redraw();\n\n          rc.success = true;\n        }\n        return rc;\n      }.bind(this);\n\n      /**\n       * Remove the features normally\n       * @private\n       */\n      var _handleDefaultFeature = function() {\n        layer = this.getLayer(feature.parentCoreId);\n        if (layer) {\n          // Remove it from the layer\n          layer.removeFeatureById(feature.coreId);\n\n          // Clear it from the selection hash\n          this.removeFeatureSelection(feature.coreId);\n\n          // Remove it from the list of features\n          if (this.features.hasOwnProperty(feature.coreId)) {\n            delete this.features[feature.coreId];\n          }\n\n          // Update the map\n          this.worldWindow.redraw();\n          rc.success = true;\n        } else {\n          rc.messge = 'Could not find the parent overlay';\n        }\n        return rc;\n      }.bind(this);\n\n\n      if (feature.format === \"kml\") { // KML features are actually layers\n        return _handleKMLFeature();\n      }\n      return _handleDefaultFeature();\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Selection[]} empSelections\n     */\n    selectFeatures: function(empSelections) {\n      var selected = [],\n        failed = [];\n\n      emp.util.each(empSelections, function(selectedFeature) {\n        var feature = this.features[selectedFeature.featureId];\n        if (feature) {\n          feature.selected = selectedFeature.select;\n          (feature.selected) ? this.storeFeatureSelection(selectedFeature.featureId) : this.removeFeatureSelection(selectedFeature.featureId);\n          //selected.push(feature);\n        } else {\n          failed.push(selectedFeature.featureId);\n        }\n      }.bind(this));\n\n      this.worldWindow.redraw();\n\n      return {\n        success: selected.length !== 0,\n        selected: selected,\n        failed: failed\n      };\n    },\n    /**\n     *\n     * @param {string} id\n     * @returns {EMPWorldWind.data.EmpLayer}\n     */\n    getLayer: function(id) {\n      if (this.layers.hasOwnProperty(id)) {\n        return this.layers[id];\n      }\n    },\n    /**\n     *\n     * @param layer\n     * @param enable\n     */\n    enableLayer: function(layer, enable) {\n      var id, subLayer;\n\n      /**\n       * Recursively invoke for sub layers\n       * @param layer\n       * @private\n       */\n      function _handleSubLayers(layer) {\n        for (id in layer.subLayers) {\n          if (layer.subLayers.hasOwnProperty(id)) {\n            subLayer = layer.getSubLayer(id);\n            if (subLayer) {\n              this.enableLayer(subLayer, enable);\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove the layer if it is one of the appropriate types\n       * @param layer\n       * @private\n       */\n      function _removeLayer(layer) {\n        var layerTypes = [\n          EMPWorldWind.constants.layerType.ARCGIS_93_REST_LAYER,\n          EMPWorldWind.constants.layerType.BING_LAYER,\n          EMPWorldWind.constants.layerType.IMAGE_LAYER,\n          EMPWorldWind.constants.layerType.OSM_LAYER,\n          EMPWorldWind.constants.layerType.TMS_LAYER,\n          EMPWorldWind.constants.layerType.WMS_LAYER,\n          EMPWorldWind.constants.layerType.WMTS_LAYER\n        ];\n\n        if (layerTypes.indexOf(layer.globalType) !== -1) {\n          this.worldWindow.removeLayer(layer);\n        }\n      }\n\n      // Check if it exists\n      if (this.layerExists(layer)) {\n        // Update whether it's enabled or not\n        layer.enabled = enable;\n\n        // Handle any children\n        _handleSubLayers(layer);\n\n        // Remove if necessary\n        if (!enable) {\n          _removeLayer.call(this, layer);\n        }\n      }\n    },\n    /**\n     *\n     * @param layer\n     * @returns {boolean}\n     */\n    layerExists: function(layer) {\n      return this.layers.hasOwnProperty(layer.id);\n    },\n    /**\n     * Adds a WMS layer to the map\n     * @param {emp.typeLibrary.WMS} wms\n     */\n    addWMS: function(wms) {\n      var wmsLayer;\n\n      // Remove existing WMS if it already exists, we shall re-add it\n      wmsLayer = this.getLayer(wms.coreId);\n      if (wmsLayer) {\n        this.removeWMS(wmsLayer);\n      }\n\n      // Create the new layer\n      wmsLayer = new EMPWorldWind.data.EmpWMSLayer(wms);\n\n      this.layers[wmsLayer.id] = wmsLayer;\n      this.worldWindow.addLayer(wmsLayer.layer);\n      this.worldWindow.redraw();\n    },\n    /**\n     * Removes a WMS layer from the map\n     * @param {emp.typeLibrary.WMS|EMPWorldWind.data.EmpWMSLayer} wms\n     */\n    removeWMS: function(wms) {\n      var layer,\n        id = wms.coreId || wms.id;\n\n      layer = this.getLayer(id);\n      if (layer) {\n        this.worldWindow.removeLayer(layer.layer);\n        delete this.layers[layer.id];\n        this.worldWindow.redraw();\n      }\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.KmlLayer} kml\n     * @param {function} cb\n     */\n    addKML: function(kml, cb) {\n      var kmlFilePromise,\n        kmlLayer = new EMPWorldWind.data.EmpKMLLayer(kml);\n\n      // // Build the KML file promise\n      kmlFilePromise = new WorldWind.KmlFile(kmlLayer.url);\n      kmlFilePromise\n        .then(function(kmlFile) {\n          // Construct the KML layer to hold the document\n          var kmlRenderableLayer = new WorldWind.RenderableLayer(kmlLayer.id);\n          kmlLayer.layer = kmlRenderableLayer;\n\n          // Add the KML layer to the map\n          kmlRenderableLayer.addRenderable(kmlFile);\n          this.worldWindow.addLayer(kmlRenderableLayer);\n\n          // Update the map\n          this.worldWindow.redraw();\n\n          // Record the layer so we can remove/modify it later\n          this.layers[kmlLayer.id] = kmlLayer;\n          if (typeof cb === \"function\") {\n            return cb({\n              success: true\n            });\n          }\n        }.bind(this))\n        .catch(function() {\n          return cb({\n            success: false,\n            message: 'Failed to add KML Layer'\n          });\n        });\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.KmlLayer} kml\n     * @param {function} [cb]\n     */\n    removeKML: function(kml, cb) {\n      if (kml.coreId in this.layers) {\n        this.worldWindow.removeLayer(this.layers[kml.coreId].layer);\n        delete this.layers[kml.coreId];\n        this.worldWindow.redraw();\n      }\n\n      if (typeof cb === \"function\") {\n        return cb({\n          success: true\n        });\n      }\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isFeatureSelected: function(id) {\n      return Boolean(this.empSelections.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getFeatureSelection: function(id) {\n      if (this.isFeatureSelected(id)) {\n        return this.empSelections[id];\n      }\n\n      return null;\n    },\n    /**\n     * @param {emp.typeLibrary.WMTS} empWMTS\n     * @param {EMPWorldWind.map~WMTSCallback} callback\n     */\n    addWmtsToMap: function(empWMTS, callback) {\n      var rc = {\n        success: false,\n        message: ''\n      };\n\n      var xhr, url,\n        async = true;\n\n      var _createWMTSLayer = function(xmlDom) {\n        var wmtsCapabilities, wmtsLayerCapabilities, wmtsConfig;\n\n        wmtsCapabilities = new WorldWind.WmtsCapabilities(xmlDom);\n        wmtsLayerCapabilities = wmtsCapabilities.getLayer(empWMTS.layer);\n        wmtsConfig = WorldWind.WmtsLayer.formLayerConfiguration(wmtsLayerCapabilities);\n\n        return new WorldWind.WmtsLayer(wmtsConfig);\n      };\n\n\n      // Handle getting capabilities\n      var xhrSuccess = function() {\n        var wmtsLayer;\n\n        if (xhr.status === 200) {\n          try {\n            wmtsLayer = _createWMTSLayer(xhr.responseXML);\n\n            this.worldWindow.addLayer(wmtsLayer);\n            this.services[empWMTS.coreId] = wmtsLayer;\n\n            this.worldWindow.redraw();\n\n            rc.success = true;\n          } catch (err) {\n            rc.message = err.message;\n          }\n\n          if (typeof callback === \"function\") {\n            return callback(rc);\n          }\n        }\n      }.bind(this);\n\n      // Handle getting error\n      var xhrError = function() {\n        callback({\n          success: false,\n          message: xhr.statusText\n        });\n      };\n\n      try {\n        url = empWMTS.url + \"?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=1.0.0\";\n\n        // Configure the request\n        xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url, async);\n        xhr.callback = callback;\n        xhr.onload = xhrSuccess;\n        xhr.onerror = xhrError;\n\n        // Make the request\n        xhr.send();\n\n        rc.success = true;\n      } catch (err) {\n        rc.message = err.message;\n      }\n\n      return rc;\n    },\n\n    /**\n     * @param {emp.typeLibrary.WMTS} empWMTS\n     */\n    removeWmtsFromMap: function(empWMTS) {\n      var rc = {\n        success: false,\n        message: ''\n      };\n\n      if (empWMTS.coreId in this.services) {\n        this.worldWindow.removeLayer(this.services[empWMTS.coreId]);\n\n        rc.success = true;\n        this.worldWindow.redraw();\n      } else {\n        rc.message = 'No such service exists on the map';\n      }\n\n      return rc;\n    },\n\n    /**\n     *\n     * @param id\n     */\n    storeFeatureSelection: function(id) {\n      this.empSelections[id] = id;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeFeatureSelection: function(id) {\n      if (this.empSelections.hasOwnProperty(id)) {\n        delete this.empSelections[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*|null}\n     */\n    getSelections: function() {\n      return this.empSelections;\n    },\n\n\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isFeaturePresent: function(id) {\n      return Boolean(this.features.hasOwnProperty(id));\n    },\n\n\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isMultiPointPresent: function(id) {\n      return Boolean(this.multiPointCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getMultiPoint: function(id) {\n      if (this.isMultiPointPresent(id)) {\n        return this.multiPointCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param multiPoint\n     */\n    storeMultiPoint: function(multiPoint) {\n      this.multiPointCollection[multiPoint.id] = multiPoint;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeMultiPoint: function(id) {\n      if (this.multiPointCollection.hasOwnProperty(id)) {\n        delete this.multiPointCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isAirspacePresent: function(id) {\n      return Boolean(this.airspaceCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getAirspace: function(id) {\n      if (this.isAirspacePresent(id)) {\n        return this.airspaceCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param airspace\n     */\n    storeAirspace: function(airspace) {\n      this.airspaceCollection[airspace.id || airspace.coreId] = airspace;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeAirspace: function(id) {\n      if (this.airspaceCollection.hasOwnProperty(id)) {\n        delete this.airspaceCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*|null}\n     */\n    getSinglePoints: function() {\n      return this.singlePointCollection;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isSinglePointPresent: function(id) {\n      return Boolean(this.singlePointCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getSinglePoint: function(id) {\n      if (this.isSinglePointPresent(id)) {\n        return this.singlePointCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param singlePoint\n     */\n    storeSinglePoint: function(singlePoint) {\n      this.singlePointCollection[singlePoint.id] = singlePoint;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeSinglePoint: function(id) {\n      if (this.isSinglePointPresent(id)) {\n        delete this.singlePointCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {number}\n     */\n    getSinglePointCount: function() {\n      if (this.defined(this.singlePointCollection)) {\n        return Object.keys(this.singlePointCollection).length;\n      } else {\n        return 0;\n      }\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isSinglePointIdOnHoldPresent: function(id) {\n      return Boolean(this.singlePointCollectionIdOnHold.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getSinglePointIdOnHold: function(id) {\n      if (this.isSinglePointIdOnHoldPresent(id)) {\n        return this.singlePointCollectionOnHold[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param singlePointId\n     */\n    storeSinglePointIdOnHold: function(singlePointId) {\n      this.singlePointCollectionIdOnHold[singlePointId] = singlePointId;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeSinglePointIdOnHold: function(id) {\n      if (this.isSinglePointIdOnHoldPresent(id)) {\n        delete this.singlePointCollectionIdOnHold[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*}\n     */\n    getSinglePointsIdOnHold: function() {\n      return this.singlePointCollectionIdOnHold;\n    },\n    /**\n     *\n     * @returns {*}\n     */\n    getSinglePointsIdOnHoldCount: function() {\n      if (this.defined(this.singlePointCollectionIdOnHold)) {\n        return Object.keys(this.singlePointCollectionIdOnHold).length;\n      } else {\n        return 0;\n      }\n    },\n    /**\n     *\n     * @param {Array} styles\n     */\n    setLabelStyle: function(styles) {\n      var style, featureId, feature;\n      for (style in this.state.labelStyles) {\n        if (this.state.labelStyles.hasOwnProperty(style)) {\n          this.state.labelStyles[style] = styles.includes(style);\n        }\n      }\n\n      // TODO refresh only visible points and mark the rest as update when requested\n      for (featureId in this.features) {\n        if (this.features.hasOwnProperty(featureId)) {\n          feature = this.features[featureId];\n          EMPWorldWind.editors.EditorController.updateFeatureLabelStyle.call(this, feature);\n        }\n      }\n      this.worldWindow.redraw();\n    },\n    /**\n     * Expose a refresh\n     */\n    refresh: function() {\n      EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n      //var featureId, feature;\n\n      // for (featureId in this.features) {\n      //   if (this.features.hasOwnProperty(featureId)) {\n      //     feature = this.features[featureId];\n      //\n      //     // TODO check if it is visible first\n      //     //EMPWorldWind.editors.EditorController.updateRender.call(this, feature);\n      //   }\n      // }\n\n      // TODO trigger redraw if necessary only\n      this.worldWindow.redraw();\n    },\n    /**\n     * Adjust the background contrast\n     * @param {number} contrast Value from 0-100, 50 is default\n     */\n    setContrast: function(contrast) {\n      if (contrast > 100) {\n        contrast = 100;\n      } else if (contrast < 0) {\n        contrast = 0;\n      }\n\n      if (contrast >= 50) {\n        this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, (contrast - 50) / 50);\n        this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0);\n      } else {\n        this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0);\n        this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, (50 - contrast) / 50);\n      }\n\n      this.worldWindow.redraw();\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Lock} lockState\n     */\n    setLockState: function(lockState) {\n      if (lockState.lock === this.state.lockState) {\n        // The same already, do nothing\n        return;\n      } else if (lockState.lock !== emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        // We have changed lock states, make sure to stop auto-panning\n        this.spinGlobe(false);\n      }\n      // Update the lock state\n      this.state.lockState = lockState.lock;\n    },\n    /**\n     * Spins the globe if autoPanning is enabled\n     * @param {AutoPanParams|boolean} [pan]\n     */\n    spinGlobe: function(pan) {\n      var step = this.worldWindow.navigator.range / (WorldWind.EARTH_RADIUS);\n\n      /**\n       *\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      var _getVerticalPan = function() {\n        if (this.state.autoPanning.up) {\n          return step;\n        } else if (this.state.autoPanning.down) {\n          return -step;\n        } else {\n          return 0;\n        }\n      }.bind(this);\n\n      /**\n       *\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      var _getHorizontalPan = function() {\n        if (this.state.autoPanning.left) {\n          return -step;\n        } else if (this.state.autoPanning.right) {\n          return step;\n        } else {\n          return 0;\n        }\n      }.bind(this);\n\n      /**\n       *\n       * @param {AutoPanParams} pan\n       * @private\n       */\n      var _cleanPanArgs = function(pan) {\n        if (pan && pan.hasOwnProperty('state')) {\n          delete pan['state'];\n        }\n        return pan;\n      };\n\n      /**\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      var _allowPan = function() {\n        return this.state.autoPanning.up ||\n          this.state.autoPanning.left ||\n          this.state.autoPanning.down ||\n          this.state.autoPanning.right;\n      }.bind(this);\n\n      /**\n       *\n       * @private\n       */\n      var _notifyEMPPointer = function() {\n        var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent);\n        coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n        if (coords.lat !== undefined) {\n          this.empMapInstance.eventing.Pointer(coords);\n        }\n      }.bind(this);\n\n      /**\n       *\n       * @private\n       */\n      var _panMap = function() {\n        var vertical, horizontal, goToPosition,\n          travelTime = 250; // 250 ms\n\n        // Get the pan directions\n        vertical = _getVerticalPan();\n        horizontal = _getHorizontalPan();\n\n        // Get the location to pan to\n        goToPosition = new WorldWind.Position(\n          this.worldWindow.navigator.lookAtLocation.latitude + vertical,\n          this.worldWindow.navigator.lookAtLocation.longitude + horizontal,\n          this.worldWindow.navigator.range);\n\n        // Set the travel time\n        this.goToAnimator.travelTime = travelTime;\n\n        // Update the state\n        this.state.autoPanning.state = EMPWorldWind.constants.PAN_STATE.PANNING;\n\n        // Notify EMP we are moving the camera\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n        // Fire the animation\n        this.goToAnimator.goTo(goToPosition, function() {\n          // Update EMP pointer location for moving control points\n          _notifyEMPPointer();\n\n          // Update the state to compete\n          this.state.autoPanning.state = EMPWorldWind.constants.PAN_STATE.COMPLETE;\n\n          // Check if we still need to pan\n          if (_allowPan()) {\n            _panMap();\n          } else {\n            // Our exit route, update the state\n            this.state.autoPanning.state = EMPWorldWind.constants.PAN_STATE.HALTED;\n            // Notify EMP we have stopped moving\n            EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n          }\n        }.bind(this));\n      }.bind(this);\n\n      // Explicitly halting the animation and restoring the pan state to no motion\n      if (pan === false) {\n        this.goToAnimator.cancel();\n        this.state.autoPanning = Object.assign({}, EMPWorldWind.constants.NO_PANNING);\n        return;\n      }\n\n      // Make sure we don't overwrite the state internals\n      pan = _cleanPanArgs(pan);\n\n      // Update the panning state directions\n      this.state.autoPanning = Object.assign({}, this.state.autoPanning, pan);\n\n      // If we are still running a previous auto-pan animation return, the pan callback will use the updated state when it completes\n      if (this.state.autoPanning.state === EMPWorldWind.constants.PAN_STATE.PANNING ||\n        this.state.lockState !== emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        return;\n      }\n\n      // Start the pan if the state is set to\n      if (_allowPan()) {\n        _panMap();\n      }\n    },\n    /**\n     * Returns a data URI of the current view of the canvas\n     * @todo Handle iconURL within Placemarks\n     * @returns {string}\n     */\n    screenshot: function() {\n      // This forces webgl to render which exposes current context for the canvas.toDataURL function\n      // Note: this is still lacking functionality as Placemarks are not rendered\n      this.worldWindow.drawFrame();\n      return this.worldWindow.canvas.toDataURL();\n    },\n    /**\n     * Calculate the current bounds of the WorldWindow\n     * @returns {Bounds}\n     */\n    getBounds: function() {\n      var topRight, bottomLeft;\n\n      // Check the viewport corners\n      topRight = this.worldWindow.pickTerrain(new WorldWind.Vec2(this.worldWindow.viewport.width - 1, 1)).terrainObject();\n      bottomLeft = this.worldWindow.pickTerrain(new WorldWind.Vec2(1, this.worldWindow.viewport.height - 1)).terrainObject();\n\n      // If the corners don't contain the globe assume we are zoomed very far out, estimate an arbitrary rectangle\n      if (!topRight) {\n        topRight = {\n          position: WorldWind.Location.linearLocation(\n            this.worldWindow.navigator.lookAtLocation,\n            this.worldWindow.navigator.heading + 45,\n            Math.PI / 3,\n            new WorldWind.Location())\n        };\n      }\n\n      if (!bottomLeft) {\n        bottomLeft = {\n          position: WorldWind.Location.linearLocation(\n            this.worldWindow.navigator.lookAtLocation,\n            this.worldWindow.navigator.heading + 45, -Math.PI / 3,\n            new WorldWind.Location())\n        };\n      }\n\n      return {\n        north: topRight.position.latitude,\n        south: bottomLeft.position.latitude,\n        east: topRight.position.longitude,\n        west: bottomLeft.position.longitude\n      };\n    },\n    /**\n     * Returns the center of focus of the map\n     * @returns {{latitude: number, longitude:number}}\n     */\n    getCenter: function() {\n      return this.worldWindow.navigator.lookAtLocation;\n    },\n    /**\n     * Deletes and removes all features and layers on the map\n     */\n    shutdown: function() {\n      this.features = {};\n      this.layers = {};\n      this.worldWindow = undefined;\n    },\n    /**\n     * checks is map is moving outside an epsilon. This function is used\n     * to reduce the calls to update the features of the map.\n     */\n    isMapMoving: function() {\n      return (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.latitude, this.lastNavigator.lookAtLocation.latitude, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.longitude, this.lastNavigator.lookAtLocation.longitude, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON1)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.tilt, this.lastNavigator.tilt, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.roll, this.lastNavigator.roll, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.heading, this.lastNavigator.heading, this.optimizationMapMoveEpsilon));\n    },\n    /**\n     *\n     * @returns {PickedObjectList|*}\n     */\n    pickShapesInViewRegion: function() {\n      var shapes;\n      //var bound = this.getBounds();\n      //var boundRectangle = new this.worldwind.Rectangle(new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude), this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n      // this.worldWindow.viewport\n      var canvasCoordinates = this.worldWindow.canvasCoordinates(0, 0);\n      //var screenLocation = new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude);\n      var boundRectangle = new WorldWind.Rectangle(canvasCoordinates[0], canvasCoordinates[1], 5000, 4000);\n      //var boundRectangle  = new WorldWind.Rectangle(0, 0 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n      //var boundRectangle  = new WorldWind.Rectangle(this.worldWindow.canvas.width/2, this.worldWindow.canvas.height/2 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n\n      shapes = this.worldWindow.pickShapesInRegion(boundRectangle);\n      return shapes;\n    },\n    /**\n     * checks if feature is within view area of map.\n     * @param {emp.typeLibrary.Feature} empFeature object representing a feature (not a ww feature).\n     */\n    isMilStdMultiPointShapeInViewRegion: function(empFeature) {\n      var p,\n        coordinate,\n        coords = empFeature.coordinates.length;\n\n      // Highlight the items picked.\n      if (!this.bounds) {\n        this.bounds = this.getBounds();\n      }\n\n      /**\n       *\n       * @param coordinate\n       * @param bounds\n       * @returns {boolean}\n       * @private\n       */\n      var _boundsContainsPoint = function(coordinate, bounds) {\n        return (coordinate[0] <= bounds.east && coordinate[0] >= bounds.west) &&\n          (coordinate[1] > bounds.south && coordinate[1] < bounds.north);\n      };\n\n\n      // TODO wait for fix for pickShapesInRegion to use this method\n      // var _boundsContainLine = function(feature) {\n      //   var pickList,\n      //     clientRect = this.worldWindow.canvas.getBoundingClientRect(),\n      //     canvasCoords = this.worldWindow.canvasCoordinates(clientRect.left, clientRect.top),\n      //     region = new WorldWind.Rectangle(\n      //       canvasCoords[0],\n      //       canvasCoords[1],\n      //       clientRect.width,\n      //       clientRect.height);\n      //\n      //   pickList = this.worldWindow.pickShapesInRegion(region);\n      //\n      //   //window.console.debug(pickList, feature);\n      //\n      //   return false;\n      // }.bind(this);\n      //\n      // if (_boundsContainLine(empFeature)) {\n      //   return true;\n      // }\n\n      for (p = 0; p < coords; p++) {\n        coordinate = empFeature.coordinates[p];\n        if (_boundsContainsPoint(coordinate, this.bounds)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    /**\n     *\n     * @param {string} color\n     */\n    setSelectionColor: function(color) {\n      function _validateColor(color) {\n        return color || this.state.selectionStyle.lineColor;\n      }\n\n      function _prefixColorString(color) {\n        if (!color.startsWith(\"#\")) {\n          return \"#\" + color;\n        }\n        return color;\n      }\n\n      color = _validateColor(color);\n      color = _prefixColorString(color);\n\n      this.state.selectionStyle.lineColor = color;\n\n      // Update all features\n      _redrawAllFeatures.call(this);\n    },\n    /**\n     *\n     * @param {number} scale\n     */\n    setSelectionScale: function(scale) {\n      this.state.selectionStyle.scale = scale;\n\n      // Update all features\n      _redrawAllFeatures.call(this);\n    },\n    /**\n     *\n     * @param {string|number} size\n     */\n    setIconSize: function(size) {\n      if (typeof size === \"string\") {\n        if (size in EMPWorldWind.constants.IconSize) {\n          size = EMPWorldWind.constants.IconSize[size];\n        } else {\n          size = 1.0;\n        }\n      } else if (typeof size !== \"number\") {\n        size = 1.0;\n      }\n\n      this.state.iconSize = size;\n\n      _redrawAllFeatures.call(this);\n    }\n  };\n}();\n","var EMPWorldWind = EMPWorldWind || {};\n/**\n * Namespace for EMPWorldWind feature classes\n * @namespace\n */\nEMPWorldWind.data = {};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.Overlay} overlay\n */\nEMPWorldWind.data.EmpLayer = function(overlay) {\n  /** @type {Object.<string, EMPWorldWind.Data.EmpLayer>} */\n  this.subLayers = {};\n\n  /** @type {Object.<string, EMPWorldWind.Data.EmpFeature>} */\n  this.featureKeys = {};\n\n  /** @member {string} */\n  this.name = overlay.name || undefined;\n\n  /** @member {string} */\n  this.description = overlay.description;\n\n  /** @member {string} */\n  this.id = overlay.overlayId;\n\n  /** @member {string} */\n  this.parentId = overlay.parentId;\n\n  /** @member {string} */\n  this.globalType = overlay.globalType || \"vector\"; // vector, wms\n\n  var _overlay = overlay;\n  /**\n   * @name EMPWorldWind.data.EmpLayer#overlay\n   * @type {emp.typeLibrary.Overlay}\n   */\n  Object.defineProperty(this, 'overlay', {\n    enumerable: true,\n    value: _overlay\n  });\n\n  // TODO handle WMS, WMTS, KML...\n  var _layer = new WorldWind.RenderableLayer(this.id);\n  /**\n   * @name EMPWorldWind.data.EmpLayer#layer\n   * @type {WorldWind.RenderableLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _layer\n  });\n\n  /** @member {boolean} */\n  this.enabled = true; // true by default\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature} feature\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    emp.util.each(feature.shapes, function(shape) {\n      this.layer.addRenderable(shape);\n    }.bind(this));\n\n    this.featureKeys[feature.id] = {\n      \"id\": feature.id,\n      \"type\": EMPWorldWind.constants.FeatureType.RENDERABLE,\n      \"feature\": feature\n    };\n\n    feature.overlayId = this.id;\n  } else {\n    // feature already present in map. First remove existing one and then add as new one. The updateFeature\n    // does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes.\n    this.updateFeature(feature);\n  }\n};\n\n/**\n * Expose a refresh for the actual WorldWind layer\n */\nEMPWorldWind.data.EmpLayer.prototype.refresh = function() {\n  this.layer.refresh();\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature[]} features\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatures = function(features) {\n  emp.util.each(features, function(feature) {\n    this.addFeature(feature);\n  }.bind(this));\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (!this.isFeaturePresent(childEntity)) {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        this.addFeature(childEntity);\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (this.isFeaturePresent(childEntity)) // must be present in layer\n      {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeatureChildPresent = function(parentEntity, childEntity) {\n  if (parentEntity && childEntity) {\n    if (parentEntity.childrenFeatureKeys) {\n      return (childEntity.id in parentEntity.childrenFeatureKeys);\n    } else {\n      return false;\n    }\n  }\n};\n\n/**\n *\n * @param subLayer\n */\nEMPWorldWind.data.EmpLayer.prototype.addSubLayer = function(subLayer) {\n  if (!this.isSubLayerPresent(subLayer.id)) {\n    subLayer.parentId = this.id;\n    this.subLayers[subLayer.id] = subLayer;\n  }\n};\n\n/**\n *\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isLayerEmpty = function() {\n  return (this.featuresLength() + this.subOverlaysLength() <= 0);\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeature = function(id) {\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    return empFeature.feature;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isPrimitive = function(id) {\n  var isPrimitive = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE || empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      isPrimitive = true;\n    }\n  }\n\n  return isPrimitive;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isDataSource = function(id) {\n  var isDataSource = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      isDataSource = true;\n    }\n  }\n\n  return isDataSource;\n};\n\n/**\n *\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatures = function() {\n  var features = [], id;\n  for (id in this.featureKeys) {\n    if (id && this.featureKeys.hasOwnProperty(id)) {\n      features.push(this.getFeature(id));\n    }\n  }\n\n  return features;\n};\n\n/**\n *\n * @param id\n * @returns {undefined}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayer = function(id) {\n  var subLayer = undefined;\n  if (this.isSubLayerPresent(id)) {\n    subLayer = this.subLayers[id];\n  }\n\n  return subLayer;\n};\n\n/**\n *\n * @param id\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayers = function(id) {\n  var layers = [];\n  for (id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      layers.push(this.getSubLayer(id));\n    }\n  }\n\n  return layers;\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatures = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      this.removeFeature(entity);\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureSelections = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      //TODO this.empWorldWind.removeFeatureSelection(id);\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeatures = function(visibility) {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      if (entity) {\n        this.showFeature(entity.id, visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n * @param id\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeature = function(id, visibility) {\n  var oMultiPoint,\n    childrenFeatureId,\n    childrenEntity,\n    feature = this.getFeature(id);\n  if (!feature) {\n    return;\n  }\n  if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n    feature.show = visibility;\n    if (feature.billboard !== undefined) {\n      if (feature.reRenderBillboardRequired && visibility) {\n        // when the overlay or parent if hidden the billboard is added to the entity collection with show = false but the loadImage is never called\n        // in the Cesium sdk. Here I'm removing and then re adding the entity when the show visibility is set to true for the for the first  time.\n        // This fixes the issue for kml and geojson points.\n        feature.reRenderBillboardRequired = undefined;\n        feature.show = visibility;\n        feature.billboard.show = visibility;\n        this.updateFeature(feature); // the update removes and then adds the feature to the entity or primitive collection. The children are not remove and re-added.\n      }\n      feature.billboard.show = visibility;\n    }\n    if (feature.path !== undefined) {\n      feature.path.show = visibility;\n    }\n    if (feature.polyline !== undefined) {\n      feature.polyline.show = visibility;\n    }\n    if (feature.polygon !== undefined) {\n      feature.polygon.show = visibility;\n    }\n    if (feature.label !== undefined) {\n      feature.label.show = visibility;\n    }\n    if (feature.rectangle !== undefined) {\n      feature.show = visibility;\n      if (this.empCesium.isMultiPointPresent(id)) {\n        oMultiPoint = this.empCesium.getMultiPoint(id);\n        if (oMultiPoint) {\n          oMultiPoint.visible = visibility;\n        }\n      }\n    }\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  }\n  else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n    feature.show = visibility;\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n    feature.show = visibility;\n    //primitive could represent a 3D multipoint that uses labels (entity.rectangle... with canvas)\n    var airspaceLabelPresent = this.empCesium.isMultiPointPresent(id + \"_label\");\n    if (airspaceLabelPresent) {\n      var airspaceLabel = this.getFeature(id + \"_label\");\n      if (airspaceLabel) {\n        airspaceLabel.show = visibility;    //new this.empCesium.ConstantProperty(visibility);\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n    if (feature.length > 0) {\n      feature.get(0).show = visibility;\n    }\n    if (this.empCesium.isAirspacePresent(id)) {\n      var oAirspace = this.empCesium.getAirspace(id);\n      if (oAirspace) {\n        oAirspace.visible = visibility;\n      }\n    } else if (this.empCesium.isSinglePointPresent(id)) {\n      var oSinglePoint = this.empCesium.getSinglePoint(id);\n      if (oSinglePoint) {\n        oSinglePoint.visible = visibility;\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayers = function() {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.removeFeatures();\n        subLayer.removeSubLayers();\n        delete this.subLayers[id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showSubLayers = function(visibility) {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.visibility = visibility;\n        subLayer.showFeatures(visibility);\n        subLayer.showSubLayers(visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.clearLayer = function() {\n  switch (this.globalType) {\n    case EMPWorldWind.constants.LayerType.ARCGIS_93_REST_LAYER:\n    case EMPWorldWind.constants.LayerType.BING_LAYER:\n    case EMPWorldWind.constants.LayerType.IMAGE_LAYER:\n    case EMPWorldWind.constants.LayerType.OSM_LAYER:\n    case EMPWorldWind.constants.LayerType.WMS_LAYER:\n    case EMPWorldWind.constants.LayerType.TMS_LAYER:\n    case EMPWorldWind.constants.LayerType.WMTS_LAYER:\n      this.enabled = false;\n      break;\n    default:\n    // do nothing\n  }\n  this.removeFeatureSelections();\n  this.removeFeatures();\n  this.removeSubLayers();\n};\n\n/**\n *\n * @param isVisible\n */\nEMPWorldWind.data.EmpLayer.prototype.showLayer = function(isVisible) {\n  this.showFeatures(isVisible);\n  this.showSubLayers(isVisible);\n};\n\n/**\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeature = function(feature) {\n  if (this.isFeaturePresent(feature)) {\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (var id in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    if (EMPWorldWind.utils.defined(feature.parentFeature)) {\n      this.deallocateFeatureChild(feature.parentFeature, feature);\n    }\n\n    emp.util.each(feature.shapes, function(shape){\n      if (shape instanceof WorldWind.RenderableLayer) {\n        // Handle KML features\n        this.worldwind.removeLayer(shape);\n      } else {\n        // Handle normal primitives\n        this.layer.removeRenderable(shape);\n      }\n    }.bind(this));\n\n    delete this.featureKeys[feature.id];\n\n  }\n};\n\n/**\n * feature already present in map. First remove existing one and then add as new one. The updateFeature\n * does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes. The addFeature from the emp engine api\n * takes care of the case of an update. The updateFeature is used for internal removal and then re-adding the feature to map with same id. The\n * presence of the feature in the layers , and any child entities ( ojo - would a replace erase any children feature association to updated feature?) under the updated feature is mantained (v2)..\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.updateFeature = function(feature) {\n  var renderable;\n  //feature already present in map. First remove existing one and then add as new one\n  if (feature.id && feature.id !== null) {\n    renderable = this.getFeature(feature.id); // entity is the current geometry rendered on map\n    // keep children association to parent when updating\n    feature.childrenFeatureKeys = renderable.childrenFeatureKeys;\n    feature.parentFeature = renderable.parentFeature;\n    this.layer.removeRenderable(renderable);\n    this.layer.addRenderable(feature);\n    this.featureKeys[feature.id].feature = feature;\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n * remove feature recursively from layer but keep feature in the Cesium entityCollection\n * this function is used for the moving of features.\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.deallocateFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    entity.overlayId = undefined;\n    delete this.featureKeys[entity.id];\n  }\n};\n\n/**\n * Add feature recursively to layer. the feature must  already be part of the Cesium entityCollection\n * this function is used for the moving of features.\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.DATA_SOURCE\n      };\n    }\n    var featureChildrenLength = this.featureChildrenLength(feature);\n    if (featureChildrenLength > 0) {\n      var childrenFeatures = this.getFeatureChildrenEntityArray(feature);\n      for (var index = 0; index < featureChildrenLength; index++) {\n        var childrenFeature = childrenFeatures[index];\n        this.allocateFeature(childrenFeature);\n      }\n    }\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n *\n * @param entity\n */\nEMPWorldWind.data.EmpLayer.prototype.clearFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n      entity.childrenFeatureKeys = undefined;\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        //this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n        childEntity.parentFeature = undefined;\n        childEntity.overlayId = undefined;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatureChildrenEntityArray = function(entity) {\n  var featureChildrenEntityArray = [];\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            featureChildrenEntityArray.push(childrenEntity);\n          }\n        }\n      }\n    }\n  }\n\n  return featureChildrenEntityArray;\n\n};\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureById = function(id) {\n  var feature;\n  if (this.isFeaturePresentById(id)) {\n    feature = this.getFeature(id);\n    this.removeFeature(feature);\n  }\n};\n\n/**\n *\n * @param subOverlay\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayer = function(subOverlay) {\n  if (this.isSubLayerPresent(subOverlay.id)) {\n    this.subLayer.removeFeatures();\n    this.subLayer.removeSubLayers();\n    delete this.SubLayers[this.subLayer.id];\n  }\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayerById = function(id) {\n  if (this.isSubLayerPresent(id)) {\n    var subLayer = this.getLayer(id);\n    this.removeSubLayer(subLayer);\n  }\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.featuresLength = function() {\n  return Object.keys(this.featureKeys).length;\n};\n\n/**\n *\n * @param entity\n * @returns {number}\n */\nEMPWorldWind.data.EmpLayer.prototype.featureChildrenLength = function(entity) {\n  var length = 0;\n  if (entity.childrenFeatureKeys) {\n    length = Object.keys(entity.childrenFeatureKeys).length;\n  }\n\n  return length;\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.subLayersLength = function() {\n  return Object.keys(this.subLayers).length;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresentById = function(id) {\n  if (id)\n    return (id in this.featureKeys);\n};\n\n/**\n *\n * @param entity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresent = function(entity) {\n  if (entity && entity.id) {\n    return (entity.id in this.featureKeys);\n  } else {\n    return false;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isSubLayerPresent = function(id) {\n  if (id) {\n    return (id in this.subLayers);\n  }\n\n  return false;\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.data.EmpWMSLayer = function(wms) {\n  var layerNames, config, url;\n\n  this.id = wms.coreId;\n\n  var _wms = wms;\n\n  /**\n   * @name EMPWorldWind.data.EmpWMSLayer#wms\n   * @type {emp.typeLibrary.WMS}\n   */\n  Object.defineProperty(this, 'wms', {\n    enumerable: true,\n    value: _wms\n  });\n\n  layerNames = wms.activeLayers.join();\n\n  // Set the URL to the service\n  if (wms.useProxy) {\n    url = emp3.api.global.configuration.urlProxy + \"?url=\" + wms.url;\n  } else {\n    url = wms.url;\n  }\n\n  config = {\n    service: url,\n    layerNames: layerNames,\n    sector: WorldWind.Sector.FULL_SPHERE,\n    levelZeroDelta: new WorldWind.Location(36, 36),\n    numLevels: 15,\n    format: \"image/png\",\n    size: 256\n  };\n\n  // Purposely null for now\n  var timeString = '';\n  var _wmsLayer = new WorldWind.WmsLayer(config, timeString);\n  /**\n   * @name EMPWorldWind.data.EmpWMS#layer\n   * @type {WorldWind.WmsLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _wmsLayer\n  });\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.KmlLayer} kml\n */\nEMPWorldWind.data.EmpKMLLayer = function(kml) {\n  this.id = kml.coreId;\n\n  /** @type {emp.typeLibrary.KmlLayer} */\n  this.kml = kml;\n\n  /**\n   * @param {emp.typeLibrary.KmlLayer} kml\n   * @private\n   */\n  function _buildURL(kml) {\n    // Set the URL to the service\n    if (kml.useProxy) {\n      return emp3.api.global.configuration.urlProxy + \"?url=\" + kml.url;\n    }\n    return kml.url;\n  }\n\n  /** @type {string} */\n  this.url = _buildURL(kml);\n\n  /**\n   * @type {WorldWind.KmlFile}\n   */\n  this.layer = new WorldWind.RenderableLayer(this.id);\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc Container class for establishing mappings between empFeatures and the WorldWind representations.\n * A Feature may consist of any number of WorldWind Surface shapes. Any direct interaction with the WorldWind features\n * will occur in this class.\n *\n * @class\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.data.EmpFeature = function(feature) {\n  /**\n   * The storage of all the shapes composing the primary shape\n   * @type {WorldWind.SurfaceShape[]}\n   */\n  this.shapes = [];\n\n  /**\n   * The native EMP Feature\n   * @type {emp.typeLibrary.Feature}\n   */\n  this.feature = feature;\n\n  var _id = feature.coreId;\n  /**\n   * @readonly\n   * @name EMPWorldWind.data.EmpFeature#id\n   */\n  Object.defineProperty(this, 'id', {\n    enumerable: true,\n    value: _id\n  });\n\n  var _altitudeMode = WorldWind.CLAMP_TO_GROUND;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#altitudeMode\n   */\n  Object.defineProperty(this, 'altitudeMode', {\n    enumerable: true,\n    get: function() { return _altitudeMode; },\n    set: function(altMode) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].altitudeMode = altMode;\n      }\n      _altitudeMode = altMode;\n    }\n  });\n\n  var _selected = false;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#selected\n   */\n  Object.defineProperty(this, 'selected', {\n    enumerable: true,\n    get: function() { return _selected; },\n    set: function(value) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].highlighted = value;\n      }\n      _selected = value;\n    }\n  });\n};\n\n/**\n * Convenience function\n * @returns {Number}\n */\nEMPWorldWind.data.EmpFeature.prototype.shapesCount = function() {\n  return this.shapes.length;\n};\n\n/**\n *\n * @param {WorldWind.SurfaceShape|WorldWind.SurfaceShape[]|*} primitives\n */\nEMPWorldWind.data.EmpFeature.prototype.addShapes = function(primitives) {\n  if (!Array.isArray(primitives)) {\n    if (primitives instanceof WorldWind.RenderableLayer) { // TODO this doesn't smell right, may need to handle KML differently\n      primitives.renderables[0].userProperties.id = this.id;\n    } else {\n      primitives.userProperties.id = this.id;\n    }\n    this.shapes.push(primitives);\n\n  } else {\n    emp.util.each(primitives, function(primitive) {\n      primitive.userProperties.id = this.id;\n      this.shapes.push(primitive);\n    }.bind(this));\n  }\n};\n\n/**\n * Clears all primitives from the feature. It does not remove them from any layers they are rendered on so that must be\n * done first.\n */\nEMPWorldWind.data.EmpFeature.prototype.clearShapes = function() {\n  this.shapes = [];\n};\n\n/**\n *\n * @param {boolean} visible\n */\nEMPWorldWind.data.EmpFeature.prototype.setVisible = function(visible) {\n  emp.util.each(this.shapes, function(shape) {\n    shape.enabled = visible;\n  });\n};","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants = {\n  view: {\n    MAX_HEIGHT: 10000000\n  }\n};\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasMoving = false;\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasZooming = false;\n\n/** @type {number} */\nEMPWorldWind.constants.globeMoveTime = 2000;\n\n/** @type {number} */\nEMPWorldWind.constants.extentBufferFactor = .4; // use when flyto a feature so the camera is not too close to it.\n\n/** @type {boolean} */\nEMPWorldWind.constants.USE_DATA_SOURCE = false;\n\n/** @constant {number} */\nEMPWorldWind.constants.WHITE_CONTRAST = 0;\n\n/** @constant {number} */\nEMPWorldWind.constants.BLACK_CONTRAST = 1;\n\n/**\n * Copied from Cesium\n * @enum\n */\nEMPWorldWind.constants.IconSize = {\n  \"verySmall\": 0.5,\n  \"tiny\" : 0.5, // Duplicate of verySmall\n  \"small\": 0.75,\n  \"medium\": 1.0,\n  \"large\": 1.5,\n  \"extraLarge\": 1.75\n};\n\n/**\n * @constant\n * @enum\n */\nEMPWorldWind.constants.PAN_STATE = {\n  HALTED: 'halted',\n  PANNING: 'panning',\n  COMPLETE: 'complete'\n};\n\n/**\n * No panning state for autoPanning in smart motion\n * @constant {object}\n */\nEMPWorldWind.constants.NO_PANNING = {\n  state: String(EMPWorldWind.constants.PAN_STATE.HALTED),\n  step: 0,\n  up: false,\n  down: false,\n  right: false,\n  left: false\n};\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.METERS_PER_INCH = 0.0254;\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.SCALE_LINE_LENGTH = 50;\n\n/**\n * @readonly\n */\nEMPWorldWind.constants.propertyDefaults = {\n  FILL_COLOR_HEX: \"ffffff\",\n  LINE_COLOR_HEX: \"000000\",\n  LINE_WIDTH: 1\n};\n\n/**\n * @readonly\n * @type {{COLOR_HEX: string, WIDTH: number, SCALE: number}}\n */\nEMPWorldWind.constants.selectionProperties = {\n  COLOR_HEX: 'FFFF00',\n  WIDTH: 2,\n  SCALE: 0.5\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.FeatureType = {\n  ENTITY: \"entity\",\n  RENDERABLE: \"renderable\",\n  PRIMITIVE: \"primitive\",\n  GROUND_PRIMITIVE: \"ground_primitive\",\n  DATA_SOURCE: \"dataSource\",\n  COMPOUND_ENTITY: \"compoundEntity\",\n  PRIMITIVE_COLLECTION: \"primitiveCollection\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LayerType = {\n  OVERLAY_LAYER: \"overlay\",\n  WMS_LAYER: \"wms\",\n  IMAGE_LAYER: \"image\",\n  BING_LAYER: \"bing\",\n  ARCGIS_93_REST_LAYER: \"arcgis93rest\",\n  OSM_LAYER: \"osm\",\n  TMS_LAYER: \"tms\",\n  TERRAIN_LAYER: \"terrain\",\n  WMTS_LAYER: \"wmts\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.EntityType = {\n  BILLBOARD: \"billboard\",\n  BOX: \"box\",\n  CORRIDOR: \"corridor\",\n  CYLINDER: \"cylinder\",\n  DESCRIPTION: \"description\",\n  ELLIPSE: \"ellipse\",\n  ELLIPSOID: \"ellipsoid\",\n  LABEL: \"label\",\n  MODEL: \"model\",\n  ORIENTATION: \"orientation\",\n  PATH: \"path\",\n  POLYGON: \"polygon\",\n  POLYLINE: \"polyline\",\n  POLYLINE_VOLUME: \"polylineVolume\",\n  POSITION: \"position\",\n  RECTANGLE: \"rectangle\",\n  VIEW_FROM: \"viewFrom\",\n  WALL: \"wall\",\n  KML: \"kml\"\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.MultiPointRenderType = {\n  KML: 0,\n  /** @deprecated */\n  JSON: 1,\n  GEOJSON: 2,\n  DATA_URL: 4,\n  CANVAS: 3,\n  CANVAS_LABEL_ONLY: 5,\n  SVG: 6,\n  SVG_LABEL_ONLY: 7\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.SinglePointAltitudeRangeMode = {\n  LOW_RANGE: 0,\n  MID_RANGE: 1,\n  HIGHEST_RANGE: 2\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererWorker = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LabelStyle = {\n  REQUIRED_LABELS: 'required_labels',\n  COMMON_LABELS: 'common_labels',\n  ALL_LABELS: 'all_labels'\n};\n\n/**\n * Modifiers for All labels to be displayed\n * @enum {object}\n * @constant\n */\nEMPWorldWind.constants.AllLabels = {\n  \"V\": true,\n  \"L\": true,\n  \"S\": true,\n  \"AA\": true,\n  \"AB\": true,\n  \"AC\": true,\n  \"H\": true,\n  \"M\": true,\n  \"T\": true,\n  \"T1\": true,\n  \"CN\": true,\n  \"C\": true,\n  \"F\": true,\n  \"G\": true,\n  \"H1\": true,\n  \"H2\": true,\n  \"J\": true,\n  \"K\": true,\n  \"N\": true,\n  \"P\": true,\n  \"W\": true,\n  \"W1\": true,\n  \"X\": true,\n  \"Y\": true,\n  \"Z\": true\n};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants.RendererSettings = {};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.standard = {\n  'Symbology_2525Bch2_USAS_13_14': 0,\n  'Symbology_2525C': 1\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.modifierLookup = {\n  QUANTITY: \"quantity\",\n  REDUCED_OR_REINFORCED: \"reinforcedOrReduced\",\n  STAFF_COMMENTS: \"staffComments\",\n  ADDITIONAL_INFO_1: \"additionalInfo1\",\n  ADDITIONAL_INFO_2: \"additionalInfo2\",\n  ADDITIONAL_INFO_3: \"additionalInfo3\",\n  EVALUATION_RATING: \"evaluationRating\",\n  COMBAT_EFFECTIVENESS: \"combatEffectiveness\",\n  SIGNATURE_EQUIPMENT: \"signatureEquipment\",\n  HIGHER_FORMATION: \"higherFormation\",\n  HOSTILE: \"hostile\",\n  IFF_SIF: \"iffSiff\",\n  DIRECTION_OF_MOVEMENT: \"directionOfMovement\",\n  OFFSET_INDICATOR: \"offsetIndicator\",\n  UNIQUE_DESIGNATOR_1: \"uniqueDesignation1\",\n  UNIQUE_DESIGNATOR_2: \"uniqueDesignation2\",\n  EQUIPMENT_TYPE: \"equipmentType\",\n  DATE_TIME_GROUP: \"dateTimeGroup1\",\n  DATE_TIME_GROUP_2: \"dateTimeGroup2\",\n  ALTITUDE_DEPTH: \"altitudeDepth\",\n  LOCATION: \"location\",\n  SPEED: \"speed\",\n  SPECIAL_C2_HEADQUARTERS: \"specialC2Headquarters\",\n  DISTANCE: \"distance\",\n  AZIMUTH: \"azimuth\",\n  FILL_COLOR: \"fillColor\",\n  LINE_COLOR: \"lineColor\",\n  TEXT_COLOR: \"textColor\",\n  X_OFFSET: \"xOffset\",\n  X_UNITS: \"xUnits\",\n  Y_OFFSET: \"yOffset\",\n  Y_UNITS: \"yUnits\",\n  NAME: \"name\",\n  STANDARD: \"standard\"\n};\n\nEMPWorldWind.constants.highAltitudeRangeImage = {};\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\"  r=\"3\" fill=\"red\" stroke=\"red\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle cx=\"12\" cy=\"12\"  r=\"3\" fill=\"blue\" stroke=\"blue\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"green\" stroke=\"green\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"yellow\" stroke=\"yellow\" stroke-width=\"1\"  /></g></svg>');\n//EMPWorldWind.constants.highAltitudeRangeImage.blankMultipoint = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"2px\" height=\"2px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"black\" stroke=\"black\" stroke-width=\"1\"  /></g></svg>');\n\n\n","var EMPWorldWind = EMPWorldWind || {};\n\n(function() {\n  /**\n   * @namespace\n   */\n  EMPWorldWind.utils = {};\n\n  /**\n   * @typedef {object} RGBAColor\n   * @property {number} red\n   * @property {number} green\n   * @property {number} blue\n   * @property {number} alpha 0-1\n   */\n\n  /**\n   *\n   * @param {MouseEvent} event\n   * @returns {{lat: undefined, lon: undefined, clientX: *, clientY: *, screenX: *, screenY: *}}\n   */\n  EMPWorldWind.utils.getEventCoordinates = function(event) {\n    var pickPoint = this.worldWindow.canvasCoordinates(event.clientX, event.clientY);\n    var terrainObject = this.worldWindow.pickTerrain(pickPoint).terrainObject();\n\n    return {\n      lat: terrainObject ? terrainObject.position.latitude : undefined,\n      lon: terrainObject ? terrainObject.position.longitude : undefined,\n      clientX: event.clientX,\n      clientY: event.clientY,\n      screenX: event.screenX,\n      screenY: event.screenY\n    };\n  };\n\n  /**\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  EMPWorldWind.utils.defined = function(value) {\n    return value !== undefined && value !== null;\n  };\n\n  /**\n   * @namespace\n   */\n  EMPWorldWind.utils.milstd = {};\n\n  /**\n   *\n   * @param properties\n   * @param name\n   * @param iconLabels\n   * @param iconPixelSize\n   * @returns {{}}\n   */\n  EMPWorldWind.utils.milstd.updateModifierLabels = function(properties, name, iconLabels, iconPixelSize) {\n    var mod,\n      modifiedModifiers = {},\n      property,\n      size;\n\n    // loop through all the properties, add a parameter for each property\n    for (property in properties) {\n      if (properties.hasOwnProperty(property)) {\n        switch (property) {\n          case \"labelColor\":\n            // Convert labelColor to textColor\n            modifiedModifiers[\"textColor\"] = properties[property];\n            break;\n          case \"fillColor\":\n            modifiedModifiers[\"fillColor\"] = properties[property];\n            break;\n          case \"lineColor\":\n            modifiedModifiers[\"lineColor\"] = properties[property];\n            break;\n          case \"modifiers\":\n            // modifiers contains an object that has other properties in it.\n            // loop through each of the properties and add parameters to those\n            // that are relevant.\n            for (mod in properties[property]) {\n              if (properties[property].hasOwnProperty(mod)) {\n                switch (mod) {\n                  case \"quantity\":\n                    if (iconLabels.C && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"quantity\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"reinforcedOrReduced\":\n                    if (iconLabels.F && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"reinforcedOrReduced\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"staffComments\":\n                    if (iconLabels.G && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"staffComments\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"additionalInfo1\":\n                    if (iconLabels.H && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"additionalInfo1\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"additionalInfo2\":\n                    if (iconLabels.H1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"additionalInfo2\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"additionalInfo3\":\n                    if (iconLabels.H2 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"additionalInfo3\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"evaluationRating\":\n                    if (iconLabels.J && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"evaluationRating\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"combatEffectiveness\":\n                    if (iconLabels.K && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"combatEffectiveness\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"signatureEquipment\":\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"signatureEquipment\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"higherFormation\":\n                    if (iconLabels.M && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"higherFormation\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"hostile\":\n                    if (iconLabels.N && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"hostile\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"iffSif\":\n                    if (iconLabels.P && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"iffSif\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"offsetIndicator\":\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"offsetIndicator\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"uniqueDesignation1\":\n                    if (iconLabels.T && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"uniqueDesignation1\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"uniqueDesignation2\":\n                    if (iconLabels.T1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"uniqueDesignation2\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"equipmentType\":\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"equipmentType\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"dateTimeGroup1\":\n                    if (iconLabels.W && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"dateTimeGroup1\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"dateTimeGroup2\":\n                    if (iconLabels.W1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"dateTimeGroup2\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"altitudeDepth\":\n                    if (iconLabels.X) {\n                      modifiedModifiers[\"altitudeDepth\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"location\":\n                    if (iconLabels.Y && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"location\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"speed\":\n                    if (iconLabels.Z && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"speed\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"specialC2Headquarters\":\n                    if (iconLabels.AA && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"specialC2Headquarters\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"distance\":\n                    modifiedModifiers[\"distance\"] = properties[property][mod];\n                    break;\n                  case \"azimuth\":\n                    modifiedModifiers[\"azimuth\"] = properties[property][mod];\n                    break;\n                  case \"standard\":\n                    modifiedModifiers[\"standard\"] = properties[property][mod];\n                    break;\n                  case \"size\":\n                    size = properties[property][mod];\n                    if (!size) {\n                      size = iconPixelSize;\n                    }\n                    modifiedModifiers[\"size\"] = size;\n                    break;\n                  default:\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[mod] = properties[property][mod];\n                    }\n                    break;\n                }\n              }\n            }\n            break;\n        }\n      }\n    }\n\n    if (iconLabels.CN) {\n      modifiedModifiers[\"name\"] = name;\n    }\n    return modifiedModifiers;\n  };\n\n  /**\n   *\n   * @param modifiers\n   * @param showModLabels\n   * @returns {object}\n   */\n  EMPWorldWind.utils.milstd.convertModifierStringTo2525 = function(modifiers, showModLabels) {\n    var standardModifiers = {};\n\n    if (modifiers !== undefined && modifiers !== null) {\n      for (var sModifier in modifiers) {\n        if (modifiers.hasOwnProperty(sModifier)) {\n          var modValue = modifiers[sModifier];\n          if (modValue !== null && modValue !== \"null\" && modValue !== 0) {\n            switch (sModifier) {\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.QUANTITY:\n                if (showModLabels) {\n                  standardModifiers[\"C\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.REDUCED_OR_REINFORCED:\n                if (showModLabels) {\n                  standardModifiers[\"F\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.STAFF_COMMENTS:\n                if (showModLabels) {\n                  standardModifiers[\"G\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_1:\n                if (showModLabels) {\n                  standardModifiers[\"H\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_2:\n                if (showModLabels) {\n                  standardModifiers[\"H1\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_3:\n                if (showModLabels) {\n                  standardModifiers[\"H2\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.EVALUATION_RATING:\n                if (showModLabels) {\n                  standardModifiers[\"J\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.COMBAT_EFFECTIVENESS:\n                if (showModLabels) {\n                  standardModifiers[\"K\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.SIGNATURE_EQUIPMENT:\n                if (showModLabels) {\n                  standardModifiers[\"L\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.HIGHER_FORMATION:\n                if (showModLabels) {\n                  standardModifiers[\"M\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.HOSTILE:\n                if (showModLabels) {\n                  standardModifiers[\"N\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.IFF_SIF:\n                if (showModLabels) {\n                  standardModifiers[\"P\"] = modValue;\n                }\n                break;\n              // Direction of movement cannot work on 3D because the view can rotate\n              // case EMPWorldWind.constants.RendererSettings.modifierLookup.DIRECTION_OF_MOVEMENT:\n              //    modifiersArray.push(\"Q=\" + modValue);\n              //    break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.OFFSET_INDICATOR:\n                standardModifiers[\"S\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_1:\n                if (showModLabels) {\n                  standardModifiers[\"T\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_2:\n                if (showModLabels) {\n                  standardModifiers[\"T1\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.EQUIPMENT_TYPE:\n                if (showModLabels) {\n                  standardModifiers[\"V\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP:\n                if (showModLabels) {\n                  standardModifiers[\"W\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP_2:\n                if (showModLabels) {\n                  standardModifiers[\"W1\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ALTITUDE_DEPTH:\n                if (showModLabels) {\n                  standardModifiers[\"X\"] = JSON.parse(JSON.stringify(modValue));\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.LOCATION:\n                if (showModLabels) {\n                  standardModifiers[\"Y\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.SPEED:\n                if (showModLabels) {\n                  standardModifiers[\"Z\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.SPECIAL_C2_HEADQUARTERS:\n                if (showModLabels) {\n                  standardModifiers[\"AA\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.DISTANCE:\n                standardModifiers[\"AM\"] = JSON.parse(JSON.stringify(modValue));\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.AZIMUTH:\n                standardModifiers[\"AN\"] = JSON.parse(JSON.stringify(modValue));\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.FILL_COLOR:\n                standardModifiers[\"FILLCOLOR\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.LINE_COLOR:\n                standardModifiers[\"LINECOLOR\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.TEXT_COLOR:\n                standardModifiers[\"TEXTCOLOR\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.STANDARD:\n                // convert standard string value  to modifier numeric\n                standardModifiers[emp.typeLibrary.utils.milstd.Modifiers.STANDARD] = EMPWorldWind.utils.convertSymbolStandardToRendererFormat(modifiers);\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.NAME:\n              case \"CN\":\n                if (showModLabels) {\n                  standardModifiers[\"CN\"] = modValue;\n                }\n                break;\n              default:\n                standardModifiers[sModifier] = modValue;\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    return standardModifiers;\n  };\n\n  /**\n   * Borrowed from the Cesium Implementation\n   *\n   * @param item\n   * @returns {object}\n   */\n  EMPWorldWind.utils.milstd.checkForRequiredModifiers = function(item) {\n    var result = {},\n      symbolCode,\n      properties = {},\n      modifiers = {},\n      oAM = [],\n      oAN = [],\n      basicSymbolCode,\n      standard,\n      symbolDef,\n      i,\n      lonDistance,\n      overrides = {};\n\n    // Check to see if the properties and modifiers have not yet been set.\n    // If they don't exist, this will default them to empty objects.\n    if (item.data && item.data.symbolCode) {\n      symbolCode = item.data.symbolCode;\n    }\n    else if (item.symbolCode) {\n      symbolCode = item.symbolCode;\n    }\n\n    if (item.properties) {\n      properties = item.properties;\n      if (properties.modifiers) {\n        modifiers = properties.modifiers;\n      }\n      else {\n        properties.modifiers = {};\n        modifiers = properties.modifiers;\n      }\n    }\n    else {\n      item.properties = {\n        modifiers: {}\n      };\n\n      modifiers = item.properties.modifiers;\n    }\n\n    // Get the basic symbol code.  We need the basic code because we need to look it up with\n    // getSymbolDef.  This requires the basic code.\n    basicSymbolCode = armyc2.c2sd.renderer.utilities.SymbolUtilities.getBasicSymbolID(symbolCode);\n    // Get the standard we are using.  We need to convert it to what the function getSymbolDef uses.\n    standard = EMPWorldWind.utils.milstd.checkSymbolStandard(item.properties.modifiers);\n    // Retrieve the symbol definition object.  This contains information about the required\n    // symbol modifiers.  We will use this to determine which modifiers are not sufficiently\n    // populated.\n    symbolDef = armyc2.c2sd.renderer.utilities.SymbolDefTable.getSymbolDef(basicSymbolCode, standard);\n    if ((symbolDef === undefined) || (symbolDef === null)) {\n      return result;\n    }\n    // The only modifiers that are sometimes required in MIL-STD-2525B and C are\n    // distance and azimuth.\n    //\n    // First check if distance and azimuth has already been set.  If they are, we\n    // still may not have enough entries for them (as both are arrays), so we still need to\n    // verify that they are good.\n\n    // If distance already exists retrieve the values in it.\n    if (modifiers.hasOwnProperty(\"distance\")) {\n      // Lets make sure that if it is there that it is an array.\n      if (modifiers.distance instanceof Array) {\n        oAM = modifiers.distance;\n      }\n    }\n    // If azimuth already exists retrieve the values of it.\n    if (modifiers.hasOwnProperty(\"azimuth\")) {\n      // Lets make sure that if it is there that it is an array.\n      if (modifiers.azimuth instanceof Array) {\n        oAN = modifiers.azimuth;\n      }\n    }\n    // Based on the symbol draw category, we can determine if the symbol has\n    // has the required parameters or not.  For each draw category, we do a different\n    // check.\n    switch (symbolDef.drawCategory) {\n      // These are circle graphics represented by a single point and a radius.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE: //16\n        if (oAM !== null && oAM.length > 0) {\n          oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n        }\n        else {\n          oAM[0] = 5000;\n        }\n\n        overrides = {\n          distance: oAM\n        };\n        break;\n      // These are 1-point rectangles with an azimuth that determine the angle, and a distance that determines width\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE: //17\n        if ((oAM !== null) && (oAM.length >= 2) &&\n          (typeof (oAM[0]) === \"number\") &&\n          (typeof (oAM[1]) === \"number\")) {\n          oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n        }\n        else {\n          // Check to see if the [0] value is present and its a number.\n          // If not set a value.\n          if ((oAM[0] === undefined) || (typeof (oAM[0]) !== \"number\")) {\n            oAM[0] = 10000;\n          }\n          // Check to see if the [1] value is present and its a number.\n          // If not set a value.\n          if ((oAM[1] === undefined) || (typeof (oAM[1]) !== \"number\")) {\n            oAM[1] = 5000;\n          }\n          oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n        }\n\n        if ((oAN !== null) && (oAN.length >= 1) &&\n          (typeof (oAN[1]) === \"number\")) {\n          oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n        }\n        else {\n          // Check to see if the [0] value is present and its a number.\n          // If not set a value.\n          if ((oAN[0] === undefined) || (typeof (oAN[0]) !== \"number\")) {\n            oAN[0] = 0;\n          }\n          oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n        }\n        overrides = {\n          distance: oAM,\n          azimuth: oAN\n        };\n        break;\n      // This is a sector range fan, requires a point, a min and max distance for each sector, and left\n      // and right azimuths for each sector.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE: //18\n        if ((oAM !== null) && (oAM.length >= 2)) {\n          for (i = 0; i < oAM.length;) {\n            if (typeof (oAM[i]) !== \"number\") {\n              oAM.splice(i, 1);\n            }\n            else {\n              i++;\n            }\n          }\n        }\n        if (oAM.length > 1) {\n          // Check to see if the each value is present.\n          for (i = 0; i < oAM.length; i++) {\n            if (oAM[i] === undefined) {\n              oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n            }\n          }\n        }\n        else {\n          if (oAM[0] === undefined) {\n            oAM[0] = 2000;\n          }\n        }\n        // You need at least 2 azimuth values for this to be a drawable graphic\n        // If it doesn't have it, create it.\n        if (oAN.length === 0) {\n          oAN.push(315);\n          oAN.push(45);\n        }\n        else if (oAN.length === 1) {\n          var newVal = oAN[0] + 90;\n          if (newVal > 360) {\n            newVal = newVal - 360;\n          }\n          oAN.push(newVal);\n        }\n        overrides = {\n          distance: oAM,\n          azimuth: oAN\n        };\n        break;\n      // A circular range fan that is a point and multiple distances for each ring.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE: //19\n        if ((oAM !== null) && (oAM.length > 0)) {\n          for (i = 0; i < oAM.length;) {\n            if (typeof (oAM[i]) !== \"number\") {\n              oAM.splice(i, 1);\n            }\n            else {\n              i++;\n            }\n          }\n        }\n        if (oAM.length < 2) {\n          // Check to see if the each value is present.\n          for (i = 0; i < 2; i++) {\n            if (oAM[i] === undefined) {\n              oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n            }\n          }\n        }\n        overrides = {\n          distance: oAM\n        };\n        break;\n      // These are 2-point rectangles that determine the angle, and a distance that requires width\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE: //20\n        if (oAM !== null && oAM.length > 0) {\n          if (typeof (oAM[0]) !== \"number\") {\n            oAM[0] = 5000;\n          }\n          oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n        }\n        else {\n          oAM[0] = 5000;\n        }\n        overrides = {\n          distance: oAM\n        };\n        break;\n      // Any air corridor.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_LINE:\n        // This really only applies to air corridors.  As far as\n        // I know the only line that requires distance is air corridors.\n\n        // If we do not have the distance field set, or it is set\n        // and the array length is 0, then we want to set it to a default\n        // width.  We want to make the width in relation to the current\n        // scale of the map, otherwise the air corridor won't look like\n        // an air corridor; it will look like a line.\n\n        if ((oAM === null || oAM.length === 0) || (oAM.length > 0 && (isNaN(oAM[0]) || oAM[0] === null))) {\n          if (item.data && item.data.coordinates && item.data.coordinates.length > 1) {\n            var coord0 = item.data.coordinates[0];\n            var coord1 = item.data.coordinates[1];\n\n            // var pointCartographic0 = Cesium.Cartographic.fromDegrees(coord0[0], coord0[1], 0);\n            // var pointCartographic1 = Cesium.Cartographic.fromDegrees(coord1[0], coord1[1], 0);\n            // var dist = pointCartographic0.distanceTo(pointCartographic1);\n            // lonDistance = dist / 4;\n\n            var pointCartographic0 = new WorldWind.Location(coord0[0], coord0[1]);\n            var pointCartographic1 = new WorldWind.Location(coord1[0], coord1[1]);\n\n            var dist = WorldWind.Location.greatCircleDistance(pointCartographic0, pointCartographic1);\n\n            lonDistance = dist / 4;\n          }\n          else {\n            lonDistance = lonDistance / 34;\n          }\n\n          oAM[0] = lonDistance;\n          overrides = {\n            distance: oAM\n          };\n        }\n        else {\n          overrides = {\n            distance: oAM\n          };\n        }\n\n        break;\n    }\n\n    return overrides;\n  };\n\n  /**\n   *\n   * @param modifiers\n   * @returns {number}\n   */\n  EMPWorldWind.utils.milstd.checkSymbolStandard = function(modifiers) {\n    var standard = 1,\n      modifiersCopy,\n      modValue;\n\n    try {\n      if (modifiers !== undefined && modifiers !== null && modifiers !== \"\") {\n        modifiersCopy = typeof (modifiers) === \"string\" ? JSON.parse(modifiers) : emp.helpers.copyObject(modifiers);\n\n        if (modifiersCopy.hasOwnProperty(\"modifiers\")) {\n          modifiersCopy = modifiersCopy.modifiers;\n        }\n\n        if (modifiersCopy.hasOwnProperty(\"renderer\")) {\n          modValue = modifiersCopy.renderer;\n          if (modValue !== undefined && modValue !== null && modValue !== 0) {\n            if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n            }\n            else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n            }\n            else {\n              standard = modValue;\n            }\n          }\n        }\n        else if (modifiersCopy.hasOwnProperty(\"standard\")) {\n          modValue = modifiersCopy.standard;\n          if (modValue !== undefined && modValue !== null && modValue !== 0) {\n            if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n            }\n            else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) > -1) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n            }\n            else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n            }\n            else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) > -1) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n            }\n            else {\n              standard = modValue;\n            }\n          }\n        }\n      }\n    }\n    catch (err) {\n      window.console.log(\"Error getting symbol standard\");\n    }\n\n    return standard;\n  };\n\n  /**\n   *\n   * @param modifiers\n   */\n  EMPWorldWind.utils.convertSymbolStandardToRendererFormat = function(modifiers) {\n    var standard,\n      modValue;\n\n    modValue = modifiers.standard;\n    if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n      standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n    }\n    else {\n      standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n    }\n\n    return standard;\n  };\n\n  /**\n   * Parses a 6 character color string, assumes full opacity\n   * @param hex #RRGGBB\n   * @returns {RGBAColor}\n   * @private\n   */\n  function _hex6ToRGBA(hex) {\n    hex = hex.replace('#', '');\n    var r, g, b;\n\n    r = parseInt(hex.substring(0, 2), 16);\n    g = parseInt(hex.substring(2, 4), 16);\n    b = parseInt(hex.substring(4, 6), 16);\n\n    return {\n      red: r,\n      green: g,\n      blue: b,\n      alpha: 1\n    };\n  }\n\n  /**\n   * Parses an 8 character color string\n   * @param hex AARRGGBB format\n   * @returns {RGBAColor}\n   * @private\n   */\n  function _hex8ToRGBA(hex) {\n    var r, g, b, a;\n\n    a = parseInt(hex.substring(0, 2), 16) / 256.0;\n    r = parseInt(hex.substring(2, 4), 16);\n    g = parseInt(hex.substring(4, 6), 16);\n    b = parseInt(hex.substring(6, 8), 16);\n\n    return {\n      red: r,\n      green: g,\n      blue: b,\n      alpha: a\n    };\n  }\n\n  /**\n   * @example\n   * hexToRGBA(\"#00FF83\")\n   *\n   * @param {string} hex\n   * @param {float} [alpha=1] 0-1 expected range\n   * @param {boolean} [normalize=true] True produce float values between 0 and 1, otherwise integers between 0 and 255\n   * @returns {RGBAColor}\n   */\n  EMPWorldWind.utils.hexToRGBA = function(hex, alpha, normalize) {\n    var newHex;\n\n    if (!hex) {\n      return {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 1\n      };\n    }\n    normalize = EMPWorldWind.utils.defined(normalize) ? normalize : true;\n    alpha = EMPWorldWind.utils.defined(alpha) ? alpha : 1;\n\n    if (hex.length === 8) {\n      newHex = _hex8ToRGBA(hex);\n    }\n    else {\n      newHex = _hex6ToRGBA(hex);\n      newHex.alpha = alpha;\n    }\n\n    if (normalize) {\n      newHex.red = newHex.red / 256.0;\n      newHex.green = newHex.green / 256.0;\n      newHex.blue = newHex.blue / 256.0;\n    }\n\n    return newHex;\n  };\n\n  /**\n   * Will normalize an {@link RGBAColor} object, will return the same object if already normalized\n   * (contains a decimal in the value)\n   *\n   * WorldWind.Color requires 0-1 values for color\n   *\n   * @param {RGBAColor} color\n   * @returns {RGBAColor}\n   */\n  EMPWorldWind.utils.normalizeRGBAColor = function(color) {\n    var normalize,\n      normalColor = Object.assign({}, color);\n\n    normalize = color.red.toString().indexOf('.') === -1 ||\n      color.green.toString().indexOf('.') === -1 ||\n      color.blue.toString().indexOf('.') === -1;\n\n    if (normalize) {\n      normalColor.red = color.red / 256.0;\n      normalColor.green = color.green / 256.0;\n      normalColor.blue = color.blue / 256.0;\n    }\n\n    return normalColor;\n  };\n\n  /**\n   * Returns the east-west distance of the bounds\n   * @param {Bounds} bounds\n   * @returns {number}\n   */\n  EMPWorldWind.utils.boundsWidth = function(bounds) {\n    return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n        new WorldWind.Location(0, bounds.west),\n        new WorldWind.Location(0, bounds.east));\n  };\n\n  /**\n   * Returns the north-south distance of the bounds\n   * @param {Bounds} bounds\n   * @returns {number}\n   */\n  EMPWorldWind.utils.boundsHeight = function(bounds) {\n    return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n        new WorldWind.Location(bounds.south, 0),\n        new WorldWind.Location(bounds.north, 0));\n  };\n\n  /**\n   * Dot color based on the symbol code affiliation\n   * @param symbolCode\n   * @returns {*}\n   */\n  EMPWorldWind.utils.selectHighAltitudeRangeImage = function(symbolCode) {\n    var affiliationLetter,\n      highAltitudeRangeImage;\n\n    if (!EMPWorldWind.utils.defined(symbolCode)) {\n      return EMPWorldWind.constants.highAltitudeRangeImage.highScaleImageYellow; // unknown\n    }\n\n    affiliationLetter = symbolCode.substring(1, 2);\n    switch (affiliationLetter.toLowerCase()) {\n      case \"h\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed;\n        break;\n      case \"f\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue;\n        break;\n      case \"n\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen;\n        break;\n      case \"u\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n        break;\n      default:\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n        break;\n    }\n    return highAltitudeRangeImage;\n  };\n\n  /**\n   *\n   * @param CameraAltitude\n   * @param singlePointAltitudeRanges\n   * @returns {EMPWorldWind.constants.SinglePointAltitudeRangeMode|number}\n   */\n  EMPWorldWind.utils.getSinglePointAltitudeRangeMode = function(CameraAltitude, singlePointAltitudeRanges) {\n    if (CameraAltitude < singlePointAltitudeRanges.mid) {\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    }\n    else if (CameraAltitude >= singlePointAltitudeRanges.mid && CameraAltitude < singlePointAltitudeRanges.high) {\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE;\n    }\n    else if (CameraAltitude >= singlePointAltitudeRanges.high) {\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE;\n    }\n    else {\n      //default\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    }\n  };\n\n  /**\n   *\n   * @param name\n   * @param size\n   * @param style\n   * @returns {{name: *, size: *, style: *, measurements: *}}\n   */\n  EMPWorldWind.utils.getFontInfo = function(name, size, style) {\n    var _ModifierFont;\n    var _ModifierFontStyle = size;\n    if (style !== 'bold' || style !== 'normal') {\n      _ModifierFontStyle = style;\n    }\n    else {\n      _ModifierFontStyle = 'bold';\n    }\n    _ModifierFont = _ModifierFontStyle + \" \" + size + \"pt \" + name;\n\n    var measurements = armyc2.c2sd.renderer.utilities.RendererUtilities.measureFont(_ModifierFont);\n    return {name: name, size: size, style: style, measurements: measurements};\n  };\n\n  /**\n   *\n   * @param fn\n   * @param delay\n   * @param context\n   * @returns {limited}\n   * @constructor\n   */\n  EMPWorldWind.utils.MultiPointRateLimit = function(fn, delay, context) {\n    var queue = [],\n      timer = null;\n    //context.newAddRateLimitQueue = queue;\n\n    function processQueue() {\n      var index = 0;\n      var items = [];\n      while (index < 200) {\n        var item = queue.shift();\n        if (item && item.context.isFeaturePresent(item.arguments.id || item.arguments.coreId)) {\n          // condition checks the case when the multi point was deleted while this request was in this queue.\n          items.push(item.arguments);\n        }\n        if (queue.length === 0) {\n          break;\n        }\n        index = index + 1;\n      }\n      if (items.length > 0) {\n        fn.apply(item.context, [items]);\n      }\n      if (items.length > 0) {\n        // item.context.viewer.dataSourceDisplay.update(Cesium.JulianDate.fromDate(new Date()));\n      }\n      if (queue.length === 0)\n        clearInterval(timer), timer = null;\n    }\n\n    return function limited() {\n      //reset queue to remove all features already expired. Expire when map moves.\n      queue = [];\n      for (var index = 0; index < arguments[0].length; index++) {\n        var feature = arguments[0][index];\n        queue.push({\n          context: context || this,\n          arguments: feature\n          //arguments: [].slice.call(feature)\n        });\n      }\n\n      if (!timer) {\n        processQueue(); // start immediately on the first invocation\n        //                if (queue.length > 20)\n        //                {\n        //                    processQueue();\n        //                }\n        //                else\n        //                {\n        timer = setInterval(processQueue, delay);\n        //}\n        //timer = setInterval(processQueue, (queue.length > 20) ? delay * 2 : delay);\n\n      }\n    };\n\n  };\n\n  /**\n   * @namespace\n   */\n  EMPWorldWind.Math = {};\n\n  /**\n   * Determines if two values are equal using an absolute or relative tolerance test. This is useful\n   * to avoid problems due to roundoff error when comparing floating-point values directly. The values are\n   * first compared using an absolute tolerance test. If that fails, a relative tolerance test is performed.\n   * Use this test if you are unsure of the magnitudes of left and right.\n   *\n   * @param {Number} left The first value to compare.\n   * @param {Number} right The other value to compare.\n   * @param {Number} relativeEpsilon The maximum inclusive delta between <code>left</code> and <code>right</code> for the relative tolerance test.\n   * @param {Number} [absoluteEpsilon=relativeEpsilon] The maximum inclusive delta between <code>left</code> and <code>right</code> for the absolute tolerance test.\n   * @returns {Boolean} <code>true</code> if the values are equal within the epsilon; otherwise, <code>false</code>.\n   *\n   * @example\n   * var a = Cesium.Math.equalsEpsilon(0.0, 0.01, Cesium.Math.EPSILON2); // true\n   * var b = Cesium.Math.equalsEpsilon(0.0, 0.1, Cesium.Math.EPSILON2);  // false\n   * var c = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON7); // true\n   * var d = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON9); // false\n   */\n  EMPWorldWind.Math.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\n    absoluteEpsilon = EMPWorldWind.Math.defaultValue(absoluteEpsilon, relativeEpsilon);\n    var absDiff = Math.abs(left - right);\n    return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\n  };\n\n  /**\n   * Returns the first parameter if not undefined, otherwise the second parameter.\n   * Useful for setting a default value for a parameter.\n   *\n   * @exports defaultValue\n   *\n   * @param {*} a\n   * @param {*} b\n   * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\n   *\n   * @example\n   * param = Cesium.defaultValue(param, 'default');\n   */\n  EMPWorldWind.Math.defaultValue = function(a, b) {\n    if (a !== undefined) {\n      return a;\n    }\n    return b;\n  };\n\n  /**\n   * 0.1\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON1 = 0.1;\n\n  /**\n   * 0.01\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON2 = 0.01;\n\n  /**\n   * 0.001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON3 = 0.001;\n\n  /**\n   * 0.0001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON4 = 0.0001;\n\n  /**\n   * 0.00001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON5 = 0.00001;\n\n  /**\n   * 0.000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON6 = 0.000001;\n\n  /**\n   * 0.0000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON7 = 0.0000001;\n\n  /**\n   * 0.00000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON8 = 0.00000001;\n\n  /**\n   * 0.000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON9 = 0.000000001;\n\n  /**\n   * 0.0000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON10 = 0.0000000001;\n\n  /**\n   * 0.00000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON11 = 0.00000000001;\n\n  /**\n   * 0.000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON12 = 0.000000000001;\n\n  /**\n   * 0.0000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON13 = 0.0000000000001;\n\n  /**\n   * 0.00000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON14 = 0.00000000000001;\n\n  /**\n   * 0.000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON15 = 0.000000000000001;\n\n  /**\n   * 0.0000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON16 = 0.0000000000000001;\n\n  /**\n   * 0.00000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON17 = 0.00000000000000001;\n\n  /**\n   * 0.000000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON18 = 0.000000000000000001;\n\n  /**\n   * 0.0000000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON19 = 0.0000000000000000001;\n\n  /**\n   * 0.00000000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON20 = 0.00000000000000000001;\n\n  /**\n   * 3.986004418e14\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.GRAVITATIONALPARAMETER = 3.986004418e14;\n\n  /**\n   * Radius of the sun in meters: 6.955e8\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.SOLAR_RADIUS = 6.955e8;\n\n  /**\n   * The mean radius of the moon, according to the \"Report of the IAU/IAG Working Group on\n   * Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000\",\n   * Celestial Mechanics 82: 83-110, 2002.\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.LUNAR_RADIUS = 1737400.0;\n\n  /**\n   * 64 * 1024\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.SIXTY_FOUR_KILOBYTES = 64 * 1024;\n\n  /**\n   * Returns the sign of the value; 1 if the value is positive, -1 if the value is\n   * negative, or 0 if the value is 0.\n   *\n   * @param {Number} value The value to return the sign of.\n   * @returns {Number} The sign of value.\n   */\n  EMPWorldWind.Math.sign = function(value) {\n    if (value > 0) {\n      return 1;\n    }\n    if (value < 0) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  /**\n   * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n   * This is similar to {@link CesiumMath#sign} except that returns 1.0 instead of\n   * 0.0 when the input value is 0.0.\n   * @param {Number} value The value to return the sign of.\n   * @returns {Number} The sign of value.\n   */\n  EMPWorldWind.Math.signNotZero = function(value) {\n    return value < 0.0 ? -1.0 : 1.0;\n  };\n}());\n","var EMPWorldWind = window.EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * Set of builder functions that produce singular WorldWind primitive shapes and renderables.\n * @namespace\n */\nEMPWorldWind.editors.primitiveBuilders = (function() {\n\n  /**\n   *\n   * @param feature\n   * @param selectionStyle\n   * @private\n   */\n  function _createPlacemarkAttributes(feature, selectionStyle) {\n    var attributes, highlightAttributes, selectedLineColor;\n\n    // Use PlacemarkAttributes\n    attributes = new WorldWind.PlacemarkAttributes();\n\n    // Set the leaderline options\n    attributes.drawLeaderLine = feature.properties.extrude || false;\n\n    // Set the imageURL\n    if (feature.properties.iconUrl) {\n      attributes.imageSource = feature.properties.iconUrl;\n      if (feature.properties.useProxy) {\n        attributes.imageSource = emp3.api.global.configuration.urlProxy + \"?url=\" + attributes.imageSource;\n      }\n    } else {\n      attributes.imageSource = WorldWind.configuration.baseUrl + \"images/emp-default-icon.png\";\n    }\n\n    // Set the image size\n    attributes.imageScale = this.state.iconSize;\n\n    // Create the label attributes\n    attributes.labelAttributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n    // Create the highlight attributes\n    highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n\n    // Create separate label highlights, will be linked and overridden to the normal attributes if not\n    highlightAttributes.labelAttributes = new WorldWind.TextAttributes(attributes.labelAttributes);\n\n    // Image scale may differ when selected\n    if (selectionStyle.scale) {\n      highlightAttributes.imageScale = selectionStyle.scale;\n    }\n\n    if (selectionStyle.lineColor) {\n      selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n      highlightAttributes.imageColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n    } else {\n      highlightAttributes.imageColor = WorldWind.Color.YELLOW;\n    }\n\n    // Update the label attributes for highlighted labels\n    highlightAttributes.labelAttributes.offset = attributes.labelAttributes.offset;\n    highlightAttributes.labelAttributes.color = highlightAttributes.imageColor;\n\n\n    return {\n      attributes: attributes,\n      highlightAttributes: highlightAttributes\n    };\n  }\n\n  function _createTextAttributes(feature, selectionStyle) {\n    var attributes, highlightAttributes, selectedLabelColor;\n    // GeographicText requires TextAttributes instead\n    attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n    // Create highlight attributes from the regular attributes, only update highlight color\n    highlightAttributes = new WorldWind.TextAttributes(attributes);\n    if (selectionStyle.lineColor) {\n      selectedLabelColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n      highlightAttributes.color = new WorldWind.Color(selectedLabelColor.red, selectedLabelColor.green, selectedLabelColor.blue, selectedLabelColor.alpha);\n    } else {\n      highlightAttributes.color = WorldWind.Color.YELLOW;\n    }\n\n    return {\n      attributes: attributes,\n      highlightAttributes: highlightAttributes\n    };\n  }\n\n  function _createSurfaceShapeAttributes(feature, selectionStyle) {\n    var attributes, highlightAttributes, lineColor, fillColor, selectedLineColor, selectedFillColor;\n\n    attributes = new WorldWind.ShapeAttributes();\n    // Set stroke color\n    if (feature.properties.strokeStyle && feature.properties.strokeStyle.strokeColor) {\n      lineColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.strokeStyle.strokeColor);\n      attributes.outlineColor = new WorldWind.Color(lineColor.red, lineColor.green, lineColor.blue, lineColor.alpha);\n    } else {\n      attributes.outlineColor = WorldWind.Color.BLACK;\n    }\n\n    // Set fill color\n    if (feature.properties.fillColor) {\n      fillColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fillColor);\n      attributes.interiorColor = new WorldWind.Color(fillColor.red, fillColor.green, fillColor.blue, fillColor.alpha);\n    } else {\n      attributes.drawInterior = false;\n    }\n\n    // TODO fillPattern is not yet supported by the ShapeAttributes class\n\n    // Line width\n    if (feature.properties.strokeWidth || feature.properties.lineWidth) {\n      attributes.outlineWidth = feature.properties.strokeWidth || feature.properties.lineWidth;\n    }\n\n    // Stippling of outline\n    attributes.outlineStippleFactor = feature.properties.stippleFactor || attributes.outlineStippleFactor;\n    attributes.outlineStipplePattern = feature.properties.stipplePattern || attributes.outlineStipplePattern;\n\n    // Generate the highlight attributes from the normal attributes\n    highlightAttributes = new WorldWind.ShapeAttributes(attributes);\n\n    // Update the selected lineColor\n    if (selectionStyle.lineColor) {\n      selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n      highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n    } else {\n      highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n    }\n\n    // Update the selected fillColor\n    if (selectionStyle.fillColor) {\n      selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n      highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n    } else {\n      highlightAttributes.drawInterior = false;\n    }\n\n    return {\n      attributes: attributes,\n      highlightAttributes: highlightAttributes\n    };\n  }\n\n  return {\n    /**\n     * @param {emp.typeLibrary.Feature | object} feature\n     * @returns {WorldWind.TextAttributes}\n     */\n    createTextAttributes: function(feature) {\n      var textColor, size,\n        attributes = new WorldWind.TextAttributes();\n\n      // Set the offset\n      attributes.offset = new WorldWind.Offset(\n        WorldWind.OFFSET_FRACTION, -0.05, // To the right of the point by default\n        WorldWind.OFFSET_FRACTION, 0.5 // Center Y be default\n      );\n\n      // Should not be occluded by terrain or objects when false\n      attributes.depthTest = false;\n\n      // Label Color\n      if (feature.properties.labelStyle && feature.properties.labelStyle.color) {\n        textColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.labelStyle.color);\n      } else if (feature.properties.fontColor) {\n        textColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fontColor);\n      } else {\n        textColor = EMPWorldWind.utils.hexToRGBA(EMPWorldWind.constants.propertyDefaults.FILL_COLOR_HEX);\n      }\n      attributes.color = new WorldWind.Color(textColor.red, textColor.green, textColor.blue, textColor.alpha);\n\n      // Font Family\n      if (feature.properties.labelStyle && feature.properties.labelStyle.family) {\n        attributes.font.family = feature.properties.labelStyle.family;\n      } else if (feature.properties.fontFamily) {\n        attributes.font.family = feature.properties.fontFamily;\n      }\n\n      // Justification\n      if (feature.properties.labelStyle && feature.properties.labelStyle.justification) {\n        attributes.font.horizontalAlignment = feature.properties.labelStyle.justification;\n      } else if (feature.properties.labelAlign) {\n        attributes.font.horizontalAlignment = feature.properties.labelAlign;\n      }\n\n      // Font size\n      if (feature.properties.labelStyle && feature.properties.labelStyle.size) {\n        attributes.font.size = feature.properties.labelStyle.size;\n      } else if (feature.properties.fontSize) {\n        size = feature.properties.fontSize;\n        size = size.substring(0, size.length - 2);\n        if (!isNaN(size)) {\n          attributes.font.size = parseInt(feature.properties.fontSize);\n        }\n      }\n\n      // Label Scale\n      if (feature.properties.labelStyle && feature.properties.labelStyle.scale) {\n        attributes.scale = feature.properties.labelStyle.scale;\n      }\n\n      return attributes;\n    },\n\n    /**\n     * Wrapper function for generating the appropriate attributes based on the given feature and selection style\n     * @param {emp.typeLibrary.Feature | object} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {{attributes: *, highlightAttributes: *}}\n     */\n    createShapeAttributes: function(feature, selectionStyle) {\n      var attributes;\n\n      switch (feature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO handle GEO_ACM attributes\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL: // Do nothing, handled by renderer, no primitives\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          attributes = _createPlacemarkAttributes.call(this, feature, selectionStyle);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          attributes = _createTextAttributes.call(this, feature, selectionStyle);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH: // Not all of the attributes are used for path/polyline\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n        default:\n          attributes = _createSurfaceShapeAttributes(feature, selectionStyle);\n      }\n\n      return attributes;\n    },\n\n    /**\n     * @todo Use update from NASA WW to handle 3d airspaces\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Polygon}\n     */\n    constructAirControlMeasure: function(feature, selectionStyle) {\n      var primitivePolygon, boundaries, attributes, highlightAttributes,\n        i, selectedFillColor,\n        len = feature.data.coordinates.length;\n\n      attributes = new WorldWind.ShapeAttributes();\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      // TODO highlight attributes for ACM\n\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.interiorColor = WorldWind.Color.YELLOW;\n      }\n\n      boundaries = [];\n      for (i = 0; i < len; i++) {\n        // TODO need updates to WorldWind to fix this correctly, also not setting altitude if there are multiple attributes\n        //boundaries[0].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].minAlt));\n        //boundaries[1].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n        boundaries.push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n      }\n\n      primitivePolygon = new WorldWind.Polygon(boundaries, attributes);\n      primitivePolygon.altitudeMode = WorldWind.ABSOLUTE;\n      primitivePolygon.extrude = true;\n      primitivePolygon.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return primitivePolygon;\n    },\n\n    /**\n     * Builds a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceCircle} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceCircle}\n     */\n    constructSurfaceCircle: function(feature, selectionStyle) {\n      var attributes, location, circlePrimitive;\n\n      // Construct circle attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the location\n      location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n      // Construct the primitive\n      circlePrimitive = new WorldWind.SurfaceCircle(location, feature.properties.radius, attributes.attributes);\n\n      // Set the primitive properties\n      circlePrimitive.displayName = feature.name;\n      circlePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      circlePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return circlePrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceEllipse} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceEllipse}\n     */\n    constructSurfaceEllipse: function(feature, selectionStyle) {\n      var attributes, location, ellipsePrimitive;\n\n      // Construct the ellipse attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the location\n      location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n      // Construct the primitive\n      ellipsePrimitive = new WorldWind.SurfaceEllipse(location,\n        feature.properties.semiMajor,\n        feature.properties.semiMinor,\n        feature.properties.azimuth,\n        attributes.attributes);\n\n      // Set the primitive properties\n      ellipsePrimitive.displayName = feature.name;\n      ellipsePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      ellipsePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return ellipsePrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolyline} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolyline}\n     */\n    constructSurfacePolyline: function(feature, selectionStyle) {\n      var i, pathPrimitive, attributes,\n        len = feature.data.coordinates.length,\n        locations = [];\n\n      // Construct the path attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the locations\n      for (i = 0; i < len; i++) {\n        locations.push(new WorldWind.Location(feature.data.coordinates[i][1], feature.data.coordinates[i][0]));\n      }\n\n      // Construct the primitive\n      pathPrimitive = new WorldWind.SurfacePolyline(locations, attributes.attributes);\n\n      // Set the primitive properties\n      pathPrimitive.displayName = feature.name;\n      pathPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      pathPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return pathPrimitive;\n    },\n\n    /**\n     * This function is similar to the feature based version except it takes a geoJSON object as the only parameter.\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolyline}\n     */\n    constructSurfacePolylineFromGeoJSON: function(geoJSON, selectionStyle) {\n      var i, color, attributes, highlightAttributes, polylinePrimitive, selectedLineColor,\n        len = geoJSON.coordinates.length,\n        locations = [];\n\n      attributes = new WorldWind.ShapeAttributes();\n      // SurfacePolyline uses the following attributes\n      if (geoJSON.properties.strokeColor) {\n        color = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor, geoJSON.properties.lineOpacity);\n        attributes.outlineColor = new WorldWind.Color(color.red, color.green, color.blue, color.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n      for (i = 0; i < len; i++) {\n        locations.push(new WorldWind.Location(geoJSON.coordinates[i][1], geoJSON.coordinates[i][0]));\n      }\n\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n\n      polylinePrimitive = new WorldWind.SurfacePolyline(locations, attributes);\n      polylinePrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polylinePrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return polylinePrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Placemark} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Placemark}\n     */\n    constructPlacemark: function(feature, selectionStyle) {\n      var position, placemark, attributes,\n        eyeDistanceScaling = false;\n\n      // Create the placemark attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes.call(this, feature, selectionStyle);\n\n      // Set the position\n      position = new WorldWind.Position(\n        feature.data.coordinates[1],\n        feature.data.coordinates[0],\n        feature.data.coordinates[2] || 0);\n\n      // Construct the primitive\n      placemark = new WorldWind.Placemark(position, eyeDistanceScaling, attributes.attributes);\n\n      // Set the placemark attributes\n      placemark.alwaysOnTop = true;\n      placemark.label = feature.name;\n      placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(attributes.highlightAttributes);\n\n      return placemark;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolygon} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolygon}\n     */\n    constructSurfacePolygon: function(feature, selectionStyle) {\n      var polygonPrimitive, attributes, boundaryLen,\n        i, j,\n        boundaries = [],\n        numBounds = feature.data.coordinates.length;\n\n      // Construct the polygon attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the boundary locations\n      for (i = 0; i < numBounds; i++) {\n        boundaryLen = feature.data.coordinates[i].length;\n        var subBoundary = [];\n        for (j = 0; j < boundaryLen; j++) {\n          subBoundary.push(new WorldWind.Location(feature.data.coordinates[i][j][1], feature.data.coordinates[i][j][0]));\n        }\n        boundaries.push(subBoundary);\n      }\n\n      // Construct the primitive\n      polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes.attributes);\n\n      // Set the primitive properties\n      polygonPrimitive.displayName = feature.name;\n      polygonPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polygonPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return polygonPrimitive;\n    },\n\n    /**\n     *\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolygon}\n     */\n    constructSurfacePolygonFromGeoJSON: function(geoJSON, selectionStyle) {\n      var attributes, interiorColor, outlineColor, boundaryLen, polygonPrimitive,\n        selectedLineColor, selectedFillColor, highlightAttributes,\n        i, j,\n        boundaries = [],\n        numBounds = geoJSON.geometry.coordinates.length;\n\n      for (i = 0; i < numBounds; i++) {\n        boundaryLen = geoJSON.geometry.coordinates[i].length;\n        var subBoundary = [];\n        for (j = 0; j < boundaryLen; j++) {\n          subBoundary.push(new WorldWind.Location(geoJSON.geometry.coordinates[i][j][1], geoJSON.geometry.coordinates[i][j][0]));\n        }\n        boundaries.push(subBoundary);\n      }\n\n      attributes = new WorldWind.ShapeAttributes();\n      if (geoJSON.properties.strokeColor) {\n        outlineColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor);\n        attributes.outlineColor = new WorldWind.Color(outlineColor.red, outlineColor.green, outlineColor.blue, outlineColor.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      if (geoJSON.properties.fillColor) {\n        interiorColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.fillColor);\n        attributes.interiorColor = new WorldWind.Color(interiorColor.red, interiorColor.green, interiorColor.blue, interiorColor.alpha);\n      } else {\n        attributes.drawInterior = false;\n      }\n\n      attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n      attributes.outlineStippleFactor = geoJSON.properties.stippleFactor || attributes.outlineStippleFactor;\n      attributes.outlineStipplePattern = geoJSON.properties.stipplePattern || attributes.outlineStipplePattern;\n\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.drawInterior = false;\n      }\n\n      polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes);\n      polygonPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polygonPrimitive.displayName = geoJSON.properties.name;\n      polygonPrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return polygonPrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceRectangle} primitive\n     * This handles rectangles and squares\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfaceRectangle}\n     */\n    constructSurfaceRectangle: function(feature, selectionStyle) {\n      var attributes, location, width, height, rectPrimitive;\n\n      // Construct the rectangle/square attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the location\n      location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n      // Determine rect or square\n      if (feature.format === emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE) {\n        // Rectangle\n        width = feature.properties.width;\n        height = feature.properties.height;\n      } else {\n        // Square, width equals height\n        width = feature.properties.width;\n        height = feature.properties.width;\n      }\n\n      // Construct the primitive\n      rectPrimitive = new WorldWind.SurfaceRectangle(location, width, height, feature.properties.azimuth, attributes.attributes);\n\n      // Set the primitive properties\n      rectPrimitive.displayName = feature.name;\n      rectPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      rectPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return rectPrimitive;\n    },\n\n    /**\n     * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Text} primitive\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Text}\n     */\n    constructText: function(feature, selectionStyle) {\n      var attributes, position, textPrimitive;\n\n      // Construct circle attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n      // Set the position\n      position = new WorldWind.Position(\n        feature.coordinates[1], // Latitude\n        feature.coordinates[0], // Longitude\n        feature.coordinates[2] ? feature.coordinates[2] : 0); // Altitude\n\n      // Construct the text\n      textPrimitive = new WorldWind.GeographicText(position, feature.name);\n\n      // Set the primitive properties\n      textPrimitive.attributes = attributes.attributes;\n      textPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      textPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n      return textPrimitive;\n    },\n\n    /**\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Text}\n     */\n    constructTextFromGeoJSON: function(geoJSON, selectionStyle) {\n      var textPrimitive, attributes, highlightAttributes, selectedColor, position;\n\n      // Create the attributes\n      attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(geoJSON);\n\n      // Create the highlight attributes\n      highlightAttributes = new WorldWind.TextAttributes(attributes);\n      if (selectionStyle.lineColor) {\n        selectedColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.color = new WorldWind.Color(selectedColor.red, selectedColor.green, selectedColor.blue, selectedColor.alpha);\n      } else {\n        highlightAttributes.color = WorldWind.Color.YELLOW;\n      }\n\n      // Set the position\n      position = new WorldWind.Position(\n        geoJSON.geometry.coordinates[1], // Latitude\n        geoJSON.geometry.coordinates[0], // Longitude\n        geoJSON.geometry.coordinates[2] ? geoJSON.geometry.coordinates[0] : 0); // Altitude\n\n      // Construct the primitive\n      textPrimitive = new WorldWind.GeographicText(position, geoJSON.properties.label);\n\n      // Set the attributes\n      textPrimitive.attributes = attributes;\n      textPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      textPrimitive.highlightAttributes = highlightAttributes;\n\n      return textPrimitive;\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * @classdesc The EditorController handles all drawing, editing, and updating of features\n * @class\n */\nEMPWorldWind.editors.EditorController = (function() {\n  /**\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {object} modifiers\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.Placemark}\n   * @private\n   */\n  function _constructSinglePointMilStdSymbol(feature, modifiers, selectionStyle) {\n    var placemark, attributes, highlightAttributes, position, imageInfo, imageCenter, imageBounds, imageOffset,\n      selectedImage, symbolCode, selectedModifiers,\n      eyeDistanceScaling = false;\n\n    attributes = new WorldWind.PlacemarkAttributes();\n\n    // Leaderline settings\n    attributes.drawLeaderLine = feature.properties.extrude || false;\n    // TODO choose color based on some other setting (affiliation perhaps)\n    attributes.leaderLineAttributes.outlineColor = WorldWind.Color.RED;\n\n    if (feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n      // Optimization\n      attributes.imageScale = 1;\n      attributes.imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.symbolCode);\n      highlightAttributes = new WorldWind.PlacemarkAttributes();\n      highlightAttributes.imageColor = WorldWind.Color.WHITE;\n      highlightAttributes.imageSource = attributes.imageSource;\n    } else {\n\n      if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) && feature.symbolCode) {\n        // do not display country code\n        symbolCode = feature.symbolCode.substr(0, 12) + \"--\" + feature.symbolCode.substr(14);\n      } else {\n        // display country code\n        symbolCode = feature.symbolCode;\n      }\n      // Render\n      imageInfo = armyc2.c2sd.renderer.MilStdIconRenderer.Render(symbolCode, modifiers);\n      imageCenter = imageInfo.getCenterPoint();\n      imageBounds = imageInfo.getImageBounds();\n\n      // Calculate offset\n      imageOffset = new WorldWind.Offset(\n        WorldWind.OFFSET_FRACTION, imageCenter.x / imageBounds.width,\n        WorldWind.OFFSET_FRACTION, 1 - (imageCenter.y / imageBounds.height)\n      );\n\n      attributes.imageScale = this.state.iconSize;\n      attributes.imageOffset = imageOffset;\n      attributes.imageSource = imageInfo.toDataUrl();\n\n      // Highlight attributes\n      highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n      highlightAttributes.imageColor = WorldWind.Color.WHITE;\n      highlightAttributes.imageOffset = imageOffset;\n      highlightAttributes.imageScale = this.state.selectionStyle.scale;\n\n      // Note that this is done statically, if the selection style changes a bulk update to every feature will need to be done\n      selectedModifiers = Object.assign({}, modifiers);\n      selectedModifiers.LINECOLOR = selectionStyle.lineColor;\n      selectedModifiers.FILLCOLOR = selectionStyle.fillColor;\n      selectedImage = armyc2.c2sd.renderer.MilStdIconRenderer.Render(feature.symbolCode, selectedModifiers).toDataUrl();\n      highlightAttributes.imageSource = selectedImage;\n    }\n\n    position = new WorldWind.Position(\n      feature.data.coordinates[1],\n      feature.data.coordinates[0],\n      EMPWorldWind.utils.defined(feature.data.coordinates[2]) ? feature.data.coordinates[2] : 0);\n\n    placemark = new WorldWind.Placemark(position, eyeDistanceScaling);\n    placemark.alwaysOnTop = true;\n    placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    placemark.attributes = new WorldWind.PlacemarkAttributes(attributes);\n    placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(highlightAttributes);\n\n    return placemark;\n  }\n\n  /**\n   *\n   * @param {emp.typeLibrary.Feature[]} features\n   * @private\n   */\n  function _constructMultiPointMilStdFeature(features) {\n    var bbox, bounds, scale, featureCoords,\n      data = {};\n\n    bounds = this.getBounds();\n    bbox = bounds.west + \",\" + bounds.south + \",\" + bounds.east + \",\" + bounds.north;\n    data.bbox = bbox;\n\n    data.batch = [];\n\n    scale = EMPWorldWind.utils.boundsWidth(bounds) >> 2;\n    data.scale = scale;\n\n    data.format = EMPWorldWind.constants.MultiPointRenderType.GEOJSON;\n    data.pixelHeight = this.worldWindow.canvas.clientHeight;\n    data.pixelWidth = this.worldWindow.canvas.clientWidth;\n    data.fontInfo = EMPWorldWind.utils.getFontInfo(\"arial\", 10, \"bold\");\n\n    emp.util.each(features, function(feature) {\n      var i,\n        modifiers,\n        positions = \"\";\n\n      // Get the correct modifiers\n      modifiers = processModifiers.call(this, feature);\n\n      // Generate position string\n      featureCoords = feature.data.coordinates.join().split(\",\");\n      for (i = 0; i < featureCoords.length; i += 2) {\n        positions += featureCoords[i] + \",\" + featureCoords[i + 1] + \" \";\n      }\n      positions = positions.trim();\n      modifiers[armyc2.c2sd.renderer.utilities.MilStdAttributes.GeoJSONFormat] = 1; // 0 for string geojson, 1 for object geojson\n      var batchObject = {};\n      batchObject.id = feature.coreId;\n      batchObject.name = feature.name;\n      batchObject.description = unescape(feature.description);\n      batchObject.symbolID = feature.symbolCode;\n      batchObject.scale = scale; //scale;\n      batchObject.bbox = data.bbox;\n      batchObject.modifiers = modifiers;\n      batchObject.format = EMPWorldWind.constants.MultiPointRenderType.GEOJSON;\n      batchObject.symstd = 1; //TODO remove this hard coding of symstd    1;//1=2525C, 0=2525Bch2\n      batchObject.fontInfo = EMPWorldWind.utils.getFontInfo(\"arial\", 10, \"bold\");\n      batchObject.altMode = WorldWind.CLAMP_TO_GROUND;\n      batchObject.points = positions;\n      data.batch.push(batchObject);\n\n    }.bind(this));\n\n    // Call sec renderer worker\n    if (this.secRendererWorker.lastSelected === EMPWorldWind.constants.RendererWorker.B) {\n      this.secRendererWorker.A.postMessage(data);\n      this.secRendererWorker.lastSelected = EMPWorldWind.constants.RendererWorker.A;\n    } else {\n      this.secRendererWorker.B.postMessage(data);\n      this.secRendererWorker.lastSelected = EMPWorldWind.constants.RendererWorker.B;\n    }\n    // TODO remove empty array return, it is a holdover from before using web workers\n    return [];\n  }\n\n\n  /**\n   * Requires access to the current scope ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   */\n  function processModifiers(feature) {\n    var modifiers, enhancedModifiers, override, lowRangeMode, showLabels;\n\n    lowRangeMode = feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    if (feature.data.type === \"Point\") {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        this.state.labelStyles, // Single-point shows symbols based on settings\n        this.state.pixelSize);\n\n      // Show labels conditionally\n      showLabels = (this.state.labelStyles.CN === true) && lowRangeMode;\n    } else {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        EMPWorldWind.constants.AllLabels, // Multi-point always shows symbols\n        this.state.pixelSize);\n\n      // TODO apply some altitude filtering\n      // Always show labels\n      showLabels = true;\n    }\n\n    modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(modifiers, showLabels);\n    enhancedModifiers = EMPWorldWind.utils.milstd.checkForRequiredModifiers(feature);\n\n    for (override in enhancedModifiers) {\n      if (enhancedModifiers.hasOwnProperty(override)) {\n        modifiers[override] = enhancedModifiers[override];\n      }\n    }\n\n    return modifiers;\n  }\n\n  /**\n   * Requires access to the current scope.\n   * ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceShape[]}\n   */\n  function constructMilStdSymbol(feature, selectionStyle) {\n    var modifiers, shapes = [];\n\n    if (feature.data.type === \"Point\") {\n      modifiers = processModifiers.call(this, feature);\n      shapes.push(_constructSinglePointMilStdSymbol.call(this, feature, modifiers, selectionStyle));\n    } else if (feature.data.type === \"LineString\") {\n      shapes = shapes.concat(_constructMultiPointMilStdFeature.call(this, [feature]));\n    } else {\n      // TODO alert the user more gracefully that the type is unhandled\n      window.console.error(\"Unhandled feature type: \" + feature.data.type + \" in EMPWorldWind\");\n    }\n\n    return shapes;\n  }\n\n  /**\n   * Async function\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {PlotFeatureCB} callback\n   * @this EMPWorldWind.Map\n   */\n  function asyncPlotKMLFeature(feature, callback) {\n    var url, kmlFilePromise, kmlLayer, wwFeature,\n      rc = {\n        success: false\n      };\n\n    // Convert the kml string to a data url\n    url = \"data:text/xml,\" + encodeURIComponent(feature.data);\n\n    // Build the KML file promise\n    kmlFilePromise = new WorldWind.KmlFile(url);\n    kmlFilePromise\n      .then(function(kmlFile) {\n        // Construct the KML layer to hold the document\n        kmlLayer = new WorldWind.RenderableLayer(feature.coreId);\n\n        // Add the KML layer to the map\n        kmlLayer.addRenderable(kmlFile);\n        this.worldWindow.addLayer(kmlLayer);\n\n        // Use the standard data holder to keep track of the layer\n        wwFeature = new EMPWorldWind.data.EmpFeature(feature);\n        wwFeature.addShapes(kmlLayer); // This isn't a WW primitive but use it as if it was\n\n        // Record the layer so we can remove/modify it later\n        this.layers[feature.coreId] = kmlLayer;\n\n        // Configure the callback args\n        rc.success = true;\n        rc.feature = wwFeature;\n\n        // Fire the callback\n        callback(rc);\n      }.bind(this));\n  }\n\n  return {\n    /**\n     * Creates a new EMPWorldWind feature and associated WorldWind features from an EMP feature and adds it to the map\n     *\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback Callback to be invoked on completion\n     * @this EMPWorldWind.Map\n     */\n    plotFeature: function(empFeature, callback) {\n      var wwFeature, layer, buildShapes, shapes;\n\n      var rc = {\n        message: \"\",\n        success: true,\n        feature: undefined\n      };\n\n      switch (empFeature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          buildShapes = constructMilStdSymbol.bind(this);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructPlacemark;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructText;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.KML:\n          // KML is not supported as native primitives in WorldWind\n          // TODO KML selection, not sure how to support it or represent it\n          return asyncPlotKMLFeature.call(this, empFeature, callback);\n        default:\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      }\n\n      // Check if we have a builder for standard primitives\n      if (!rc.success) {\n        callback(rc);\n        return;\n      }\n      // construct the feature\n      wwFeature = new EMPWorldWind.data.EmpFeature(empFeature);\n      wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n      empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      empFeature.range = this.worldWindow.navigator.range;\n      // Add the feature to the layer\n      layer = this.getLayer(empFeature.parentCoreId);\n      // Build the primitives\n      // next call is  asynchronized for the case of mil std multipoints so shapes is initially an empty aray. (SEC renderer worker)\n      shapes = buildShapes.call(this, empFeature, this.state.selectionStyle);\n      wwFeature.addShapes(shapes);\n      layer.addFeature(wwFeature);\n      // Configure the callback params\n      rc.feature = wwFeature;\n      rc.success = true;\n      // Fire the callback\n      callback(rc);\n    },\n    /**\n     * Updates a WorldWind Renderable object on the map and returns the updated objects in the response\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback\n     * @this EMPWorldWind.Map\n     */\n    updateFeature: function(wwFeature, empFeature, callback) {\n      var layer,\n        rc = {\n          success: true,\n          message: \"\",\n          feature: wwFeature\n        };\n\n      // Remove existing primitives from the map\n      if (empFeature.format !== emp3.api.enums.FeatureTypeEnum.KML) {\n        layer = this.getLayer(empFeature.parentCoreId);\n        empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n        layer.removeFeature(wwFeature);\n      } else {\n        // Handle KML\n        this.worldWindow.removeLayer(this.layers[empFeature.coreId]);\n      }\n\n      // Clear the primitives from the feature\n      wwFeature.clearShapes();\n\n      switch (empFeature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n          empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n          wwFeature.addShapes(constructMilStdSymbol.call(this, empFeature, this.state.selectionStyle));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructPlacemark.call(this, empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructText(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.KML:\n          // KML is not supported as native primitives in WorldWind\n          return asyncPlotKMLFeature.call(this, empFeature, callback);\n        default:\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      }\n\n      // Redraw the new shapes\n      if (rc.success) {\n        // tag empFeature with current range.\n        empFeature.range = this.worldWindow.navigator.range;\n        // Update the empFeature stored in the wwFeature\n        wwFeature.feature = empFeature;\n        wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n\n        // Update the layer\n        layer.addFeature(wwFeature);\n\n        // Setup the return\n        rc.feature = wwFeature;\n      }\n      callback(rc);\n    },\n    /**\n     *\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @this EMPWorldWind.Map\n     */\n    updateFeatureLabelStyle: function(wwFeature) {\n      var shapes,\n        empLayer = this.getLayer(wwFeature.feature.parentCoreId);\n\n      switch (wwFeature.feature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          empLayer.removeFeature(wwFeature);\n          wwFeature.clearShapes();\n          shapes = constructMilStdSymbol.call(this, wwFeature.feature, this.state.selectionStyle);\n          wwFeature.addShapes(shapes);\n          empLayer.addFeature(wwFeature);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n        default:\n        // do nothing\n      }\n    },\n\n    /**\n     * Requires access to the current scope.\n     * ie .bind .call .apply\n     *\n     * @param {emp.typeLibrary.Feature[]} features\n     */\n    redrawMilStdSymbols: function(features) {\n      // Process the modifiers\n      //modifiers = processModifiers.call(this, feature);\n      // Requires access to the WorldWindow navigator, bind to the current scope\n      _constructMultiPointMilStdFeature.call(this, features);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * Throttles a function to a restrict the number of calls to it to prevent the engine from locking up under heavy use\n * @param {function} fn callback to throttle\n * @param {number} [threshold=20]\n * @param {context} scope\n * @returns {Function}\n */\nEMPWorldWind.eventHandlers.throttle = function(fn, threshold, scope) {\n  threshold = threshold || 20; // 20 ms throttle\n  var last, deferTimer;\n\n  return function() {\n    var context = scope || this;\n\n    var now = +new Date,\n      args = arguments;\n    if (last && now < last + threshold) {\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function() {\n        last = now;\n        fn.apply(context, args);\n      }, threshold);\n    }\n    else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n};\n\n/**\n * Notifies the map the view has been updated\n *\n * NOTE: The altitude, latitude, and longitude for the returned view may not be accurate as they are still based on\n * the navigator which is based on the lookAt location.\n *\n * @param {emp3.api.enums.CameraEventEnum} [viewEventType]\n * @this EMPWorldWind.Map\n */\nEMPWorldWind.eventHandlers.notifyViewChange = function(viewEventType) {\n  var bounds = this.getBounds();\n\n  var view = {\n    range: this.worldWindow.navigator.range,\n    tilt: this.worldWindow.navigator.tilt,\n    roll: this.worldWindow.navigator.roll,\n    heading: this.worldWindow.navigator.heading,\n    altitude: this.worldWindow.navigator.range, // TODO this is not correct, just an approximation until camera support\n    location: {\n      lat: this.worldWindow.navigator.lookAtLocation.latitude,\n      lon: this.worldWindow.navigator.lookAtLocation.longitude\n    },\n    bounds: bounds\n  };\n\n  var lookAt = {\n    range: this.worldWindow.navigator.range,\n    tilt: this.worldWindow.navigator.tilt,\n    heading: this.worldWindow.navigator.heading,\n    altitude: this.worldWindow.navigator.lookAtLocation.altitude || 0,\n    latitude: this.worldWindow.navigator.lookAtLocation.latitude,\n    longitude: this.worldWindow.navigator.lookAtLocation.longitude\n  };\n\n  //optimization . isMapMoving uses an epsilon to reduce the calls to triggerRenderUpdate function.\n  if (viewEventType === emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED) {\n    // set last navigator only when the camera stop moving.\n    this.lastNavigator.range = this.worldWindow.navigator.range;\n    this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n    this.lastNavigator.roll = this.worldWindow.navigator.roll;\n    this.lastNavigator.heading = this.worldWindow.navigator.heading;\n    this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n    EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  } else if (this.isMapMoving()) {\n    this.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n    EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  }\n\n  this.empMapInstance.eventing.ViewChange(view, lookAt, viewEventType);\n  this.bounds = bounds;\n};\n\n/**\n * Notify the that a re-render of the MilStd graphics is required based off of a delta from the last time the renderer\n * was called. This may trigger based on altitude delta or distance delta.\n * @this EMPWorldWind.Map\n */\nEMPWorldWind.eventHandlers.triggerRenderUpdate = function() {\n  var featuresToRedraw = [];\n  // Don't render until the map has stopped being dragged\n  if (this.state.dragging) {\n    return;\n  }\n\n  this.state.lastRender.bounds = this.getBounds();\n  this.state.lastRender.altitude = this.worldWindow.navigator.range;\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleMidOrLowRange(feature) {\n    feature.isHighAltitudeRangeImage = false;\n    feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.singlePointAltitudeRangeChanged = false;\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleHighRange(feature) {\n    feature.isHighAltitudeRangeImage = true;\n    //  dot image based on affiliation\n    feature.shapes[0].attributes._imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.feature.symbolCode);\n    feature.shapes[0].highlightAttributes._imageSource = feature.shapes[0].attributes._imageSource;\n    feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.singlePointAltitudeRangeChanged = false;\n  }\n\n  /**\n   * @param features\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleMultiPoint(features) {\n    //if (this.isMilStdMultiPointShapeInViewRegion(feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON3) ||\n    //feature.feature.wasClipped)) {\n    // optimization - update feature only if inside view region and  (range outside range epsilon or was clipped)\n    this.throttleAddMultiPointRedraws.call(this, features);\n    ////EMPWorldWind.editors.EditorController.redrawMilStdSymbols.call(this,features);\n    //}\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleSinglePoint(feature) {\n    var callRenderer = false;\n    feature.singlePointAltitudeRangeChanged = feature.singlePointAltitudeRangeMode !== this.singlePointAltitudeRangeMode;\n\n    if (feature.singlePointAltitudeRangeChanged) {\n      if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE) && (this.iconLabelOption !== 'none') ||\n        this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) {\n        callRenderer = true;\n        _handleMidOrLowRange.call(this, feature);\n      } else if (this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n        _handleHighRange.call(this, feature);\n      }\n    }\n\n    // Redraw if necessary\n    if (callRenderer) {\n      this.plotFeature(feature);\n    }\n  }\n\n  emp.util.each(Object.keys(this.features), function(featureId) {\n    var feature = this.features[featureId];\n\n    if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n      feature.feature.data.type === \"LineString\") {\n      if (this.isMilStdMultiPointShapeInViewRegion(feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON1) ||\n        feature.feature.wasClipped)) {\n        featuresToRedraw.push(feature.feature);\n      }\n    } else if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n      feature.feature.data.type === \"Point\") {\n      // Optimization required\n      _handleSinglePoint.call(this, feature);\n    }\n  }.bind(this));\n\n  if (featuresToRedraw.length > 0) {\n    _handleMultiPoint.call(this, featuresToRedraw);\n  }\n\n  this.worldWindow.redraw();\n};\n\n/**\n *\n * @param mouseEvent\n * @param empEventingArgs\n */\nEMPWorldWind.eventHandlers.extractFeatureFromEvent = function(mouseEvent, empEventingArgs) {\n  var obj, i,\n    pickList = this.worldWindow.pick(this.worldWindow.canvasCoordinates(mouseEvent.clientX, mouseEvent.clientY)),\n    len = pickList.objects.length;\n\n  // Reverse down the list of features to get the topmost first (useful when editing)\n  for (i = len - 1; i >= 0; i--) {\n    obj = pickList.objects[i];\n    if (!obj.isTerrain) {\n      if (obj.userObject.userProperties && obj.userObject.userProperties.id) {\n        empEventingArgs.coreId = obj.userObject.userProperties.id;\n        empEventingArgs.target = \"feature\";\n        break;\n      }\n    }\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent}\n * @typedef {Object} MouseEvent\n */\n\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent}\n * @typedef {Object} WheelEvent\n */\n\n/**\n * Mouse event handlers\n */\nEMPWorldWind.eventHandlers.mouse = (function() {\n  var throttleTime = 50; // 50ms\n\n  /**\n   * Sends a message to EMP Pointer eventing handler\n   */\n  var _notifyEMPPointing = EMPWorldWind.eventHandlers.throttle(function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n  }, throttleTime);\n\n  /**\n   * Sends a message to EMP that the view has changed\n   */\n  var _notifyEMPViewChanged = EMPWorldWind.eventHandlers.throttle(function(state) {\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, state);\n  }, throttleTime);\n\n  /**\n   * Returns true if the location and buttons pressed are identical\n   * @returns {boolean} True if the events are the same\n   * @private\n   */\n  var _isDuplicateEvent = function(a, b) {\n    if (!a || !b) {\n      return false;\n    }\n\n    return a.clientX === b.clientX &&\n      a.clientY === b.clientY &&\n      a.buttons === b.buttons;\n  };\n\n  return {\n    /**\n     * @param {MouseEvent} event\n     * @this EMPWorldWind.Map\n     */\n    click: function(event) {\n      var clickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      clickEvent.type = emp.typeLibrary.Pointer.EventType.SINGLE_CLICK;\n\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, clickEvent);\n      this.empMapInstance.eventing.Pointer(clickEvent);\n    },\n    /**\n     * Note: Double-click is not duplicated in PointerEvents\n     * @param {MouseEvent} event\n     * @this EMPWorldWind.Map\n     */\n    dblclick: function(event) {\n      var dblClickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      dblClickEvent.type = emp.typeLibrary.Pointer.EventType.DBL_CLICK;\n\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, dblClickEvent);\n\n      this.empMapInstance.eventing.Pointer(dblClickEvent);\n    },\n    /**\n     *\n     * @param {WheelEvent} event\n     * @this EMPWorldWind.Map\n     */\n    wheel: function(event) {\n      // Handle different browser wheel values\n      var deltaY = event.wheelDeltaY /* Chrome */ || -event.deltaY /* Firefox */ || 0;\n\n      if (deltaY < 0 && this.worldWindow.navigator.range > EMPWorldWind.constants.view.MAX_HEIGHT) {\n        this.worldWindow.navigator.range = EMPWorldWind.constants.view.MAX_HEIGHT;\n        event.preventDefault();\n      }\n\n      var preventDefaultLockStates = [\n        emp3.api.enums.MapMotionLockEnum.NO_MOTION,\n        emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN,\n        emp3.api.enums.MapMotionLockEnum.NO_ZOOM\n      ];\n\n      if (preventDefaultLockStates.includes(this.state.lockState)) {\n        event.preventDefault();\n      }\n\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n    },\n    /**\n     * Wrapper for mousedown\n     * @see EMPWorldWind.eventHandlers.mouse.mousedown\n     * @this EMPWorldWind.Map\n     */\n    mousedown: function(event) {\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (_isDuplicateEvent(event, this.state.lastInteractionEvent)) {\n        return;\n      } else { // Store the event\n        this.state.lastInteractionEvent = event;\n      }\n\n      var mousedownEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n      mousedownEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mousedownEvent);\n\n      this.empMapInstance.eventing.Pointer(mousedownEvent);\n    },\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mouseup\n     * @this EMPWorldWind.Map\n     */\n    mouseup: function(event) {\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (_isDuplicateEvent(event, this.state.lastInteractionEvent)) {\n        return;\n      } else { // Store the event\n        this.state.lastInteractionEvent = event;\n      }\n\n      var mouseupEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n      mouseupEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mouseupEvent);\n\n      if (this.state.dragging) {\n        this.state.dragging = false;\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      }\n\n      this.empMapInstance.eventing.Pointer(mouseupEvent);\n    },\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mousemove\n     * @this EMPWorldWind.Map\n     */\n    mousemove: function(event) {\n      /**\n       * Detects the location for auto-panning in smartMotion mode\n       * @private\n       */\n      var _handleSmartMotion = function() {\n        var smartAreaBuffer = 0.05,\n          element = event.srcElement || event.originalTarget,\n          elementBounds = element.getBoundingClientRect(),\n          pan = {\n            up: false,\n            down: false,\n            left: false,\n            right: false\n          };\n\n        // Pan left or right\n        pan.left = event.offsetX < elementBounds.width * smartAreaBuffer;\n        pan.right = event.offsetX > elementBounds.width - (elementBounds.width * smartAreaBuffer);\n\n        // Pan up or down\n        pan.up = event.offsetY < elementBounds.height * smartAreaBuffer;\n        pan.down = event.offsetY > elementBounds.height - (elementBounds.height * smartAreaBuffer);\n\n        if (pan.up || pan.down || pan.left || pan.right) {\n          this.spinGlobe(pan);\n        } else {\n          this.spinGlobe(false);\n        }\n      }.bind(this);\n\n      /**\n       * Checks if the event needs to be cancelled based on the lock state\n       * @private\n       */\n      var _checkForPreventDefault = function() {\n        var preventDefault = [\n          emp3.api.enums.MapMotionLockEnum.NO_MOTION,\n          emp3.api.enums.MapMotionLockEnum.NO_PAN,\n          emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN,\n          emp3.api.enums.MapMotionLockEnum.SMART_MOTION\n        ];\n\n        if (preventDefault.includes(this.state.lockState)) {\n          event.preventDefault();\n        }\n      }.bind(this);\n\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (_isDuplicateEvent(event, this.state.lastInteractionEvent)) {\n        return;\n      } else { // Store the event\n        this.state.lastInteractionEvent = event;\n      }\n\n      // Check if we prevent default\n      _checkForPreventDefault();\n\n      // If we are in a smartMotion state handle it\n      if (this.state.lockState === emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        _handleSmartMotion();\n      }\n\n      // Update EMP (throttled)\n      _notifyEMPPointing.call(this, event);\n\n      // If right or left mouse or both notify the view must have changed\n      if (event.buttons !== 0 && event.buttons < 3) {\n        this.state.dragging = true;\n        _notifyEMPViewChanged.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n      } else {\n        this.state.dragging = false;\n      }\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch}\n * @typedef {object} Touch\n */\n\n/**\n * @typedef {object} TouchEvent\n * @property {Touch[]} touches\n */\n\n/**\n * Touch event handlers\n */\nEMPWorldWind.eventHandlers.touch = (function() {\n\n\n  return {\n    /**\n     * Touch down event handler,\n     * Approximates mousedown\n     * @param {TouchEvent} event\n     * @this EMPWorldWind.Map\n     */\n    touchstart: function(event) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n\n      coords.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n      this.state.lastInteractionEvent = event;\n      this.empMapInstance.eventing.Pointer(coords);\n    },\n    /**\n     * Touch end event handler\n     * Approximates mouseup\n     * @this EMPWorldWind.Map\n     */\n    touchend: function(/*event*/) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent.touches[0]);\n\n      coords.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n      this.empMapInstance.eventing.Pointer(coords);\n    },\n    /**\n     * Touch cancel event handler, placeholder until it is needed\n     */\n    touchcancel: function(/*event*/) {\n      // Placeholder\n      // var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n      // window.console.debug(event, coords);\n    },\n    /**\n     * Touch move event handler\n     * @param {TouchEvent} event\n     * @this EMPWorldWind.Map\n     */\n    touchmove: function(event) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n      coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n      if (coords.lat !== undefined) {\n        this.empMapInstance.eventing.Pointer(coords);\n      }\n\n      // TODO check if map is locked or not before notifying view change\n      this.state.lastInteractionEvent = event;\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n/**\n * @typedef {object} WWDragEvent\n */\n\n\n/**\n * The event handlers listed here are not standard DOM drag event handlers. They represent notification functions\n * to alert the core to different drag states.\n *\n * @see WorldWind.DragRecognizer\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.drag = (function() {\n\n\n  return {\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    began: function(/*event*/) {\n      //window.console.debug(event);\n    },\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    changed: function(/*event*/) {\n      //window.console.debug(event);\n    },\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    ended: function(/*event*/) {\n      //window.console.debug(event);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events}\n * @typedef {object} PointerEvent\n */\n\n/**\n * Pointer events are currently aliases for their mouseevent counterparts\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.pointer = (function() {\n\n\n  return {\n    /**\n     * Wrapper for mousedown\n     * @see EMPWorldWind.eventHandlers.mouse.mousedown\n     * @this EMPWorldWind.Map\n     */\n    pointerdown: EMPWorldWind.eventHandlers.mouse.mousedown,\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mouseup\n     * @this EMPWorldWind.Map\n     */\n    pointerup: EMPWorldWind.eventHandlers.mouse.mouseup,\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mousemove\n     * @this EMPWorldWind.Map\n     */\n    pointermove: EMPWorldWind.eventHandlers.mouse.mousemove\n  };\n}());\n"]}