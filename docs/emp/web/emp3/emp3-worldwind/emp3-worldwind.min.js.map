{"version":3,"sources":["../../../src/mapengine/worldwind/worldwind-map-engine.js","../../../src/mapengine/worldwind/EMPWorldWind.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpWMSLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpKMLLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpFeature.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.constants.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.utils.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.primitiveBuilders.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.EditorController.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.mouse.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.touch.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.drag.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.pointer.js"],"names":["EMPWorldWind","window","emp","engineDefs","worldWindMapEngine","args","empMapInstance","mapInstance","empWorldWind","engineInterface","map","createEngineTemplate","mapEngineExposed","implementation","displayName","version","capabilities","mapType","type3D","type2_5D","formats","GEOJSON_BASIC","plot","draw","edit","GEOJSON_FULL","WMS","version_1_1","version_1_3","elevationData","KML_BASIC","KML_COMPLEX","IMAGE","MILSTD","version2525B","version2525C","AIRSPACE","AOI","settings","milstd","iconSize","labelOption","requirements","wmsCapabilities","projection","flat","initialize","succeed","empWorldWindInstance","engineDirect","name","ref","eventing","StatusChange","status","states","READY","err","console","error","fail","MAP_INSTANCE_INIT_FAILED","view","set","transaction","altitude","bottomLeft","topRight","feature","bufferScale","t1","t2","toRad","Math","PI","items","globalType","location","latitude","lat","longitude","lon","tilt","roll","heading","bounds","west","south","east","north","pow","sin","WorldWind","EARTH_RADIUS","asin","sqrt","cos","format","emp3","api","enums","FeatureTypeEnum","GEO_CIRCLE","properties","radius","GEO_ELLIPSE","max","semiMajor","semiMinor","GEO_RECTANGLE","width","height","GEO_SQUARE","GEO_ACM","coordinates","failures","push","animate","pause","animateCB","getCenter","getBounds","run","eventHandlers","notifyViewChange","call","CameraEventEnum","CAMERA_MOTION_STOPPED","CAMERA_IN_MOTION","centerOnLocation","lookAt","range","wms","add","util","each","addWMS","remove","removeWMS","itemsCount","length","plotFeature","featureCount","cbArgs","success","typeLibrary","Error","bind","this","rc","unplotFeature","message","mil2525","icon","labels","setLabelStyle","getLatLonFromXY","i","item","pickPoint","Vec2","x","y","terrainObject","worldWindow","pickTerrain","position","undefined","getXYFromLatLon","bResult","pointVec3","Vec3","globe","computePointFromPosition","screenVec3","drawContext","navigatorState","project","z","visibility","featureId","features","setVisible","visible","refresh","config","bRangeChanged","configHandlers","brightness","value","setContrast","milStdIconLabels","renderingOptimization","utils","defined","enableRenderingOptimization","midDistanceThreshold","singlePointAltitudeRanges","mid","farDistanceThreshold","high","selectionScale","setSelectionScale","selectionColor","setSelectionColor","setIconSize","prop","hasOwnProperty","singlePointAltitudeRangeMode","getSinglePointAltitudeRangeMode","navigator","navigation","enable","setLockState","selection","selectFeatures","failed","capture","screenshot","dataUrl","state","destroy","shutdown","kmllayer","_complete","coreId","id","kmlLayer","addKML","removeKML","wmts","itemCount","addWmtsToMap","count","removeWmtsFromMap","isV2Core","Map","wwd","layers","rootLayer","services","pixelSize","drawing","editing","dragging","lastInteractionEvent","lockState","MapMotionLockEnum","UNLOCKED","lastRender","selectionStyle","scale","lineColor","fillColor","autoPanning","String","constants","PAN_STATE","HALTED","step","up","down","left","right","IconSize","medium","labelStyles","V","L","S","AA","AB","AC","H","M","T","T1","CN","C","F","G","H1","H2","J","K","N","P","W","W1","X","Y","Z","SinglePointAltitudeRangeMode","LOW_RANGE","empSelections","optimizationMapMoveEpsilon","EPSILON5","lastNavigator","shapesInViewArea","secRendererWorker","A","B","lastSelected","RendererWorker","throttleAddMultiPointRedraws","prototype","_redrawAllFeatures","Object","keys","featureKey","_createContrastLayers","blackContrastLayer","SurfaceSector","Sector","FULL_SPHERE","attributes","interiorColor","Color","drawOutline","whiteContrastLayer","contrastLayer","RenderableLayer","pickEnabled","addLayer","addRenderable","_addEventHandlers","eventClass","eventHandler","addEventListener","_setInitialExtent","extent","alt","centerLat","centerLon","isNaN","Location","greatCircleDistance","_applyConfigProperties","far","_initializeWebWorkers","Worker","configuration","baseUrl","onerror","armyc2","c2sd","renderer","utilities","ErrorLogger","LogException","onMessage","e","rendererData","data","result","rendererItem","wwFeature","shapes","geojson","componentFeature","lineCount","strokeWidth","strokeWeight","geometry","type","subGeoJSON","editors","primitiveBuilders","constructSurfacePolylineFromGeoJSON","constructTextFromGeoJSON","constructSurfacePolygonFromGeoJSON","removeFeature","clearShapes","addShapes","addFeature","selected","isFeatureSelected","redraw","onmessage","EmpLayer","mapInstanceId","layer","goToAnimator","GoToAnimator","dragRecognizer","DragRecognizer","canvas","event","drag","lookAtLocation","helpers","copyObject","configProperties","MultiPointRateLimit","EditorController","redrawMilStdSymbols","_getLocation","Position","_goToCompleteCallback","travelTime","globeMoveTime","goTo","_completeLookAtMotion","callback","_callback","EmpFeature","updateFeature","_handleKMLFeature","removeLayer","_handleDefaultFeature","removeFeatureSelection","selectedFeature","select","storeFeatureSelection","getLayer","layerExists","wmsLayer","EmpWMSLayer","kml","cb","kmlFilePromise","EmpKMLLayer","KmlFile","url","then","kmlFile","kmlRenderableLayer","catch","Boolean","getFeatureSelection","empWMTS","xhr","async","_createWMTSLayer","xmlDom","wmtsCapabilities","wmtsLayerCapabilities","wmtsConfig","WmtsCapabilities","WmtsLayer","formLayerConfiguration","tileMatrixSet","contents","xhrSuccess","wmtsLayer","responseXML","xhrError","statusText","XMLHttpRequest","open","onload","send","getSelections","isFeaturePresent","isMultiPointPresent","multiPointCollection","getMultiPoint","storeMultiPoint","multiPoint","removeMultiPoint","isAirspacePresent","airspaceCollection","getAirspace","storeAirspace","airspace","removeAirspace","getSinglePoints","singlePointCollection","isSinglePointPresent","getSinglePoint","storeSinglePoint","singlePoint","removeSinglePoint","getSinglePointCount","isSinglePointIdOnHoldPresent","singlePointCollectionIdOnHold","getSinglePointIdOnHold","singlePointCollectionOnHold","storeSinglePointIdOnHold","singlePointId","removeSinglePointIdOnHold","getSinglePointsIdOnHold","getSinglePointsIdOnHoldCount","styles","style","includes","updateFeatureLabelStyle","triggerRenderUpdate","contrast","renderables","WHITE_CONTRAST","BLACK_CONTRAST","lock","SMART_MOTION","spinGlobe","pan","_getVerticalPan","_getHorizontalPan","_cleanPanArgs","_allowPan","_notifyEMPPointer","coords","getEventCoordinates","Pointer","EventType","MOVE","_panMap","vertical","horizontal","goToPosition","PANNING","COMPLETE","cancel","assign","NO_PANNING","drawFrame","toDataURL","viewport","linearLocation","isMapMoving","equalsEpsilon","EPSILON1","pickShapesInViewRegion","canvasCoordinates","boundRectangle","Rectangle","pickShapesInRegion","isMilStdMultiPointShapeInViewRegion","empFeature","p","coordinate","_boundsContainsPoint","color","_validateColor","_prefixColorString","startsWith","size","stateChanged","overlayName","_layer","defineProperty","enumerable","_featureIsPresent","_getFeature","shape","addFeatures","removeFeatures","removeRenderable","removeFeatureById","layerNames","_wms","activeLayers","join","useProxy","global","urlProxy","service","sector","levelZeroDelta","numLevels","timeString","_wmsLayer","WmsLayer","_buildURL","_id","_altitudeMode","CLAMP_TO_GROUND","get","altMode","shapesCount","altitudeMode","_selected","highlighted","primitives","Array","isArray","userProperties","primitive","enabled","MAX_HEIGHT","globeWasMoving","globeWasZooming","extentBufferFactor","USE_DATA_SOURCE","verySmall","tiny","small","large","extraLarge","METERS_PER_INCH","SCALE_LINE_LENGTH","propertyDefaults","FILL_COLOR_HEX","LINE_COLOR_HEX","LINE_WIDTH","selectionProperties","COLOR_HEX","WIDTH","SCALE","FeatureType","ENTITY","RENDERABLE","PRIMITIVE","GROUND_PRIMITIVE","DATA_SOURCE","COMPOUND_ENTITY","PRIMITIVE_COLLECTION","LayerType","OVERLAY_LAYER","WMS_LAYER","IMAGE_LAYER","BING_LAYER","ARCGIS_93_REST_LAYER","OSM_LAYER","TMS_LAYER","TERRAIN_LAYER","WMTS_LAYER","EntityType","BILLBOARD","BOX","CORRIDOR","CYLINDER","DESCRIPTION","ELLIPSE","ELLIPSOID","LABEL","MODEL","ORIENTATION","PATH","POLYGON","POLYLINE","POLYLINE_VOLUME","POSITION","RECTANGLE","VIEW_FROM","WALL","KML","MultiPointRenderType","JSON","GEOJSON","DATA_URL","CANVAS","CANVAS_LABEL_ONLY","SVG","SVG_LABEL_ONLY","MID_RANGE","HIGHEST_RANGE","D","LabelStyle","REQUIRED_LABELS","COMMON_LABELS","ALL_LABELS","AllLabels","RendererSettings","standard","Symbology_2525Bch2_USAS_13_14","Symbology_2525C","modifierLookup","QUANTITY","REDUCED_OR_REINFORCED","STAFF_COMMENTS","ADDITIONAL_INFO_1","ADDITIONAL_INFO_2","ADDITIONAL_INFO_3","EVALUATION_RATING","COMBAT_EFFECTIVENESS","SIGNATURE_EQUIPMENT","HIGHER_FORMATION","HOSTILE","IFF_SIF","DIRECTION_OF_MOVEMENT","OFFSET_INDICATOR","UNIQUE_DESIGNATOR_1","UNIQUE_DESIGNATOR_2","EQUIPMENT_TYPE","DATE_TIME_GROUP","DATE_TIME_GROUP_2","ALTITUDE_DEPTH","LOCATION","SPEED","SPECIAL_C2_HEADQUARTERS","DISTANCE","AZIMUTH","FILL_COLOR","LINE_COLOR","TEXT_COLOR","X_OFFSET","X_UNITS","Y_OFFSET","Y_UNITS","NAME","STANDARD","highAltitudeRangeImage","highRangeImageRed","btoa","highRangeImageBlue","highRangeImageGreen","highRangeImageYellow","clientX","clientY","screenX","screenY","updateModifierLabels","iconLabels","iconPixelSize","mod","modifiedModifiers","property","convertModifierStringTo2525","modifiers","showModLabels","standardModifiers","sModifier","modValue","parse","stringify","Modifiers","convertSymbolStandardToRendererFormat","checkForRequiredModifiers","symbolCode","oAM","oAN","basicSymbolCode","symbolDef","lonDistance","overrides","SymbolUtilities","getBasicSymbolID","checkSymbolStandard","SymbolDefTable","getSymbolDef","distance","azimuth","drawCategory","DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE","slice","DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE","splice","newVal","DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE","DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_LINE","coord0","coord1","pointCartographic0","pointCartographic1","dist","modifiersCopy","toLowerCase","featureMilStdVersionType","MILSTD_2525C","MILSTD_2525B","indexOf","log","_hex6ToRGBA","hex","replace","r","g","b","parseInt","substring","red","green","blue","alpha","_hex8ToRGBA","a","hexToRGBA","normalize","newHex","normalizeRGBAColor","normalColor","toString","boundsWidth","boundsHeight","selectHighAltitudeRangeImage","affiliationLetter","highScaleImageYellow","CameraAltitude","getFontInfo","_ModifierFont","_ModifierFontStyle","measurements","RendererUtilities","measureFont","fn","delay","context","queue","timer","processQueue","index","shift","arguments","apply","clearInterval","limited","setInterval","relativeEpsilon","absoluteEpsilon","defaultValue","absDiff","abs","EPSILON2","EPSILON3","EPSILON4","EPSILON6","EPSILON7","EPSILON8","EPSILON9","EPSILON10","EPSILON11","EPSILON12","EPSILON13","EPSILON14","EPSILON15","EPSILON16","EPSILON17","EPSILON18","EPSILON19","EPSILON20","GRAVITATIONALPARAMETER","SOLAR_RADIUS","LUNAR_RADIUS","SIXTY_FOUR_KILOBYTES","sign","signNotZero","builderMap","constructAirControlMeasure","primitivePolygon","boundaries","highlightAttributes","selectedFillColor","len","ShapeAttributes","YELLOW","maxAlt","Polygon","ABSOLUTE","extrude","constructMilStdSymbol","_constructSinglePointMilStdSymbol","placemark","imageInfo","imageCenter","imageBounds","imageOffset","selectedImage","selectedModifiers","eyeDistanceScaling","PlacemarkAttributes","drawLeaderLine","leaderLineAttributes","outlineColor","BLACK","imageScale","imageSource","Offset","OFFSET_FRACTION","imageColor","WHITE","substr","MilStdIconRenderer","Render","getCenterPoint","getImageBounds","toDataUrl","LINECOLOR","FILLCOLOR","Placemark","alwaysOnTop","processModifiers","concat","constructMultiPointMilStdFeatures","constructSurfaceCircle","circlePrimitive","createShapeAttributes","SurfaceCircle","constructSurfaceEllipse","ellipsePrimitive","SurfaceEllipse","constructSurfacePolyline","pathPrimitive","locations","SurfacePolyline","constructPlacemark","label","constructSurfacePolygon","polygonPrimitive","boundaryLen","j","numBounds","subBoundary","SurfacePolygon","constructSurfaceRectangle","rectPrimitive","SurfaceRectangle","constructText","textPrimitive","GeographicText","createTextAttributes","textColor","TextAttributes","offset","depthTest","labelStyle","fontColor","family","font","fontFamily","justification","horizontalAlignment","labelAlign","fontSize","_createTextAttributes","selectedLabelColor","_createPlacemarkAttributes","selectedLineColor","iconUrl","labelAttributes","_createSurfaceShapeAttributes","strokeStyle","strokeColor","drawInterior","lineWidth","outlineWidth","outlineStippleFactor","stippleFactor","outlineStipplePattern","stipplePattern","GEO_MIL_SYMBOL","GEO_POINT","GEO_TEXT","GEO_PATH","GEO_POLYGON","getPrimitiveBuilderForFeature","bbox","featureCoords","batch","pixelHeight","clientHeight","pixelWidth","clientWidth","fontInfo","batchObject","positions","split","trim","MilStdAttributes","GeoJSONFormat","description","unescape","symbolID","symstd","points","postMessage","enhancedModifiers","override","lowRangeMode","showLabels","geoJSON","polylinePrimitive","lineOpacity","selectedColor","asyncPlotKMLFeature","encodeURIComponent","primitiveBuilder","_handleMilStdUpdate","builder","_featureIsSame","oldfeature","newFeature","bCallRenderer","_handlePointUpdate","_handleDefaultUpdate","debug","throttle","threshold","scope","last","deferTimer","now","Date","clearTimeout","setTimeout","viewEventType","ViewChange","featuresToRedraw","_handleMidOrLowRange","isHighAltitudeRangeImage","singlePointAltitudeRangeChanged","_handleHighRange","_imageSource","_handleMultiPoint","_handleSinglePoint","iconLabelOption","wasClipped","extractFeatureFromEvent","mouseEvent","empEventingArgs","obj","pickList","pick","objects","isTerrain","userObject","target","mouse","throttleTime","_notifyEMPPointing","_notifyEMPViewChanged","_isDuplicateEvent","buttons","click","clickEvent","SINGLE_CLICK","dblclick","dblClickEvent","DBL_CLICK","wheel","deltaY","wheelDeltaY","preventDefault","preventDefaultLockStates","NO_MOTION","NO_ZOOM_NO_PAN","NO_ZOOM","mousedown","mousedownEvent","MOUSEDOWN","mouseup","mouseupEvent","MOUSEUP","mousemove","_handleSmartMotion","smartAreaBuffer","element","srcElement","originalTarget","elementBounds","getBoundingClientRect","offsetX","offsetY","_checkForPreventDefault","NO_PAN","touch","touchstart","touches","touchend","touchcancel","touchmove","began","changed","ended","pointer","pointerdown","pointerup","pointermove"],"mappings":"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","file":"emp3-worldwind.min.js","sourcesContent":["var EMPWorldWind = window.EMPWorldWind || {};\nvar emp = window.emp || {};\nemp.engineDefs = emp.engineDefs || {};\n\n\n/**\n * @classdesc EMP3 WorldWind Map Engine Interface\n *\n * @class Instantiates a WorldWind map for EMP\n * @param args\n * @returns {engineInterface}\n */\nemp.engineDefs.worldWindMapEngine = function(args) {\n\n  var empMapInstance = args.mapInstance;\n  /** @type EMPWorldWind.Map# */\n  var empWorldWind;\n\n  var engineInterface = emp.map.createEngineTemplate(),\n    mapEngineExposed = engineInterface;\n\n  engineInterface.implementation.displayName = \"WorldWind Map Engine\";\n  engineInterface.implementation.version = \"1.0.0\";\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.mapType.type2_5D = true;\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.draw = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.edit = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.edit = true;\n  engineInterface.capabilities.formats.WMS.version_1_1 = true;\n  engineInterface.capabilities.formats.WMS.version_1_3 = true;\n  engineInterface.capabilities.formats.WMS.elevationData = true;\n  engineInterface.capabilities.formats.KML_BASIC.plot = true;\n  engineInterface.capabilities.formats.KML_BASIC.draw = true;\n  engineInterface.capabilities.formats.KML_BASIC.edit = true;\n  engineInterface.capabilities.formats.KML_COMPLEX.plot = true;\n  engineInterface.capabilities.formats.IMAGE.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.edit = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.edit = true;\n  engineInterface.capabilities.formats.AIRSPACE.plot = true;\n  engineInterface.capabilities.formats.AIRSPACE.draw = true;\n  engineInterface.capabilities.formats.AIRSPACE.edit = true;\n  engineInterface.capabilities.formats.AOI.plot = true;\n  engineInterface.capabilities.formats.AOI.draw = true;\n  engineInterface.capabilities.formats.AOI.edit = true;\n  engineInterface.capabilities.settings.milstd.iconSize = true;\n  engineInterface.capabilities.settings.milstd.labelOption = true;\n  engineInterface.requirements.wmsCapabilities = true;\n  engineInterface.capabilities.projection.flat = false;\n\n  /**\n   * Initialization\n   * @param {EMPWorldWind.Map} empWorldWindInstance\n   */\n  engineInterface.initialize.succeed = function(empWorldWindInstance) {\n    // Add initialization code here\n    try {\n      empWorldWind = empWorldWindInstance;\n      empWorldWind.mapEngineExposed = mapEngineExposed;\n      emp.map.engineDirect = {name: \"worldwind\", ref: empWorldWind};\n\n      // Notify application that the map is ready to receive data\n      empMapInstance.eventing.StatusChange({\n        status: emp.map.states.READY\n      });\n    }\n    catch (err) {\n      window.console.error(\"Error initializing WorldWind \", err);\n    }\n  };\n\n  /**\n   * Indicates a failed loading\n   */\n  engineInterface.initialize.fail = function() {\n    empMapInstance.eventing.StatusChange({\n      status: emp.map.states.MAP_INSTANCE_INIT_FAILED\n    });\n  };\n\n  /**\n   * @todo drop this functionality into the map itself and expose a simpler call\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.set = function(transaction) {\n    var args, altitude, bottomLeft, topRight, feature, bufferScale,\n      t1, t2,\n      toRad = Math.PI / 180.0; // save a few divisions later\n\n    switch (transaction.items[0].globalType) {\n      case \"view\":\n        if (transaction.items[0].location) {\n          // Set camera\n          args = {\n            latitude: transaction.items[0].location.lat,\n            longitude: transaction.items[0].location.lon,\n            altitude: transaction.items[0].altitude,\n            tilt: transaction.items[0].tilt,\n            roll: transaction.items[0].roll,\n            heading: transaction.items[0].heading\n          };\n        }\n        else if (transaction.items[0].bounds) {\n          // Zoom to overlay\n\n          // Express lat/lon as radians\n          bottomLeft = {\n            lat: transaction.items[0].bounds.west * toRad,\n            lon: transaction.items[0].bounds.south * toRad\n          };\n\n          topRight = {\n            lat: transaction.items[0].bounds.east * toRad,\n            lon: transaction.items[0].bounds.north * toRad\n          };\n\n          t1 = Math.pow(Math.sin((topRight.lat - bottomLeft.lat) / 2), 2);\n          t2 = Math.pow(Math.sin((topRight.lon - bottomLeft.lon) / 2), 2);\n\n          // Haversine formula\n          // TODO see if we can replace this with WorldWind functionality\n          altitude = 2 * WorldWind.EARTH_RADIUS * Math.asin(Math.sqrt(t1 + Math.cos(topRight.lat) * Math.cos(bottomLeft.lat) * t2));\n\n          args = {\n            latitude: (transaction.items[0].bounds.north + transaction.items[0].bounds.south) / 2,\n            longitude: (transaction.items[0].bounds.east + transaction.items[0].bounds.west) / 2,\n            altitude: altitude,\n            tilt: 0,\n            roll: 0,\n            heading: 0\n          };\n        }\n        break;\n      case \"feature\":\n        bufferScale = 2.25; // Assume conic view from the camera\n        feature = transaction.items[0];\n        switch (feature.format) {\n          case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n            altitude = feature.properties.radius * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n            altitude = Math.max(feature.properties.semiMajor, feature.properties.semiMinor) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n            altitude = Math.max(feature.properties.width, feature.properties.height) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n            altitude = feature.properties.width * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO compute bounding box diagonal distance\n          default:\n            altitude = 10000; // Default to 10000m\n        }\n\n        args = {\n          latitude: transaction.items[0].coordinates[1],\n          longitude: transaction.items[0].coordinates[0],\n          altitude: altitude,\n          tilt: 0,\n          roll: 0,\n          heading: 0\n        };\n        break;\n      default:\n        transaction.failures.push(transaction.items[0]);\n    }\n\n    // Check if we are animating\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n\n        // If we animated update the returned values\n        transaction.items[0].location = {\n          lat: empWorldWind.getCenter().latitude,\n          lon: empWorldWind.getCenter().longitude\n        };\n        transaction.items[0].bounds = empWorldWind.getBounds();\n\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n\n    // Notify start of movement\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    empWorldWind.centerOnLocation(args);\n\n    // Set initial transaction return values, to be overwritten if the move is animated\n    transaction.items[0].location = {\n      lat: empWorldWind.getCenter().latitude,\n      lon: empWorldWind.getCenter().longitude\n    };\n    transaction.items[0].bounds = empWorldWind.getBounds();\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.lookAt.set = function(transaction) {\n    var args = {\n      latitude: transaction.items[0].latitude,\n      longitude: transaction.items[0].longitude,\n      altitude: transaction.items[0].altitude,\n      range: transaction.items[0].range,\n      tilt: transaction.items[0].tilt,\n      heading: transaction.items[0].heading\n    };\n\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n    empWorldWind.lookAt(args);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.add = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.addWMS(wms);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.remove = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.removeWMS(wms);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.add = function(transaction) {\n    var feature,\n      itemsCount = transaction.items.length;\n\n    // Pause the transaction\n    transaction.pause();\n\n    while (itemsCount) {\n      // Note pre-decrement\n      feature = transaction.items[--itemsCount];\n\n      empWorldWind.plotFeature(feature, function(featureCount, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error({\n            feature: cbArgs.feature\n          }));\n        }\n\n        // All items have been processed\n        if (featureCount === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemsCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.remove = function(transaction) {\n    var rc;\n\n    emp.util.each(transaction.items, function(feature) {\n\n      rc = empWorldWind.unplotFeature(feature);\n      if (!rc.success) {\n        transaction.fail(new emp.typeLibrary.Error({\n          message: rc.message\n        }));\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   * @deprecated\n   */\n  engineInterface.settings.mil2525.icon.labels.set = function(transaction) {\n    empWorldWind.setLabelStyle(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.getLatLonFromXY = function(transaction) {\n    for (var i = 0; i < transaction.items.length; i += 1)\n    {\n        var item = transaction.items[i];\n        var pickPoint = new WorldWind.Vec2(item.x, item.y);\n        var terrainObject = empWorldWind.worldWindow.pickTerrain(pickPoint).terrainObject();\n        item.lat = terrainObject ? terrainObject.position.latitude : undefined;\n        item.lon = terrainObject ? terrainObject.position.longitude : undefined;\n    }\n  };\n\n\n  engineInterface.view.getXYFromLatLon = function (transaction)\n  {\n      //try to traverse the items\n      //\n      var bResult = false;\n      for (var i = 0; i < transaction.items.length; i += 1)\n      {\n          var item = transaction.items[i];\n          // first convert geographic lat lon to cartesian\n          var pointVec3 = new WorldWind.Vec3(0,0,0);\n          empWorldWind.worldWindow.globe.computePointFromPosition (item.lat, item.lon, 0, pointVec3);\n          // from cartesian to screen point in WebGL screen coordinates, with the origin in\n          // the bottom-left corner and axes that extend up and to the right from the origin.\n          if (!pointVec3)\n          {\n            continue;\n          }\n          var screenVec3 = new WorldWind.Vec3(0,0,0);\n          bResult = empWorldWind.worldWindow.drawContext.navigatorState.project (pointVec3, screenVec3);\n          if (bResult)\n          {\n            item.x = screenVec3[0];\n            item.y = screenVec3[1];\n            item.z = screenVec3[2];\n          }\n          else\n          {\n            item.x = undefined;\n            item.y = undefined;\n            item.z = undefined;\n          }\n\n      }\n      //transaction.fail(failList);\n      return transaction;\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.visibility.set = function(transaction) {\n    emp.util.each(transaction.items, function(feature) {\n      if (feature.featureId in empWorldWind.features) {\n        empWorldWind.features[feature.featureId].setVisible(feature.visible);\n      }\n    });\n    empWorldWind.refresh();\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.map.config = function(transaction) {\n    var bRangeChanged;\n\n    var configHandlers = {\n      \"brightness\": function(value) {\n        empWorldWind.setContrast(value);\n      },\n      \"milStdIconLabels\": function(value) {\n        empWorldWind.setLabelStyle(value);\n      },\n      \"renderingOptimization\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.enableRenderingOptimization)) {\n          bRangeChanged = true;\n          empWorldWind.enableRenderingOptimization = value;\n        }\n      },\n      \"midDistanceThreshold\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.mid)) {\n          bRangeChanged = true;\n          empWorldWind.singlePointAltitudeRanges.mid = value;\n        }\n      },\n      \"farDistanceThreshold\": function(value) {\n        if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.high)) {\n          bRangeChanged = true;\n          empWorldWind.singlePointAltitudeRanges.high = value;\n          //empCesium.singlePointAltitudeRangeMode = cesiumEngine.utils.getSinglePointAltitudeRangeMode(empCesium.cameraAltitude, empCesium.singlePointAltitudeRanges);\n          //empCesium.processOnRangeChangeSinglePoints();\n        }\n      },\n      \"selectionScale\": function(value) {\n        empWorldWind.setSelectionScale(value);\n      },\n      \"selectionColor\": function(value) {\n        empWorldWind.setSelectionColor(value);\n      },\n      \"iconSize\": function(value) {\n        empWorldWind.setIconSize(value);\n      }\n    };\n\n    // Iterate through each transaction item, check for properties and apply them\n    emp.util.each(transaction.items, function(config) {\n      var prop, value;\n      for (prop in config) {\n        if (config.hasOwnProperty(prop)) {\n          // Skip meta data fields\n          if (prop === \"messageId\") {\n            continue;\n          }\n\n          // Extract the value\n          value = config[prop];\n\n          // Check if there is a handler for the property\n          if (configHandlers.hasOwnProperty(prop)) {\n            // Apply the change\n            configHandlers[prop](value);\n          } else {\n            transaction.fail(new emp.typeLibrary.Error({\n              message: 'Config property ' + prop + ' is not supported by this engine'\n            }));\n          }\n\n          if (bRangeChanged) {\n            empWorldWind.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(empWorldWind.worldWindow.navigator.range, empWorldWind.singlePointAltitudeRanges);\n            // force a render update when the altitude range changes\n            empWorldWind.refresh();\n          }\n        }\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.navigation.enable = function(transaction) {\n    empWorldWind.setLockState(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.selection.set = function(transaction) {\n    var rc = empWorldWind.selectFeatures(transaction.items);\n    transaction.failures = rc.failed;\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.capture.screenshot = function(transaction) {\n    return transaction.items[0].dataUrl = empWorldWind.screenshot();\n  };\n\n  /**\n   * Destroys the current engine\n   */\n  engineInterface.state.destroy = function() {\n    if (empWorldWind) {\n      empWorldWind.shutdown();\n      empWorldWind = undefined;\n    }\n  };\n\n  /**\n   * Creates a KML layer\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.kmllayer.add = function(transaction) {\n    var items = transaction.items.length;\n\n    /**\n     * Resume the transaction once all items have been processed\n     * @private\n     */\n    var _complete = function(args) {\n      items--;\n\n      if (!args.success) {\n        transaction.failures.push(new emp.typeLibrary.Error({\n          message: args.message,\n          coreId: args.id\n        }));\n      }\n\n      // There are other layers to add\n      if (items > 0) {\n        return;\n      }\n\n      transaction.run();\n    };\n\n    // Pause the transaction, KML is async in WorldWind\n    transaction.pause();\n    emp.util.each(transaction.items, function(kmlLayer) {\n      empWorldWind.addKML(kmlLayer, _complete);\n    });\n  };\n\n  /**\n   * Remove a KML Layer\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.kmllayer.remove = function(transaction) {\n    emp.util.each(transaction.items, function(kmlLayer) {\n      empWorldWind.removeKML(kmlLayer);\n    });\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wmts.add = function(transaction) {\n    var itemCount = transaction.items.length;\n\n    // Pause the transaction, we have to manually get the capabilities\n    transaction.pause();\n\n    while (itemCount--) {\n      empWorldWind.addWmtsToMap(transaction.items[itemCount], function(count, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error(cbArgs));\n        }\n\n        if (count === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wmts.remove = function(transaction) {\n    var failures = [];\n\n    emp.util.each(transaction.items, function(wmts) {\n      var rc = empWorldWind.removeWmtsFromMap(wmts);\n      if (!rc.success) {\n        failures.push(wmts);\n      }\n    });\n\n    transaction.failures = failures;\n  };\n\n  // return the engineInterface object as a new engineTemplate instance\n  return engineInterface;\n};\n","/* global WorldWind */\n\n/**\n * @namespace\n */\nvar EMPWorldWind = {};\nEMPWorldWind.isV2Core = false;\n\n/**\n * @classdesc The main interface for interacting with NASA WebWorldWind. Any interaction with the WorldWindow will occur\n * in this class.\n *\n * @class\n * @param {WorldWind.WorldWindow} wwd\n */\nEMPWorldWind.Map = function(wwd) {\n  /**\n   * @type {WorldWind.WorldWindow}\n   */\n  this.worldWindow = wwd;\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpLayer>} */\n  this.layers = {};\n\n  /** @type {WorldWind.RenderableLayer} */\n  this.rootLayer = undefined;\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpFeature>} */\n  this.features = {};\n\n  /** @type {Object.<string, *>} */\n  this.services = {};\n\n  /**\n   * This holds the state of the instance\n   * @memberof EMPWorldWind.Map#\n   */\n  this.state = {\n    /**\n     * Pixel size\n     */\n    pixelSize: 1,\n    /**\n     * Whether the map is in drawing mode\n     */\n    drawing: false,\n    /**\n     * Whether the map is in editing mode\n     */\n    editing: false,\n    /**\n     * Whether we are dragging\n     */\n    dragging: false,\n    /**\n     * Placeholder for the last detected mouse move/touch/pointer event\n     */\n    lastInteractionEvent: undefined,\n    /**\n     * Lock state\n     */\n    lockState: emp3.api.enums.MapMotionLockEnum.UNLOCKED,\n    /**\n     * Object for holding state to compute when MilStdSymbols should be re-rendered\n     */\n    lastRender: {\n      bounds: {\n        north: 0,\n        south: 0,\n        east: 0,\n        west: 0\n      },\n      altitude: 0\n    },\n    /**\n     * Default selection style\n     * @type SelectionStyle\n     */\n    selectionStyle: {\n      scale: 1,\n      lineColor: \"#FFFF00\",\n      fillColor: undefined\n    },\n    /**\n     * Object for describing autoPanning behavior\n     */\n    autoPanning: {\n      state: String(EMPWorldWind.constants.PAN_STATE.HALTED),\n      step: 0.5,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    },\n    /**\n     * Defaults to 1:1 scale\n     */\n    iconSize: EMPWorldWind.constants.IconSize.medium,\n    /**\n     * Label styles for the renderer\n     */\n    labelStyles: {\n      \"V\": false,\n      \"L\": false,\n      \"S\": false,\n      \"AA\": false,\n      \"AB\": false,\n      \"AC\": true,\n      \"H\": false,\n      \"M\": false,\n      \"T\": false,\n      \"T1\": false,\n      \"CN\": false,\n      \"C\": false,\n      \"F\": false,\n      \"G\": false,\n      \"H1\": false,\n      \"H2\": false,\n      \"J\": false,\n      \"K\": false,\n      \"N\": false,\n      \"P\": false,\n      \"W\": false,\n      \"W1\": false,\n      \"X\": false,\n      \"Y\": false,\n      \"Z\": false\n    }\n  };\n\n  // Optimization for mil standard  single points.\n  /**\n   * Object for holding render optimization params\n   */\n  this.singlePointAltitudeRanges = {};\n  /**\n   * Mid-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.mid = 600000; // default\n  /**\n   * High-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.high = 1200000; // default\n  /**\n   * Current range mode\n   */\n  this.singlePointAltitudeRangeMode = EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n\n  /**\n   * Current set of selected objects\n   */\n  this.empSelections = {};\n  this.optimizationMapMoveEpsilon = EMPWorldWind.Math.EPSILON5;\n  this.lastNavigator = {};\n  this.shapesInViewArea = undefined;\n  this.bounds = undefined;\n\n  /** SEC renderer worker for multi-points */\n  this.secRendererWorker = {};\n  this.secRendererWorker.A = undefined;\n  this.secRendererWorker.B = undefined;\n  this.secRendererWorker.lastSelected = EMPWorldWind.constants.RendererWorker.B;\n\n  this.throttleAddMultiPointRedraws = undefined;\n};\n\n// typedefs ============================================================================================================\n/**\n * @typedef {object} SelectionStyle\n * @property {number} scale\n * @property {string|undefined} lineColor\n * @property {string|undefined} fillColor\n */\n\n/**\n * @callback EMPWorldWind.map~WMTSCallback\n */\n\n/**\n * @typedef {object} AutoPanParams\n * @property {boolean} up\n * @property {boolean} down\n * @property {boolean} left\n * @property {boolean} right\n */\n\n/**\n * @callback PlotFeatureCB\n * @param {object} cbArgs\n * @param {EMPWorldWind.data.Feature} cbArgs.feature\n * @param {boolean} cbArgs.success\n * @param {string} [cbArgs.message]\n * @param {string} [cbArgs.jsError]\n */\n//======================================================================================================================\n/**\n *\n */\nEMPWorldWind.Map.prototype = function() {\n\n  // Private Functions =================================================================================================\n  /**\n   * Redraws all features on the map, useful when updating selectionStyle\n   */\n  function _redrawAllFeatures() {\n    emp.util.each(Object.keys(this.features), function(featureKey) {\n      var feature = this.features[featureKey];\n      this.plotFeature(feature);\n    }.bind(this));\n  }\n\n  // Public interface ==================================================================================================\n  return {\n    /**\n     * Creates the initial layers\n     * @param {object} args\n     * @param {Bounds} [args.extent]\n     * @param {object} [args.configProperties]\n     * @param {emp.map} args.mapInstance\n     */\n    initialize: function(args) {\n      /**\n       * @memberof EMPWorldWind.Map#\n       * @type {emp.map}\n       */\n      this.empMapInstance = args.mapInstance;\n\n      /**\n       * Creates the two contrast layers\n       * @private\n       */\n      var _createContrastLayers = function() {\n        // Create the contrast layers\n        var blackContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n        blackContrastLayer.attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0.0);\n        blackContrastLayer.attributes.drawOutline = false;\n\n        var whiteContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n        whiteContrastLayer.attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0.0);\n        whiteContrastLayer.attributes.drawOutline = false;\n\n        this.contrastLayer = new WorldWind.RenderableLayer('contrast layer');\n        this.contrastLayer.pickEnabled = false;\n        this.worldWindow.addLayer(this.contrastLayer);\n\n        this.contrastLayer.addRenderable(whiteContrastLayer);\n        this.contrastLayer.addRenderable(blackContrastLayer);\n      }.bind(this);\n\n      /**\n       * Registers event handlers\n       * @private\n       */\n      var _addEventHandlers = function() {\n        // Register DOM event handlers\n        // var throttleValue = 50; // throttle on event calls in ms\n        var eventClass, eventHandler;\n        for (eventClass in EMPWorldWind.eventHandlers) {\n          if (EMPWorldWind.eventHandlers.hasOwnProperty(eventClass)) {\n            eventClass = EMPWorldWind.eventHandlers[eventClass];\n            for (eventHandler in eventClass) {\n              if (eventClass.hasOwnProperty(eventHandler)) {\n                this.worldWindow.addEventListener(eventHandler, eventClass[eventHandler].bind(this));\n              }\n            }\n          }\n        }\n      }.bind(this);\n\n      /**\n       * Sets the view to an initial extent or default of 44,44\n       * @param extent\n       * @private\n       */\n      var _setInitialExtent = function(extent) {\n        var alt;\n        extent = extent || {\n            centerLat: 44,\n            centerLon: 44\n          };\n\n        if (!isNaN(extent.north) && !isNaN(extent.south) && !isNaN(extent.east) && !isNaN(extent.west)) {\n          // Get approximate height from the width of the extent\n          alt = Math.PI * WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n              new WorldWind.Location(extent.north, extent.west),\n              new WorldWind.Location(extent.south, extent.east));\n\n          this.centerOnLocation({\n            latitude: (extent.north + extent.south) / 2,\n            longitude: (extent.east + extent.west) / 2,\n            altitude: alt\n          });\n        } else if (!isNaN(extent.centerLat) && !isNaN(extent.centerLon)) {\n          // Arbitrarily use 1e7 as altitude\n          this.centerOnLocation({\n            latitude: extent.centerLat,\n            longitude: extent.centerLon,\n            altitude: 1e7\n          });\n        }\n      }.bind(this);\n\n      /**\n       * Sets configs for the engine from initial params\n       * @param config\n       * @private\n       */\n      var _applyConfigProperties = function(config) {\n        config = config || {};\n\n        if (EMPWorldWind.utils.defined(config.midDistanceThreshold)) {\n          this.singlePointAltitudeRanges.mid = config.midDistanceThreshold;\n        }\n\n        if (EMPWorldWind.utils.defined(config.farDistanceThreshold)) {\n          this.singlePointAltitudeRanges.far = config.farDistanceThreshold;\n        }\n\n        if (EMPWorldWind.utils.defined(config.brightness)) {\n          this.setContrast(config.brightness);\n        }\n      }.bind(this);\n\n      /**\n       * Initializes the web workers for rendering\n       * @private\n       */\n      var _initializeWebWorkers = function() {\n        this.secRendererWorker.A = new Worker(WorldWind.configuration.baseUrl + 'renderer/MPCWorker.js');\n        this.secRendererWorker.B = new Worker(WorldWind.configuration.baseUrl + 'renderer/MPCWorker.js');\n\n        this.secRendererWorker.A.onerror = function(error) {\n          //logs error to console\n          armyc2.c2sd.renderer.utilities.ErrorLogger.LogException(\"MPWorker A\", \"postMessage\", error);\n        };\n\n        // Overwrite the interface function\n        this.secRendererWorker.onMessage = function(e) {\n          var rendererData = [];\n\n          if (e.data.id) { // Not a batch call\n            rendererData.push = e.data.result;\n          } else {\n            rendererData = e.data.result;\n          }\n\n          emp.util.each(rendererData, function(rendererItem) {\n            if (!EMPWorldWind.utils.defined(rendererItem) || typeof rendererItem === 'string') {\n              return;\n            }\n\n            var i,\n              wwFeature = this.features[rendererItem.id],\n              shapes = [],\n              data = rendererItem.geojson;\n\n            emp.util.each(data.features, function(componentFeature) {\n              var lineCount;\n\n              // TODO have the renderer return the proper width, manually overwriting the line width for now\n              componentFeature.properties.strokeWidth = 1;\n              componentFeature.properties.strokeWeight = 1;\n\n              switch (componentFeature.geometry.type) {\n                case \"MultiLineString\":\n                  lineCount = componentFeature.geometry.coordinates.length;\n\n                  for (i = 0; i < lineCount; i++) {\n                    var subGeoJSON = {\n                      properties: componentFeature.properties,\n                      coordinates: componentFeature.geometry.coordinates[i]\n                    };\n\n                    shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(subGeoJSON, this.state.selectionStyle));\n                  }\n                  break;\n                case \"LineString\":\n                  shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(componentFeature, this.state.selectionStyle));\n                  break;\n                case \"Point\":\n                  shapes.push(EMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON(componentFeature, this.state.selectionStyle));\n                  break;\n                case \"Polygon\":\n                  shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON(componentFeature, this.state.selectionStyle));\n                  break;\n                default:\n                  window.console.error(\"Unable to render symbol with type \" + componentFeature.geometry.type);\n              }\n            }.bind(this));\n\n            if (wwFeature) {\n\n              this.rootLayer.removeFeature(wwFeature);\n              wwFeature.clearShapes();\n              wwFeature.addShapes(shapes);\n              this.rootLayer.addFeature(wwFeature);\n\n              wwFeature.feature.range = this.worldWindow.navigator.range;\n              wwFeature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n              wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n            }\n          }.bind(this));\n\n          this.worldWindow.redraw();\n        }.bind(this);\n\n        this.secRendererWorker.A.onmessage = this.secRendererWorker.onMessage;\n\n\n        this.secRendererWorker.B.onerror = function(error) {\n          //logs error to console\n          armyc2.c2sd.renderer.utilities.ErrorLogger.LogException(\"MPWorker B\", \"postMessage\", error);\n        };\n        this.secRendererWorker.B.onmessage = this.secRendererWorker.onMessage;\n      }.bind(this);\n\n      // Create the contrast Layers\n      _createContrastLayers();\n\n      // Create the root layer for all shapes\n      this.rootLayer = new EMPWorldWind.data.EmpLayer(\"RootLayer for \" + args.mapInstance.mapInstanceId);\n      this.worldWindow.addLayer(this.rootLayer.layer);\n\n      // Create the goTo manipulator\n      /** @member {WorldWind.GoToAnimator} */\n      this.goToAnimator = new WorldWind.GoToAnimator(this.worldWindow);\n\n      // Register drag event handlers\n      /** @member {WorldWind.DragRecognizer} */\n      this.dragRecognizer = new WorldWind.DragRecognizer(this.worldWindow.canvas, function(event) {\n        if (event.state in EMPWorldWind.eventHandlers.drag) {\n          EMPWorldWind.eventHandlers.drag[event.state].call(this, event);\n        }\n      }.bind(this));\n\n      // Register event handlers\n      _addEventHandlers();\n\n      // Set initial extent\n      _setInitialExtent(args.extent);\n\n      // Store initial navigator settings\n      if (this.worldWindow.navigator) {\n        this.lastNavigator.range = this.worldWindow.navigator.range;\n        this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n        this.lastNavigator.roll = this.worldWindow.navigator.roll;\n        this.lastNavigator.heading = this.worldWindow.navigator.heading;\n        this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n      }\n\n      // Update any other config properties passed in\n      _applyConfigProperties(args.configProperties);\n\n      // Trigger an initial camera update to update EMP\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n\n      // Initialize sec worker\n      _initializeWebWorkers();\n\n      this.throttleAddMultiPointRedraws = EMPWorldWind.utils.MultiPointRateLimit(EMPWorldWind.editors.EditorController.redrawMilStdSymbols, 1);\n    },\n    /**\n     *\n     * @param {object} args\n     * @param {number} args.latitude\n     * @param {number} args.longitude\n     * @param {number} [args.altitude]\n     * @param {number} [args.tilt]\n     * @param {number} [args.roll]\n     * @param {number} [args.heading]\n     * @param {boolean} [args.animate = false]\n     * @param {function} [args.animateCB]\n     */\n    centerOnLocation: function(args) {\n      var position;\n\n      /**\n       *\n       * @param args\n       * @returns {*}\n       * @private\n       */\n      function _getLocation(args) {\n        if (typeof args.altitude === \"number\") {\n          return new WorldWind.Position(args.latitude, args.longitude, args.altitude);\n        } else {\n          return new WorldWind.Location(args.latitude, args.longitude);\n        }\n      }\n\n      // Get the location\n      position = _getLocation(args);\n\n      // Set the navigator options\n      this.worldWindow.navigator.heading = args.heading || 0;\n      this.worldWindow.navigator.roll = args.roll || 0;\n      this.worldWindow.navigator.tilt = args.tilt || 0;\n\n      var _goToCompleteCallback = function() {\n        // Notify the view has changed, this also triggers a re-render of any graphics in view\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n\n        // Fire the original callback\n        if (typeof args.animateCB === \"function\") {\n          return args.animateCB();\n        }\n      }.bind(this);\n\n      // Fire the move\n      this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n      this.goToAnimator.goTo(position, _goToCompleteCallback);\n    },\n    /**\n     *\n     * @param {object} args\n     * @param {number} args.latitude\n     * @param {number} args.longitude\n     * @param {number} [args.altitude] Currently unused by WorldWind\n     * @param {number} args.range\n     * @param {number} args.tilt\n     * @param {number} args.heading\n     * @param {boolean} [args.animate]\n     * @param {function} [args.animateCB]\n     */\n    lookAt: function(args) {\n      // substituting range for altitude for now\n      if (args.range !== 0) {\n        args.range = args.range || this.worldWindow.navigator.range;\n      }\n\n      var position = new WorldWind.Position(args.latitude, args.longitude, args.range);\n\n      /**\n       * @this {EMPWorldWind.Map}\n       * @private\n       */\n      function _completeLookAtMotion() {\n        this.worldWindow.navigator.lookAtLocation.latitude = args.latitude;\n        this.worldWindow.navigator.lookAtLocation.longitude = args.longitude;\n\n        // lookAt does not support altitude in WorldWind yet\n        // this.worldWindow.navigator.lookAtLocation.altitude = args.altitude;\n\n        this.worldWindow.navigator.range = args.range;\n        this.worldWindow.navigator.tilt = args.tilt;\n        this.worldWindow.navigator.heading = args.heading;\n\n        if (args.animateCB) {\n          args.animateCB();\n        }\n\n        this.worldWindow.redraw();\n      }\n\n      this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n      this.goToAnimator.goTo(position, _completeLookAtMotion.bind(this));\n    },\n    /**\n     * @param {emp.typeLibrary.Feature|EMPWorldWind.data.EmpFeature} feature\n     * @param {PlotFeatureCB} [callback]\n     */\n    plotFeature: function(feature, callback) {\n      /**\n       * Handle the async plotFeature method\n       * @private\n       */\n      var _callback = function(cbArgs) {\n        if (cbArgs.success) {\n\n          // Add the feature to the root layer\n          this.rootLayer.addFeature(cbArgs.feature);\n\n          // Add the new feature to the global list of features\n          if (!(cbArgs.feature.id in this.features)) {\n            this.features[cbArgs.feature.id] = cbArgs.feature;\n          }\n\n          // Trigger an update for the display\n          this.worldWindow.redraw();\n        }\n\n        if (typeof callback === \"function\") {\n          return callback(cbArgs);\n        }\n      }.bind(this);\n\n      // Check if we are using a EMPWorldWind feature internally\n      if (feature instanceof EMPWorldWind.data.EmpFeature) {\n        feature = feature.feature;\n      }\n\n      if (!(feature.featureId in this.features)) {\n        // Plot a new feature\n        EMPWorldWind.editors.EditorController.plotFeature.call(this, feature, _callback);\n      } else {\n        // Update an existing feature\n        EMPWorldWind.editors.EditorController.updateFeature.call(this, this.features[feature.featureId], feature, _callback);\n      }\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Feature} feature\n     */\n    unplotFeature: function(feature) {\n      var rc = {\n        success: false,\n        message: \"\"\n      };\n\n      /**\n       * KML features are actually layers in WorldWind\n       * @private\n       */\n      var _handleKMLFeature = function() {\n        if (feature.coreId in this.layers) {\n          // Remove it from the map\n          this.worldWindow.removeLayer(this.layers[feature.coreId]);\n\n          // Remove our record of the KML feature\n          delete this.layers[feature.coreId];\n          delete this.features[feature.coreId];\n\n          // Update the map\n          this.worldWindow.redraw();\n\n          rc.success = true;\n        }\n        return rc;\n      }.bind(this);\n\n      /**\n       * Remove the features normally\n       * @private\n       */\n      var _handleDefaultFeature = function() {\n\n        // Remove it from the layer\n        this.rootLayer.removeFeature(feature);\n\n        // Clear it from the selection hash\n        this.removeFeatureSelection(feature.coreId);\n\n        // Remove it from the global list of features\n        delete this.features[feature.coreId];\n\n        rc.success = true;\n\n        // Update the map\n        this.worldWindow.redraw();\n\n        return rc;\n      }.bind(this);\n\n\n      if (feature.format === \"kml\") { // KML features are actually layers\n        return _handleKMLFeature();\n      }\n      return _handleDefaultFeature();\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Selection[]} empSelections\n     */\n    selectFeatures: function(empSelections) {\n      var selected = [],\n        failed = [];\n\n      emp.util.each(empSelections, function(selectedFeature) {\n        var feature = this.features[selectedFeature.featureId];\n        if (feature) {\n          feature.selected = selectedFeature.select;\n          (feature.selected) ? this.storeFeatureSelection(selectedFeature.featureId) : this.removeFeatureSelection(selectedFeature.featureId);\n          //selected.push(feature);\n        } else {\n          failed.push(selectedFeature.featureId);\n        }\n      }.bind(this));\n\n      this.worldWindow.redraw();\n\n      return {\n        success: selected.length !== 0,\n        selected: selected,\n        failed: failed\n      };\n    },\n\n\n    /**\n    *\n    * @param {string} id\n    * @returns {EMPWorldWind.data.EmpLayer}\n    */\n   getLayer: function(id) {\n     if (this.layers.hasOwnProperty(id)) {\n       return this.layers[id];\n     }\n   },\n\n   /**\n    *\n    * @param layer\n    * @returns {boolean}\n    */\n   layerExists: function(layer) {\n     return this.layers.hasOwnProperty(layer.id);\n   },\n    /**\n     * Adds a WMS layer to the map\n     * @param {emp.typeLibrary.WMS} wms\n     */\n    addWMS: function(wms) {\n      var wmsLayer;\n\n      // Remove existing WMS if it already exists, we shall re-add it\n      wmsLayer = this.getLayer(wms.coreId);\n      if (wmsLayer) {\n        this.removeWMS(wmsLayer);\n      }\n\n      // Create the new layer\n      wmsLayer = new EMPWorldWind.data.EmpWMSLayer(wms);\n\n      this.layers[wmsLayer.id] = wmsLayer;\n      this.worldWindow.addLayer(wmsLayer.layer);\n      this.worldWindow.redraw();\n    },\n    /**\n     * Removes a WMS layer from the map\n     * @param {emp.typeLibrary.WMS|EMPWorldWind.data.EmpWMSLayer} wms\n     */\n    removeWMS: function(wms) {\n      var layer,\n        id = wms.coreId || wms.id;\n\n      layer = this.getLayer(id);\n      if (layer) {\n        this.worldWindow.removeLayer(layer.layer);\n        delete this.layers[layer.id];\n        this.worldWindow.redraw();\n      }\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.KmlLayer} kml\n     * @param {function} cb\n     */\n    addKML: function(kml, cb) {\n      var kmlFilePromise,\n        kmlLayer = new EMPWorldWind.data.EmpKMLLayer(kml);\n\n      // // Build the KML file promise\n      kmlFilePromise = new WorldWind.KmlFile(kmlLayer.url);\n      kmlFilePromise\n        .then(function(kmlFile) {\n          // Construct the KML layer to hold the document\n          var kmlRenderableLayer = new WorldWind.RenderableLayer(kmlLayer.id);\n          kmlLayer.layer = kmlRenderableLayer;\n\n          // Add the KML layer to the map\n          kmlRenderableLayer.addRenderable(kmlFile);\n          this.worldWindow.addLayer(kmlRenderableLayer);\n\n          // Update the map\n          this.worldWindow.redraw();\n\n          // Record the layer so we can remove/modify it later\n          this.layers[kmlLayer.id] = kmlLayer;\n          if (typeof cb === \"function\") {\n            return cb({\n              success: true\n            });\n          }\n        }.bind(this))\n        .catch(function() {\n          return cb({\n            success: false,\n            message: 'Failed to add KML Layer'\n          });\n        });\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.KmlLayer} kml\n     * @param {function} [cb]\n     */\n    removeKML: function(kml, cb) {\n      if (kml.coreId in this.layers) {\n        this.worldWindow.removeLayer(this.layers[kml.coreId].layer);\n        delete this.layers[kml.coreId];\n        this.worldWindow.redraw();\n      }\n\n      if (typeof cb === \"function\") {\n        return cb({\n          success: true\n        });\n      }\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isFeatureSelected: function(id) {\n      return Boolean(this.empSelections.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getFeatureSelection: function(id) {\n      if (this.isFeatureSelected(id)) {\n        return this.empSelections[id];\n      }\n\n      return null;\n    },\n    /**\n     * @param {emp.typeLibrary.WMTS} empWMTS\n     * @param {EMPWorldWind.map~WMTSCallback} callback\n     */\n    addWmtsToMap: function(empWMTS, callback) {\n      var rc = {\n        success: false,\n        message: ''\n      };\n\n      var xhr, url,\n        async = true;\n\n      var _createWMTSLayer = function(xmlDom) {\n        var wmtsCapabilities, wmtsLayerCapabilities, wmtsConfig;\n\n        wmtsCapabilities = new WorldWind.WmtsCapabilities(xmlDom);\n        wmtsLayerCapabilities = wmtsCapabilities.getLayer(empWMTS.layer);\n        wmtsConfig = WorldWind.WmtsLayer.formLayerConfiguration(wmtsLayerCapabilities);\n        //next is a workaround of using a specific tileMatrixSEt suggested at WW web sdk issue##113\n        // Modify the config object to use a TileMatrixSet currently supported:\n        wmtsConfig.tileMatrixSet  = wmtsLayerCapabilities.capabilities.contents.tileMatrixSet[1];\n        return new WorldWind.WmtsLayer(wmtsConfig);\n      };\n\n\n      // Handle getting capabilities\n      var xhrSuccess = function() {\n        var wmtsLayer;\n\n        if (xhr.status === 200) {\n          try {\n            wmtsLayer = _createWMTSLayer(xhr.responseXML);\n\n            this.worldWindow.addLayer(wmtsLayer);\n            this.services[empWMTS.coreId] = wmtsLayer;\n\n            this.worldWindow.redraw();\n\n            rc.success = true;\n          } catch (err) {\n            rc.message = err.message;\n          }\n\n          if (typeof callback === \"function\") {\n            return callback(rc);\n          }\n        }\n      }.bind(this);\n\n      // Handle getting error\n      var xhrError = function() {\n        callback({\n          success: false,\n          message: xhr.statusText\n        });\n      };\n\n      try {\n        url = empWMTS.url + \"?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=1.0.0\";\n\n        // Configure the request\n        xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url, async);\n        xhr.callback = callback;\n        xhr.onload = xhrSuccess;\n        xhr.onerror = xhrError;\n\n        // Make the request\n        xhr.send();\n\n        rc.success = true;\n      } catch (err) {\n        rc.message = err.message;\n      }\n\n      return rc;\n    },\n    /**\n     * @param {emp.typeLibrary.WMTS} empWMTS\n     */\n    removeWmtsFromMap: function(empWMTS) {\n      var rc = {\n        success: false,\n        message: ''\n      };\n\n      if (empWMTS.coreId in this.services) {\n        this.worldWindow.removeLayer(this.services[empWMTS.coreId]);\n\n        rc.success = true;\n        this.worldWindow.redraw();\n      } else {\n        rc.message = 'No such service exists on the map';\n      }\n\n      return rc;\n    },\n    /**\n     *\n     * @param id\n     */\n    storeFeatureSelection: function(id) {\n      this.empSelections[id] = id;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeFeatureSelection: function(id) {\n      if (this.empSelections.hasOwnProperty(id)) {\n        delete this.empSelections[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*|null}\n     */\n    getSelections: function() {\n      return this.empSelections;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isFeaturePresent: function(id) {\n      return Boolean(this.features.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isMultiPointPresent: function(id) {\n      return Boolean(this.multiPointCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getMultiPoint: function(id) {\n      if (this.isMultiPointPresent(id)) {\n        return this.multiPointCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param multiPoint\n     */\n    storeMultiPoint: function(multiPoint) {\n      this.multiPointCollection[multiPoint.id] = multiPoint;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeMultiPoint: function(id) {\n      if (this.multiPointCollection.hasOwnProperty(id)) {\n        delete this.multiPointCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isAirspacePresent: function(id) {\n      return Boolean(this.airspaceCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getAirspace: function(id) {\n      if (this.isAirspacePresent(id)) {\n        return this.airspaceCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param airspace\n     */\n    storeAirspace: function(airspace) {\n      this.airspaceCollection[airspace.id || airspace.coreId] = airspace;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeAirspace: function(id) {\n      if (this.airspaceCollection.hasOwnProperty(id)) {\n        delete this.airspaceCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*|null}\n     */\n    getSinglePoints: function() {\n      return this.singlePointCollection;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isSinglePointPresent: function(id) {\n      return Boolean(this.singlePointCollection.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getSinglePoint: function(id) {\n      if (this.isSinglePointPresent(id)) {\n        return this.singlePointCollection[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param singlePoint\n     */\n    storeSinglePoint: function(singlePoint) {\n      this.singlePointCollection[singlePoint.id] = singlePoint;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeSinglePoint: function(id) {\n      if (this.isSinglePointPresent(id)) {\n        delete this.singlePointCollection[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {number}\n     */\n    getSinglePointCount: function() {\n      if (this.defined(this.singlePointCollection)) {\n        return Object.keys(this.singlePointCollection).length;\n      } else {\n        return 0;\n      }\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    isSinglePointIdOnHoldPresent: function(id) {\n      return Boolean(this.singlePointCollectionIdOnHold.hasOwnProperty(id));\n    },\n    /**\n     *\n     * @param id\n     * @returns {*}\n     */\n    getSinglePointIdOnHold: function(id) {\n      if (this.isSinglePointIdOnHoldPresent(id)) {\n        return this.singlePointCollectionOnHold[id];\n      }\n\n      return null;\n    },\n    /**\n     *\n     * @param singlePointId\n     */\n    storeSinglePointIdOnHold: function(singlePointId) {\n      this.singlePointCollectionIdOnHold[singlePointId] = singlePointId;\n    },\n    /**\n     *\n     * @param id\n     * @returns {boolean}\n     */\n    removeSinglePointIdOnHold: function(id) {\n      if (this.isSinglePointIdOnHoldPresent(id)) {\n        delete this.singlePointCollectionIdOnHold[id];\n        return true;\n      }\n\n      return false;\n    },\n    /**\n     *\n     * @returns {*}\n     */\n    getSinglePointsIdOnHold: function() {\n      return this.singlePointCollectionIdOnHold;\n    },\n    /**\n     *\n     * @returns {*}\n     */\n    getSinglePointsIdOnHoldCount: function() {\n      if (this.defined(this.singlePointCollectionIdOnHold)) {\n        return Object.keys(this.singlePointCollectionIdOnHold).length;\n      } else {\n        return 0;\n      }\n    },\n    /**\n     *\n     * @param {Array} styles\n     */\n    setLabelStyle: function(styles) {\n      var style, featureId, feature;\n      for (style in this.state.labelStyles) {\n        if (this.state.labelStyles.hasOwnProperty(style)) {\n          this.state.labelStyles[style] = styles.includes(style);\n        }\n      }\n\n      // TODO refresh only visible points and mark the rest as update when requested\n      for (featureId in this.features) {\n        if (this.features.hasOwnProperty(featureId)) {\n          feature = this.features[featureId];\n          EMPWorldWind.editors.EditorController.updateFeatureLabelStyle.call(this, feature);\n        }\n      }\n      this.worldWindow.redraw();\n    },\n    /**\n     * Expose a refresh\n     */\n    refresh: function() {\n      EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n      //var featureId, feature;\n\n      // for (featureId in this.features) {\n      //   if (this.features.hasOwnProperty(featureId)) {\n      //     feature = this.features[featureId];\n      //\n      //     // TODO check if it is visible first\n      //     //EMPWorldWind.editors.EditorController.updateRender.call(this, feature);\n      //   }\n      // }\n\n      // TODO trigger redraw if necessary only\n      this.worldWindow.redraw();\n    },\n    /**\n     * Adjust the background contrast\n     * @param {number} contrast Value from 0-100, 50 is default\n     */\n    setContrast: function(contrast) {\n      if (contrast > 100) {\n        contrast = 100;\n      } else if (contrast < 0) {\n        contrast = 0;\n      }\n\n      if (contrast >= 50) {\n        this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, (contrast - 50) / 50);\n        this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0);\n      } else {\n        this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0);\n        this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, (50 - contrast) / 50);\n      }\n\n      this.worldWindow.redraw();\n    },\n    /**\n     *\n     * @param {emp.typeLibrary.Lock} lockState\n     */\n    setLockState: function(lockState) {\n      if (lockState.lock === this.state.lockState) {\n        // The same already, do nothing\n        return;\n      } else if (lockState.lock !== emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        // We have changed lock states, make sure to stop auto-panning\n        this.spinGlobe(false);\n      }\n      // Update the lock state\n      this.state.lockState = lockState.lock;\n    },\n    /**\n     * Spins the globe if autoPanning is enabled\n     * @param {AutoPanParams|boolean} [pan]\n     */\n    spinGlobe: function(pan) {\n      var step = this.worldWindow.navigator.range / (WorldWind.EARTH_RADIUS);\n\n      /**\n       *\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      var _getVerticalPan = function() {\n        if (this.state.autoPanning.up) {\n          return step;\n        } else if (this.state.autoPanning.down) {\n          return -step;\n        } else {\n          return 0;\n        }\n      }.bind(this);\n\n      /**\n       *\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      var _getHorizontalPan = function() {\n        if (this.state.autoPanning.left) {\n          return -step;\n        } else if (this.state.autoPanning.right) {\n          return step;\n        } else {\n          return 0;\n        }\n      }.bind(this);\n\n      /**\n       *\n       * @param {AutoPanParams} pan\n       * @private\n       */\n      var _cleanPanArgs = function(pan) {\n        if (pan && pan.hasOwnProperty('state')) {\n          delete pan['state'];\n        }\n        return pan;\n      };\n\n      /**\n       * @this EMPWorldWind.Map\n       * @private\n       */\n      var _allowPan = function() {\n        return this.state.autoPanning.up ||\n          this.state.autoPanning.left ||\n          this.state.autoPanning.down ||\n          this.state.autoPanning.right;\n      }.bind(this);\n\n      /**\n       *\n       * @private\n       */\n      var _notifyEMPPointer = function() {\n        var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent);\n        coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n        if (coords.lat !== undefined) {\n          this.empMapInstance.eventing.Pointer(coords);\n        }\n      }.bind(this);\n\n      /**\n       *\n       * @private\n       */\n      var _panMap = function() {\n        var vertical, horizontal, goToPosition,\n          travelTime = 250; // 250 ms\n\n        // Get the pan directions\n        vertical = _getVerticalPan();\n        horizontal = _getHorizontalPan();\n\n        // Get the location to pan to\n        goToPosition = new WorldWind.Position(\n          this.worldWindow.navigator.lookAtLocation.latitude + vertical,\n          this.worldWindow.navigator.lookAtLocation.longitude + horizontal,\n          this.worldWindow.navigator.range);\n\n        // Set the travel time\n        this.goToAnimator.travelTime = travelTime;\n\n        // Update the state\n        this.state.autoPanning.state = EMPWorldWind.constants.PAN_STATE.PANNING;\n\n        // Notify EMP we are moving the camera\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n        // Fire the animation\n        this.goToAnimator.goTo(goToPosition, function() {\n          // Update EMP pointer location for moving control points\n          _notifyEMPPointer();\n\n          // Update the state to compete\n          this.state.autoPanning.state = EMPWorldWind.constants.PAN_STATE.COMPLETE;\n\n          // Check if we still need to pan\n          if (_allowPan()) {\n            _panMap();\n          } else {\n            // Our exit route, update the state\n            this.state.autoPanning.state = EMPWorldWind.constants.PAN_STATE.HALTED;\n            // Notify EMP we have stopped moving\n            EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n          }\n        }.bind(this));\n      }.bind(this);\n\n      // Explicitly halting the animation and restoring the pan state to no motion\n      if (pan === false) {\n        this.goToAnimator.cancel();\n        this.state.autoPanning = Object.assign({}, EMPWorldWind.constants.NO_PANNING);\n        return;\n      }\n\n      // Make sure we don't overwrite the state internals\n      pan = _cleanPanArgs(pan);\n\n      // Update the panning state directions\n      this.state.autoPanning = Object.assign({}, this.state.autoPanning, pan);\n\n      // If we are still running a previous auto-pan animation return, the pan callback will use the updated state when it completes\n      if (this.state.autoPanning.state === EMPWorldWind.constants.PAN_STATE.PANNING ||\n        this.state.lockState !== emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        return;\n      }\n\n      // Start the pan if the state is set to\n      if (_allowPan()) {\n        _panMap();\n      }\n    },\n    /**\n     * Returns a data URI of the current view of the canvas\n     * @todo Handle iconURL within Placemarks\n     * @returns {string}\n     */\n    screenshot: function() {\n      // This forces webgl to render which exposes current context for the canvas.toDataURL function\n      // Note: this is still lacking functionality as Placemarks are not rendered\n      this.worldWindow.drawFrame();\n      return this.worldWindow.canvas.toDataURL();\n    },\n    /**\n     * Calculate the current bounds of the WorldWindow\n     * @returns {Bounds}\n     */\n    getBounds: function() {\n      var topRight, bottomLeft;\n\n      // Check the viewport corners\n      topRight = this.worldWindow.pickTerrain(new WorldWind.Vec2(this.worldWindow.viewport.width - 1, 1)).terrainObject();\n      bottomLeft = this.worldWindow.pickTerrain(new WorldWind.Vec2(1, this.worldWindow.viewport.height - 1)).terrainObject();\n\n      // If the corners don't contain the globe assume we are zoomed very far out, estimate an arbitrary rectangle\n      if (!topRight) {\n        topRight = {\n          position: WorldWind.Location.linearLocation(\n            this.worldWindow.navigator.lookAtLocation,\n            this.worldWindow.navigator.heading + 45,\n            Math.PI / 3,\n            new WorldWind.Location())\n        };\n      }\n\n      if (!bottomLeft) {\n        bottomLeft = {\n          position: WorldWind.Location.linearLocation(\n            this.worldWindow.navigator.lookAtLocation,\n            this.worldWindow.navigator.heading + 45, -Math.PI / 3,\n            new WorldWind.Location())\n        };\n      }\n\n      return {\n        north: topRight.position.latitude,\n        south: bottomLeft.position.latitude,\n        east: topRight.position.longitude,\n        west: bottomLeft.position.longitude\n      };\n    },\n    /**\n     * Returns the center of focus of the map\n     * @returns {{latitude: number, longitude:number}}\n     */\n    getCenter: function() {\n      return this.worldWindow.navigator.lookAtLocation;\n    },\n    /**\n     * Deletes and removes all features and layers on the map\n     */\n    shutdown: function() {\n      this.features = {};\n      this.layers = {};\n      this.worldWindow = undefined;\n    },\n    /**\n     * checks is map is moving outside an epsilon. This function is used\n     * to reduce the calls to update the features of the map.\n     */\n    isMapMoving: function() {\n      return (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.latitude, this.lastNavigator.lookAtLocation.latitude, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.longitude, this.lastNavigator.lookAtLocation.longitude, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON1)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.tilt, this.lastNavigator.tilt, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.roll, this.lastNavigator.roll, this.optimizationMapMoveEpsilon)) ||\n        (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.heading, this.lastNavigator.heading, this.optimizationMapMoveEpsilon));\n    },\n    /**\n     *\n     * @returns {PickedObjectList|*}\n     */\n    pickShapesInViewRegion: function() {\n      var shapes;\n      //var bound = this.getBounds();\n      //var boundRectangle = new this.worldwind.Rectangle(new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude), this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n      // this.worldWindow.viewport\n      var canvasCoordinates = this.worldWindow.canvasCoordinates(0, 0);\n      //var screenLocation = new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude);\n      var boundRectangle = new WorldWind.Rectangle(canvasCoordinates[0], canvasCoordinates[1], 5000, 4000);\n      //var boundRectangle  = new WorldWind.Rectangle(0, 0 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n      //var boundRectangle  = new WorldWind.Rectangle(this.worldWindow.canvas.width/2, this.worldWindow.canvas.height/2 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n\n      shapes = this.worldWindow.pickShapesInRegion(boundRectangle);\n      return shapes;\n    },\n    /**\n     * checks if feature is within view area of map.\n     * @param {emp.typeLibrary.Feature} empFeature object representing a feature (not a ww feature).\n     */\n    isMilStdMultiPointShapeInViewRegion: function(empFeature) {\n      var p,\n        coordinate,\n        coords = empFeature.coordinates.length;\n\n      // Highlight the items picked.\n      if (!this.bounds) {\n        this.bounds = this.getBounds();\n      }\n\n      /**\n       *\n       * @param coordinate\n       * @param bounds\n       * @returns {boolean}\n       * @private\n       */\n      var _boundsContainsPoint = function(coordinate, bounds) {\n        return (coordinate[0] <= bounds.east && coordinate[0] >= bounds.west) &&\n          (coordinate[1] > bounds.south && coordinate[1] < bounds.north);\n      };\n\n\n      // TODO wait for fix for pickShapesInRegion to use this method\n      // var _boundsContainLine = function(feature) {\n      //   var pickList,\n      //     clientRect = this.worldWindow.canvas.getBoundingClientRect(),\n      //     canvasCoords = this.worldWindow.canvasCoordinates(clientRect.left, clientRect.top),\n      //     region = new WorldWind.Rectangle(\n      //       canvasCoords[0],\n      //       canvasCoords[1],\n      //       clientRect.width,\n      //       clientRect.height);\n      //\n      //   pickList = this.worldWindow.pickShapesInRegion(region);\n      //\n      //   //window.console.debug(pickList, feature);\n      //\n      //   return false;\n      // }.bind(this);\n      //\n      // if (_boundsContainLine(empFeature)) {\n      //   return true;\n      // }\n\n      for (p = 0; p < coords; p++) {\n        coordinate = empFeature.coordinates[p];\n        if (_boundsContainsPoint(coordinate, this.bounds)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    /**\n     *\n     * @param {string} color\n     */\n    setSelectionColor: function(color) {\n      function _validateColor(color) {\n        return color || this.state.selectionStyle.lineColor;\n      }\n\n      function _prefixColorString(color) {\n        if (!color.startsWith(\"#\")) {\n          return \"#\" + color;\n        }\n        return color;\n      }\n\n      color = _validateColor(color);\n      color = _prefixColorString(color);\n\n      this.state.selectionStyle.lineColor = color;\n\n      // Update all features\n      _redrawAllFeatures.call(this);\n    },\n    /**\n     *\n     * @param {number} scale\n     */\n    setSelectionScale: function(scale) {\n      this.state.selectionStyle.scale = scale;\n\n      // Update all features\n      _redrawAllFeatures.call(this);\n    },\n    /**\n     *\n     * @param {string|number} size\n     */\n    setIconSize: function(size) {\n      if (typeof size === \"string\") {\n        if (size in EMPWorldWind.constants.IconSize) {\n          size = EMPWorldWind.constants.IconSize[size];\n        } else {\n          size = 1.0;\n        }\n      } else if (typeof size !== \"number\") {\n        size = 1.0;\n      }\n\n      if (this.state.iconSize !== size)\n      {\n        this.state.iconSize = size;\n        this.state.stateChanged = true;\n        _redrawAllFeatures.call(this);\n        this.state.stateChanged = false;\n      }\n\n    }\n  };\n}();\n","var EMPWorldWind = EMPWorldWind || {};\n/**\n * Namespace for EMPWorldWind feature classes\n * @namespace\n */\nEMPWorldWind.data = {};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {string} overlayName\n */\nEMPWorldWind.data.EmpLayer = function(overlayName) {\n  /** @type {Object.<string, EMPWorldWind.data.EmpFeature>} */\n  this.features = {};\n\n  /** @member {string} */\n  this.name = overlayName;\n\n  var _layer = new WorldWind.RenderableLayer(overlayName);\n  /**\n   * @name EMPWorldWind.data.EmpLayer#layer\n   * @type {WorldWind.RenderableLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _layer\n  });\n\n  /**\n   * @param {EMPWorldWind.data.EmpFeature} feature\n   * @private\n   */\n  var _featureIsPresent = function(feature) {\n    if (feature) {\n      return (feature.id || feature.coreId) in this.features;\n    }\n    return false;\n\n  }.bind(this);\n\n\n  /**\n   * @param {EMPWorldWind.data.EmpFeature} feature\n   * @private\n   */\n  var _getFeature = function(id) {\n      return this.features[id];\n  }.bind(this);\n\n  /**\n   *\n   * @param {EMPWorldWind.data.EmpFeature} feature\n   */\n  this.addFeature = function(feature) {\n    if (!_featureIsPresent(feature)) {\n      emp.util.each(feature.shapes, function(shape) {\n        this.layer.addRenderable(shape);\n      }.bind(this));\n\n      this.features[feature.id || feature.coreId] = feature;\n    }\n  };\n\n  /**\n   *\n   * @param features\n   */\n  this.addFeatures = function(features) {\n    emp.util.each(features, function(feature) {\n      this.addFeature(feature);\n    }.bind(this));\n  };\n\n  /**\n   *\n   */\n  this.removeFeatures = function(features) {\n    emp.util.each(features, function(feature) {\n      this.removeFeature(feature);\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param feature\n   */\n  this.removeFeature = function(feature) {\n    if (_featureIsPresent(feature)) {\n      var wwFeature = _getFeature(feature.id || feature.coreId);\n      emp.util.each(wwFeature.shapes, function(shape) {\n        this.layer.removeRenderable(shape);\n      }.bind(this));\n      delete this.features[wwFeature.id];\n    }\n  };\n\n  /**\n   *\n   * @param id\n   */\n  this.removeFeatureById = function(id) {\n    if (id in this.features) {\n      this.removeFeature(this.features[id]);\n    }\n  };\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.data.EmpWMSLayer = function(wms) {\n  var layerNames, config, url;\n\n  this.id = wms.coreId;\n\n  var _wms = wms;\n\n  /**\n   * @name EMPWorldWind.data.EmpWMSLayer#wms\n   * @type {emp.typeLibrary.WMS}\n   */\n  Object.defineProperty(this, 'wms', {\n    enumerable: true,\n    value: _wms\n  });\n\n  layerNames = wms.activeLayers.join();\n\n  // Set the URL to the service\n  if (wms.useProxy) {\n    url = emp3.api.global.configuration.urlProxy + \"?url=\" + wms.url;\n  } else {\n    url = wms.url;\n  }\n\n  config = {\n    service: url,\n    layerNames: layerNames,\n    sector: WorldWind.Sector.FULL_SPHERE,\n    levelZeroDelta: new WorldWind.Location(36, 36),\n    numLevels: 15,\n    format: \"image/png\",\n    size: 256\n  };\n\n  // Purposely null for now\n  var timeString = '';\n  var _wmsLayer = new WorldWind.WmsLayer(config, timeString);\n  /**\n   * @name EMPWorldWind.data.EmpWMS#layer\n   * @type {WorldWind.WmsLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _wmsLayer\n  });\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.KmlLayer} kml\n */\nEMPWorldWind.data.EmpKMLLayer = function(kml) {\n  this.id = kml.coreId;\n\n  /** @type {emp.typeLibrary.KmlLayer} */\n  this.kml = kml;\n\n  /**\n   * @param {emp.typeLibrary.KmlLayer} kml\n   * @private\n   */\n  function _buildURL(kml) {\n    // Set the URL to the service\n    if (kml.useProxy) {\n      return emp3.api.global.configuration.urlProxy + \"?url=\" + kml.url;\n    }\n    return kml.url;\n  }\n\n  /** @type {string} */\n  this.url = _buildURL(kml);\n\n  /**\n   * @type {WorldWind.KmlFile}\n   */\n  this.layer = new WorldWind.RenderableLayer(this.id);\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc Container class for establishing mappings between empFeatures and the WorldWind representations.\n * A Feature may consist of any number of WorldWind Surface shapes. Any direct interaction with the WorldWind features\n * will occur in this class.\n *\n * @class\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.data.EmpFeature = function(feature) {\n  /**\n   * The storage of all the shapes composing the primary shape\n   * @type {WorldWind.SurfaceShape[]}\n   */\n  this.shapes = [];\n\n  /**\n   * The native EMP Feature\n   * @type {emp.typeLibrary.Feature}\n   */\n  this.feature = feature;\n\n  var _id = feature.coreId;\n  /**\n   * @readonly\n   * @name EMPWorldWind.data.EmpFeature#id\n   */\n  Object.defineProperty(this, 'id', {\n    enumerable: true,\n    value: _id\n  });\n\n  var _altitudeMode = WorldWind.CLAMP_TO_GROUND;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#altitudeMode\n   */\n  Object.defineProperty(this, 'altitudeMode', {\n    enumerable: true,\n    get: function() { return _altitudeMode; },\n    set: function(altMode) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].altitudeMode = altMode;\n      }\n      _altitudeMode = altMode;\n    }\n  });\n\n  var _selected = false;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#selected\n   */\n  Object.defineProperty(this, 'selected', {\n    enumerable: true,\n    get: function() { return _selected; },\n    set: function(value) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].highlighted = value;\n      }\n      _selected = value;\n    }\n  });\n};\n\n/**\n * Convenience function\n * @returns {Number}\n */\nEMPWorldWind.data.EmpFeature.prototype.shapesCount = function() {\n  return this.shapes.length;\n};\n\n/**\n *\n * @param {WorldWind.SurfaceShape|WorldWind.SurfaceShape[]|*} primitives\n */\nEMPWorldWind.data.EmpFeature.prototype.addShapes = function(primitives) {\n  if (!Array.isArray(primitives)) {\n    if (primitives instanceof WorldWind.RenderableLayer) { // TODO this doesn't smell right, may need to handle KML differently\n      primitives.renderables[0].userProperties.id = this.id;\n    } else {\n      primitives.userProperties.id = this.id;\n    }\n    this.shapes.push(primitives);\n\n  } else {\n    emp.util.each(primitives, function(primitive) {\n      primitive.userProperties.id = this.id;\n      this.shapes.push(primitive);\n    }.bind(this));\n  }\n};\n\n/**\n * Clears all primitives from the feature. It does not remove them from any layers they are rendered on so that must be\n * done first.\n */\nEMPWorldWind.data.EmpFeature.prototype.clearShapes = function() {\n  this.shapes = [];\n};\n\n/**\n *\n * @param {boolean} visible\n */\nEMPWorldWind.data.EmpFeature.prototype.setVisible = function(visible) {\n  emp.util.each(this.shapes, function(shape) {\n    shape.enabled = visible;\n  });\n};","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants = {\n  view: {\n    MAX_HEIGHT: 10000000\n  }\n};\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasMoving = false;\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasZooming = false;\n\n/** @type {number} */\nEMPWorldWind.constants.globeMoveTime = 2000;\n\n/** @type {number} */\nEMPWorldWind.constants.extentBufferFactor = .4; // use when flyto a feature so the camera is not too close to it.\n\n/** @type {boolean} */\nEMPWorldWind.constants.USE_DATA_SOURCE = false;\n\n/** @constant {number} */\nEMPWorldWind.constants.WHITE_CONTRAST = 0;\n\n/** @constant {number} */\nEMPWorldWind.constants.BLACK_CONTRAST = 1;\n\n/**\n * Copied from Cesium\n * @enum\n */\nEMPWorldWind.constants.IconSize = {\n  \"verySmall\": 0.5,\n  \"tiny\" : 0.5, // Duplicate of verySmall\n  \"small\": 0.75,\n  \"medium\": 1.0,\n  \"large\": 1.5,\n  \"extraLarge\": 1.75\n};\n\n/**\n * @constant\n * @enum\n */\nEMPWorldWind.constants.PAN_STATE = {\n  HALTED: 'halted',\n  PANNING: 'panning',\n  COMPLETE: 'complete'\n};\n\n/**\n * No panning state for autoPanning in smart motion\n * @constant {object}\n */\nEMPWorldWind.constants.NO_PANNING = {\n  state: String(EMPWorldWind.constants.PAN_STATE.HALTED),\n  step: 0,\n  up: false,\n  down: false,\n  right: false,\n  left: false\n};\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.METERS_PER_INCH = 0.0254;\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.SCALE_LINE_LENGTH = 50;\n\n/**\n * @readonly\n */\nEMPWorldWind.constants.propertyDefaults = {\n  FILL_COLOR_HEX: \"ffffff\",\n  LINE_COLOR_HEX: \"000000\",\n  LINE_WIDTH: 1\n};\n\n/**\n * @readonly\n * @type {{COLOR_HEX: string, WIDTH: number, SCALE: number}}\n */\nEMPWorldWind.constants.selectionProperties = {\n  COLOR_HEX: 'FFFF00',\n  WIDTH: 2,\n  SCALE: 0.5\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.FeatureType = {\n  ENTITY: \"entity\",\n  RENDERABLE: \"renderable\",\n  PRIMITIVE: \"primitive\",\n  GROUND_PRIMITIVE: \"ground_primitive\",\n  DATA_SOURCE: \"dataSource\",\n  COMPOUND_ENTITY: \"compoundEntity\",\n  PRIMITIVE_COLLECTION: \"primitiveCollection\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LayerType = {\n  OVERLAY_LAYER: \"overlay\",\n  WMS_LAYER: \"wms\",\n  IMAGE_LAYER: \"image\",\n  BING_LAYER: \"bing\",\n  ARCGIS_93_REST_LAYER: \"arcgis93rest\",\n  OSM_LAYER: \"osm\",\n  TMS_LAYER: \"tms\",\n  TERRAIN_LAYER: \"terrain\",\n  WMTS_LAYER: \"wmts\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.EntityType = {\n  BILLBOARD: \"billboard\",\n  BOX: \"box\",\n  CORRIDOR: \"corridor\",\n  CYLINDER: \"cylinder\",\n  DESCRIPTION: \"description\",\n  ELLIPSE: \"ellipse\",\n  ELLIPSOID: \"ellipsoid\",\n  LABEL: \"label\",\n  MODEL: \"model\",\n  ORIENTATION: \"orientation\",\n  PATH: \"path\",\n  POLYGON: \"polygon\",\n  POLYLINE: \"polyline\",\n  POLYLINE_VOLUME: \"polylineVolume\",\n  POSITION: \"position\",\n  RECTANGLE: \"rectangle\",\n  VIEW_FROM: \"viewFrom\",\n  WALL: \"wall\",\n  KML: \"kml\"\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.MultiPointRenderType = {\n  KML: 0,\n  /** @deprecated */\n  JSON: 1,\n  GEOJSON: 2,\n  DATA_URL: 4,\n  CANVAS: 3,\n  CANVAS_LABEL_ONLY: 5,\n  SVG: 6,\n  SVG_LABEL_ONLY: 7\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.SinglePointAltitudeRangeMode = {\n  LOW_RANGE: 0,\n  MID_RANGE: 1,\n  HIGHEST_RANGE: 2\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererWorker = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LabelStyle = {\n  REQUIRED_LABELS: 'required_labels',\n  COMMON_LABELS: 'common_labels',\n  ALL_LABELS: 'all_labels'\n};\n\n/**\n * Modifiers for All labels to be displayed\n * @enum {object}\n * @constant\n */\nEMPWorldWind.constants.AllLabels = {\n  \"V\": true,\n  \"L\": true,\n  \"S\": true,\n  \"AA\": true,\n  \"AB\": true,\n  \"AC\": true,\n  \"H\": true,\n  \"M\": true,\n  \"T\": true,\n  \"T1\": true,\n  \"CN\": true,\n  \"C\": true,\n  \"F\": true,\n  \"G\": true,\n  \"H1\": true,\n  \"H2\": true,\n  \"J\": true,\n  \"K\": true,\n  \"N\": true,\n  \"P\": true,\n  \"W\": true,\n  \"W1\": true,\n  \"X\": true,\n  \"Y\": true,\n  \"Z\": true\n};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants.RendererSettings = {};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.standard = {\n  'Symbology_2525Bch2_USAS_13_14': 0,\n  'Symbology_2525C': 1\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.modifierLookup = {\n  QUANTITY: \"quantity\",\n  REDUCED_OR_REINFORCED: \"reinforcedOrReduced\",\n  STAFF_COMMENTS: \"staffComments\",\n  ADDITIONAL_INFO_1: \"additionalInfo1\",\n  ADDITIONAL_INFO_2: \"additionalInfo2\",\n  ADDITIONAL_INFO_3: \"additionalInfo3\",\n  EVALUATION_RATING: \"evaluationRating\",\n  COMBAT_EFFECTIVENESS: \"combatEffectiveness\",\n  SIGNATURE_EQUIPMENT: \"signatureEquipment\",\n  HIGHER_FORMATION: \"higherFormation\",\n  HOSTILE: \"hostile\",\n  IFF_SIF: \"iffSiff\",\n  DIRECTION_OF_MOVEMENT: \"directionOfMovement\",\n  OFFSET_INDICATOR: \"offsetIndicator\",\n  UNIQUE_DESIGNATOR_1: \"uniqueDesignation1\",\n  UNIQUE_DESIGNATOR_2: \"uniqueDesignation2\",\n  EQUIPMENT_TYPE: \"equipmentType\",\n  DATE_TIME_GROUP: \"dateTimeGroup1\",\n  DATE_TIME_GROUP_2: \"dateTimeGroup2\",\n  ALTITUDE_DEPTH: \"altitudeDepth\",\n  LOCATION: \"location\",\n  SPEED: \"speed\",\n  SPECIAL_C2_HEADQUARTERS: \"specialC2Headquarters\",\n  DISTANCE: \"distance\",\n  AZIMUTH: \"azimuth\",\n  FILL_COLOR: \"fillColor\",\n  LINE_COLOR: \"lineColor\",\n  TEXT_COLOR: \"textColor\",\n  X_OFFSET: \"xOffset\",\n  X_UNITS: \"xUnits\",\n  Y_OFFSET: \"yOffset\",\n  Y_UNITS: \"yUnits\",\n  NAME: \"name\",\n  STANDARD: \"standard\"\n};\n\nEMPWorldWind.constants.highAltitudeRangeImage = {};\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\"  r=\"3\" fill=\"red\" stroke=\"red\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle cx=\"12\" cy=\"12\"  r=\"3\" fill=\"blue\" stroke=\"blue\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"green\" stroke=\"green\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"yellow\" stroke=\"yellow\" stroke-width=\"1\"  /></g></svg>');\n//EMPWorldWind.constants.highAltitudeRangeImage.blankMultipoint = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"2px\" height=\"2px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"black\" stroke=\"black\" stroke-width=\"1\"  /></g></svg>');\n\n\n","var EMPWorldWind = EMPWorldWind || {};\n\n(function() {\n  /**\n   * @namespace\n   */\n  EMPWorldWind.utils = {};\n\n  /**\n   * @typedef {object} RGBAColor\n   * @property {number} red\n   * @property {number} green\n   * @property {number} blue\n   * @property {number} alpha 0-1\n   */\n\n  /**\n   *\n   * @param {MouseEvent} event\n   * @returns {{lat: undefined, lon: undefined, clientX: *, clientY: *, screenX: *, screenY: *}}\n   */\n  EMPWorldWind.utils.getEventCoordinates = function(event) {\n    var pickPoint = this.worldWindow.canvasCoordinates(event.clientX, event.clientY);\n    var terrainObject = this.worldWindow.pickTerrain(pickPoint).terrainObject();\n\n    return {\n      lat: terrainObject ? terrainObject.position.latitude : undefined,\n      lon: terrainObject ? terrainObject.position.longitude : undefined,\n      clientX: event.clientX,\n      clientY: event.clientY,\n      screenX: event.screenX,\n      screenY: event.screenY\n    };\n  };\n\n  /**\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  EMPWorldWind.utils.defined = function(value) {\n    return value !== undefined && value !== null;\n  };\n\n  /**\n   * @namespace\n   */\n  EMPWorldWind.utils.milstd = {};\n\n  /**\n   *\n   * @param properties\n   * @param name\n   * @param iconLabels\n   * @param iconPixelSize\n   * @returns {{}}\n   */\n  EMPWorldWind.utils.milstd.updateModifierLabels = function(properties, name, iconLabels, iconPixelSize) {\n    var mod,\n      modifiedModifiers = {},\n      property,\n      size;\n\n    // loop through all the properties, add a parameter for each property\n    for (property in properties) {\n      if (properties.hasOwnProperty(property)) {\n        switch (property) {\n          case \"labelColor\":\n            // Convert labelColor to textColor\n            modifiedModifiers[\"textColor\"] = properties[property];\n            break;\n          case \"fillColor\":\n            modifiedModifiers[\"fillColor\"] = properties[property];\n            break;\n          case \"lineColor\":\n            modifiedModifiers[\"lineColor\"] = properties[property];\n            break;\n          case \"modifiers\":\n            // modifiers contains an object that has other properties in it.\n            // loop through each of the properties and add parameters to those\n            // that are relevant.\n            for (mod in properties[property]) {\n              if (properties[property].hasOwnProperty(mod)) {\n                switch (mod) {\n                  case \"quantity\":\n                    if (iconLabels.C && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"quantity\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"reinforcedOrReduced\":\n                    if (iconLabels.F && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"reinforcedOrReduced\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"staffComments\":\n                    if (iconLabels.G && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"staffComments\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"additionalInfo1\":\n                    if (iconLabels.H && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"additionalInfo1\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"additionalInfo2\":\n                    if (iconLabels.H1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"additionalInfo2\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"additionalInfo3\":\n                    if (iconLabels.H2 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"additionalInfo3\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"evaluationRating\":\n                    if (iconLabels.J && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"evaluationRating\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"combatEffectiveness\":\n                    if (iconLabels.K && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"combatEffectiveness\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"signatureEquipment\":\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"signatureEquipment\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"higherFormation\":\n                    if (iconLabels.M && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"higherFormation\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"hostile\":\n                    if (iconLabels.N && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"hostile\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"iffSif\":\n                    if (iconLabels.P && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"iffSif\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"offsetIndicator\":\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"offsetIndicator\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"uniqueDesignation1\":\n                    if (iconLabels.T && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"uniqueDesignation1\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"uniqueDesignation2\":\n                    if (iconLabels.T1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"uniqueDesignation2\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"equipmentType\":\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"equipmentType\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"dateTimeGroup1\":\n                    if (iconLabels.W && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"dateTimeGroup1\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"dateTimeGroup2\":\n                    if (iconLabels.W1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"dateTimeGroup2\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"altitudeDepth\":\n                    if (iconLabels.X) {\n                      modifiedModifiers[\"altitudeDepth\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"location\":\n                    if (iconLabels.Y && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"location\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"speed\":\n                    if (iconLabels.Z && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"speed\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"specialC2Headquarters\":\n                    if (iconLabels.AA && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[\"specialC2Headquarters\"] = properties[property][mod];\n                    }\n                    break;\n                  case \"distance\":\n                    modifiedModifiers[\"distance\"] = properties[property][mod];\n                    break;\n                  case \"azimuth\":\n                    modifiedModifiers[\"azimuth\"] = properties[property][mod];\n                    break;\n                  case \"standard\":\n                    modifiedModifiers[\"standard\"] = properties[property][mod];\n                    break;\n                  case \"size\":\n                    size = properties[property][mod];\n                    if (!size) {\n                      size = iconPixelSize;\n                    }\n                    modifiedModifiers[\"size\"] = size;\n                    break;\n                  default:\n                    if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                      modifiedModifiers[mod] = properties[property][mod];\n                    }\n                    break;\n                }\n              }\n            }\n            break;\n        }\n      }\n    }\n\n    if (iconLabels.CN) {\n      modifiedModifiers[\"name\"] = name;\n    }\n    return modifiedModifiers;\n  };\n\n  /**\n   *\n   * @param modifiers\n   * @param showModLabels\n   * @returns {object}\n   */\n  EMPWorldWind.utils.milstd.convertModifierStringTo2525 = function(modifiers, showModLabels) {\n    var standardModifiers = {};\n\n    if (modifiers !== undefined && modifiers !== null) {\n      for (var sModifier in modifiers) {\n        if (modifiers.hasOwnProperty(sModifier)) {\n          var modValue = modifiers[sModifier];\n          if (modValue !== null && modValue !== \"null\" && modValue !== 0) {\n            switch (sModifier) {\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.QUANTITY:\n                if (showModLabels) {\n                  standardModifiers[\"C\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.REDUCED_OR_REINFORCED:\n                if (showModLabels) {\n                  standardModifiers[\"F\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.STAFF_COMMENTS:\n                if (showModLabels) {\n                  standardModifiers[\"G\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_1:\n                if (showModLabels) {\n                  standardModifiers[\"H\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_2:\n                if (showModLabels) {\n                  standardModifiers[\"H1\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_3:\n                if (showModLabels) {\n                  standardModifiers[\"H2\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.EVALUATION_RATING:\n                if (showModLabels) {\n                  standardModifiers[\"J\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.COMBAT_EFFECTIVENESS:\n                if (showModLabels) {\n                  standardModifiers[\"K\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.SIGNATURE_EQUIPMENT:\n                if (showModLabels) {\n                  standardModifiers[\"L\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.HIGHER_FORMATION:\n                if (showModLabels) {\n                  standardModifiers[\"M\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.HOSTILE:\n                if (showModLabels) {\n                  standardModifiers[\"N\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.IFF_SIF:\n                if (showModLabels) {\n                  standardModifiers[\"P\"] = modValue;\n                }\n                break;\n              // Direction of movement cannot work on 3D because the view can rotate\n              // case EMPWorldWind.constants.RendererSettings.modifierLookup.DIRECTION_OF_MOVEMENT:\n              //    modifiersArray.push(\"Q=\" + modValue);\n              //    break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.OFFSET_INDICATOR:\n                standardModifiers[\"S\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_1:\n                if (showModLabels) {\n                  standardModifiers[\"T\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_2:\n                if (showModLabels) {\n                  standardModifiers[\"T1\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.EQUIPMENT_TYPE:\n                if (showModLabels) {\n                  standardModifiers[\"V\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP:\n                if (showModLabels) {\n                  standardModifiers[\"W\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP_2:\n                if (showModLabels) {\n                  standardModifiers[\"W1\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.ALTITUDE_DEPTH:\n                if (showModLabels) {\n                  standardModifiers[\"X\"] = JSON.parse(JSON.stringify(modValue));\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.LOCATION:\n                if (showModLabels) {\n                  standardModifiers[\"Y\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.SPEED:\n                if (showModLabels) {\n                  standardModifiers[\"Z\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.SPECIAL_C2_HEADQUARTERS:\n                if (showModLabels) {\n                  standardModifiers[\"AA\"] = modValue;\n                }\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.DISTANCE:\n                standardModifiers[\"AM\"] = JSON.parse(JSON.stringify(modValue));\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.AZIMUTH:\n                standardModifiers[\"AN\"] = JSON.parse(JSON.stringify(modValue));\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.FILL_COLOR:\n                standardModifiers[\"FILLCOLOR\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.LINE_COLOR:\n                standardModifiers[\"LINECOLOR\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.TEXT_COLOR:\n                standardModifiers[\"TEXTCOLOR\"] = modValue;\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.STANDARD:\n                // convert standard string value  to modifier numeric\n                standardModifiers[emp.typeLibrary.utils.milstd.Modifiers.STANDARD] = EMPWorldWind.utils.convertSymbolStandardToRendererFormat(modifiers);\n                break;\n              case EMPWorldWind.constants.RendererSettings.modifierLookup.NAME:\n              case \"CN\":\n                if (showModLabels) {\n                  standardModifiers[\"CN\"] = modValue;\n                }\n                break;\n              default:\n                standardModifiers[sModifier] = modValue;\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    return standardModifiers;\n  };\n\n  /**\n   * Borrowed from the Cesium Implementation\n   *\n   * @param item\n   * @returns {object}\n   */\n  EMPWorldWind.utils.milstd.checkForRequiredModifiers = function(item) {\n    var result = {},\n      symbolCode,\n      properties = {},\n      modifiers = {},\n      oAM = [],\n      oAN = [],\n      basicSymbolCode,\n      standard,\n      symbolDef,\n      i,\n      lonDistance,\n      overrides = {};\n\n    // Check to see if the properties and modifiers have not yet been set.\n    // If they don't exist, this will default them to empty objects.\n    if (item.data && item.data.symbolCode) {\n      symbolCode = item.data.symbolCode;\n    }\n    else if (item.symbolCode) {\n      symbolCode = item.symbolCode;\n    }\n\n    if (item.properties) {\n      properties = item.properties;\n      if (properties.modifiers) {\n        modifiers = properties.modifiers;\n      }\n      else {\n        properties.modifiers = {};\n        modifiers = properties.modifiers;\n      }\n    }\n    else {\n      item.properties = {\n        modifiers: {}\n      };\n\n      modifiers = item.properties.modifiers;\n    }\n\n    // Get the basic symbol code.  We need the basic code because we need to look it up with\n    // getSymbolDef.  This requires the basic code.\n    basicSymbolCode = armyc2.c2sd.renderer.utilities.SymbolUtilities.getBasicSymbolID(symbolCode);\n    // Get the standard we are using.  We need to convert it to what the function getSymbolDef uses.\n    standard = EMPWorldWind.utils.milstd.checkSymbolStandard(item.properties.modifiers);\n    // Retrieve the symbol definition object.  This contains information about the required\n    // symbol modifiers.  We will use this to determine which modifiers are not sufficiently\n    // populated.\n    symbolDef = armyc2.c2sd.renderer.utilities.SymbolDefTable.getSymbolDef(basicSymbolCode, standard);\n    if ((symbolDef === undefined) || (symbolDef === null)) {\n      return result;\n    }\n    // The only modifiers that are sometimes required in MIL-STD-2525B and C are\n    // distance and azimuth.\n    //\n    // First check if distance and azimuth has already been set.  If they are, we\n    // still may not have enough entries for them (as both are arrays), so we still need to\n    // verify that they are good.\n\n    // If distance already exists retrieve the values in it.\n    if (modifiers.hasOwnProperty(\"distance\")) {\n      // Lets make sure that if it is there that it is an array.\n      if (modifiers.distance instanceof Array) {\n        oAM = modifiers.distance;\n      }\n    }\n    // If azimuth already exists retrieve the values of it.\n    if (modifiers.hasOwnProperty(\"azimuth\")) {\n      // Lets make sure that if it is there that it is an array.\n      if (modifiers.azimuth instanceof Array) {\n        oAN = modifiers.azimuth;\n      }\n    }\n    // Based on the symbol draw category, we can determine if the symbol has\n    // has the required parameters or not.  For each draw category, we do a different\n    // check.\n    switch (symbolDef.drawCategory) {\n      // These are circle graphics represented by a single point and a radius.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE: //16\n        if (oAM !== null && oAM.length > 0) {\n          oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n        }\n        else {\n          oAM[0] = 5000;\n        }\n\n        overrides = {\n          distance: oAM\n        };\n        break;\n      // These are 1-point rectangles with an azimuth that determine the angle, and a distance that determines width\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE: //17\n        if ((oAM !== null) && (oAM.length >= 2) &&\n          (typeof (oAM[0]) === \"number\") &&\n          (typeof (oAM[1]) === \"number\")) {\n          oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n        }\n        else {\n          // Check to see if the [0] value is present and its a number.\n          // If not set a value.\n          if ((oAM[0] === undefined) || (typeof (oAM[0]) !== \"number\")) {\n            oAM[0] = 10000;\n          }\n          // Check to see if the [1] value is present and its a number.\n          // If not set a value.\n          if ((oAM[1] === undefined) || (typeof (oAM[1]) !== \"number\")) {\n            oAM[1] = 5000;\n          }\n          oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n        }\n\n        if ((oAN !== null) && (oAN.length >= 1) &&\n          (typeof (oAN[1]) === \"number\")) {\n          oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n        }\n        else {\n          // Check to see if the [0] value is present and its a number.\n          // If not set a value.\n          if ((oAN[0] === undefined) || (typeof (oAN[0]) !== \"number\")) {\n            oAN[0] = 0;\n          }\n          oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n        }\n        overrides = {\n          distance: oAM,\n          azimuth: oAN\n        };\n        break;\n      // This is a sector range fan, requires a point, a min and max distance for each sector, and left\n      // and right azimuths for each sector.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE: //18\n        if ((oAM !== null) && (oAM.length >= 2)) {\n          for (i = 0; i < oAM.length;) {\n            if (typeof (oAM[i]) !== \"number\") {\n              oAM.splice(i, 1);\n            }\n            else {\n              i++;\n            }\n          }\n        }\n        if (oAM.length > 1) {\n          // Check to see if the each value is present.\n          for (i = 0; i < oAM.length; i++) {\n            if (oAM[i] === undefined) {\n              oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n            }\n          }\n        }\n        else {\n          if (oAM[0] === undefined) {\n            oAM[0] = 2000;\n          }\n        }\n        // You need at least 2 azimuth values for this to be a drawable graphic\n        // If it doesn't have it, create it.\n        if (oAN.length === 0) {\n          oAN.push(315);\n          oAN.push(45);\n        }\n        else if (oAN.length === 1) {\n          var newVal = oAN[0] + 90;\n          if (newVal > 360) {\n            newVal = newVal - 360;\n          }\n          oAN.push(newVal);\n        }\n        overrides = {\n          distance: oAM,\n          azimuth: oAN\n        };\n        break;\n      // A circular range fan that is a point and multiple distances for each ring.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE: //19\n        if ((oAM !== null) && (oAM.length > 0)) {\n          for (i = 0; i < oAM.length;) {\n            if (typeof (oAM[i]) !== \"number\") {\n              oAM.splice(i, 1);\n            }\n            else {\n              i++;\n            }\n          }\n        }\n        if (oAM.length < 2) {\n          // Check to see if the each value is present.\n          for (i = 0; i < 2; i++) {\n            if (oAM[i] === undefined) {\n              oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n            }\n          }\n        }\n        overrides = {\n          distance: oAM\n        };\n        break;\n      // These are 2-point rectangles that determine the angle, and a distance that requires width\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE: //20\n        if (oAM !== null && oAM.length > 0) {\n          if (typeof (oAM[0]) !== \"number\") {\n            oAM[0] = 5000;\n          }\n          oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n        }\n        else {\n          oAM[0] = 5000;\n        }\n        overrides = {\n          distance: oAM\n        };\n        break;\n      // Any air corridor.\n      case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_LINE:\n        // This really only applies to air corridors.  As far as\n        // I know the only line that requires distance is air corridors.\n\n        // If we do not have the distance field set, or it is set\n        // and the array length is 0, then we want to set it to a default\n        // width.  We want to make the width in relation to the current\n        // scale of the map, otherwise the air corridor won't look like\n        // an air corridor; it will look like a line.\n\n        if ((oAM === null || oAM.length === 0) || (oAM.length > 0 && (isNaN(oAM[0]) || oAM[0] === null))) {\n          if (item.data && item.data.coordinates && item.data.coordinates.length > 1) {\n            var coord0 = item.data.coordinates[0];\n            var coord1 = item.data.coordinates[1];\n\n            // var pointCartographic0 = Cesium.Cartographic.fromDegrees(coord0[0], coord0[1], 0);\n            // var pointCartographic1 = Cesium.Cartographic.fromDegrees(coord1[0], coord1[1], 0);\n            // var dist = pointCartographic0.distanceTo(pointCartographic1);\n            // lonDistance = dist / 4;\n\n            var pointCartographic0 = new WorldWind.Location(coord0[0], coord0[1]);\n            var pointCartographic1 = new WorldWind.Location(coord1[0], coord1[1]);\n\n            var dist = WorldWind.Location.greatCircleDistance(pointCartographic0, pointCartographic1);\n\n            lonDistance = dist / 4;\n          }\n          else {\n            lonDistance = lonDistance / 34;\n          }\n\n          oAM[0] = lonDistance;\n          overrides = {\n            distance: oAM\n          };\n        }\n        else {\n          overrides = {\n            distance: oAM\n          };\n        }\n\n        break;\n    }\n\n    return overrides;\n  };\n\n  /**\n   *\n   * @param modifiers\n   * @returns {number}\n   */\n  EMPWorldWind.utils.milstd.checkSymbolStandard = function(modifiers) {\n    var standard = 1,\n      modifiersCopy,\n      modValue;\n\n    try {\n      if (modifiers !== undefined && modifiers !== null && modifiers !== \"\") {\n        modifiersCopy = typeof (modifiers) === \"string\" ? JSON.parse(modifiers) : emp.helpers.copyObject(modifiers);\n\n        if (modifiersCopy.hasOwnProperty(\"modifiers\")) {\n          modifiersCopy = modifiersCopy.modifiers;\n        }\n\n        if (modifiersCopy.hasOwnProperty(\"renderer\")) {\n          modValue = modifiersCopy.renderer;\n          if (modValue !== undefined && modValue !== null && modValue !== 0) {\n            if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n            }\n            else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n            }\n            else {\n              standard = modValue;\n            }\n          }\n        }\n        else if (modifiersCopy.hasOwnProperty(\"standard\")) {\n          modValue = modifiersCopy.standard;\n          if (modValue !== undefined && modValue !== null && modValue !== 0) {\n            if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n            }\n            else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) > -1) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n            }\n            else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n            }\n            else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) > -1) {\n              standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n            }\n            else {\n              standard = modValue;\n            }\n          }\n        }\n      }\n    }\n    catch (err) {\n      window.console.log(\"Error getting symbol standard\");\n    }\n\n    return standard;\n  };\n\n  /**\n   *\n   * @param modifiers\n   */\n  EMPWorldWind.utils.convertSymbolStandardToRendererFormat = function(modifiers) {\n    var standard,\n      modValue;\n\n    modValue = modifiers.standard;\n    if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n      standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n    }\n    else {\n      standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n    }\n\n    return standard;\n  };\n\n  /**\n   * Parses a 6 character color string, assumes full opacity\n   * @param hex #RRGGBB\n   * @returns {RGBAColor}\n   * @private\n   */\n  function _hex6ToRGBA(hex) {\n    hex = hex.replace('#', '');\n    var r, g, b;\n\n    r = parseInt(hex.substring(0, 2), 16);\n    g = parseInt(hex.substring(2, 4), 16);\n    b = parseInt(hex.substring(4, 6), 16);\n\n    return {\n      red: r,\n      green: g,\n      blue: b,\n      alpha: 1\n    };\n  }\n\n  /**\n   * Parses an 8 character color string\n   * @param hex AARRGGBB format\n   * @returns {RGBAColor}\n   * @private\n   */\n  function _hex8ToRGBA(hex) {\n    var r, g, b, a;\n\n    a = parseInt(hex.substring(0, 2), 16) / 256.0;\n    r = parseInt(hex.substring(2, 4), 16);\n    g = parseInt(hex.substring(4, 6), 16);\n    b = parseInt(hex.substring(6, 8), 16);\n\n    return {\n      red: r,\n      green: g,\n      blue: b,\n      alpha: a\n    };\n  }\n\n  /**\n   * @example\n   * hexToRGBA(\"#00FF83\")\n   *\n   * @param {string} hex\n   * @param {float} [alpha=1] 0-1 expected range\n   * @param {boolean} [normalize=true] True produce float values between 0 and 1, otherwise integers between 0 and 255\n   * @returns {RGBAColor}\n   */\n  EMPWorldWind.utils.hexToRGBA = function(hex, alpha, normalize) {\n    var newHex;\n\n    if (!hex) {\n      return {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 1\n      };\n    }\n    normalize = EMPWorldWind.utils.defined(normalize) ? normalize : true;\n    alpha = EMPWorldWind.utils.defined(alpha) ? alpha : 1;\n\n    if (hex.length === 8) {\n      newHex = _hex8ToRGBA(hex);\n    }\n    else {\n      newHex = _hex6ToRGBA(hex);\n      newHex.alpha = alpha;\n    }\n\n    if (normalize) {\n      newHex.red = newHex.red / 256.0;\n      newHex.green = newHex.green / 256.0;\n      newHex.blue = newHex.blue / 256.0;\n    }\n\n    return newHex;\n  };\n\n  /**\n   * Will normalize an {@link RGBAColor} object, will return the same object if already normalized\n   * (contains a decimal in the value)\n   *\n   * WorldWind.Color requires 0-1 values for color\n   *\n   * @param {RGBAColor} color\n   * @returns {RGBAColor}\n   */\n  EMPWorldWind.utils.normalizeRGBAColor = function(color) {\n    var normalize,\n      normalColor = Object.assign({}, color);\n\n    normalize = color.red.toString().indexOf('.') === -1 ||\n      color.green.toString().indexOf('.') === -1 ||\n      color.blue.toString().indexOf('.') === -1;\n\n    if (normalize) {\n      normalColor.red = color.red / 256.0;\n      normalColor.green = color.green / 256.0;\n      normalColor.blue = color.blue / 256.0;\n    }\n\n    return normalColor;\n  };\n\n  /**\n   * Returns the east-west distance of the bounds\n   * @param {Bounds} bounds\n   * @returns {number}\n   */\n  EMPWorldWind.utils.boundsWidth = function(bounds) {\n    return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n        new WorldWind.Location(0, bounds.west),\n        new WorldWind.Location(0, bounds.east));\n  };\n\n  /**\n   * Returns the north-south distance of the bounds\n   * @param {Bounds} bounds\n   * @returns {number}\n   */\n  EMPWorldWind.utils.boundsHeight = function(bounds) {\n    return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n        new WorldWind.Location(bounds.south, 0),\n        new WorldWind.Location(bounds.north, 0));\n  };\n\n  /**\n   * Dot color based on the symbol code affiliation\n   * @param symbolCode\n   * @returns {*}\n   */\n  EMPWorldWind.utils.selectHighAltitudeRangeImage = function(symbolCode) {\n    var affiliationLetter,\n      highAltitudeRangeImage;\n\n    if (!EMPWorldWind.utils.defined(symbolCode)) {\n      return EMPWorldWind.constants.highAltitudeRangeImage.highScaleImageYellow; // unknown\n    }\n\n    affiliationLetter = symbolCode.substring(1, 2);\n    switch (affiliationLetter.toLowerCase()) {\n      case \"h\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed;\n        break;\n      case \"f\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue;\n        break;\n      case \"n\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen;\n        break;\n      case \"u\":\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n        break;\n      default:\n        highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n        break;\n    }\n    return highAltitudeRangeImage;\n  };\n\n  /**\n   *\n   * @param CameraAltitude\n   * @param singlePointAltitudeRanges\n   * @returns {EMPWorldWind.constants.SinglePointAltitudeRangeMode|number}\n   */\n  EMPWorldWind.utils.getSinglePointAltitudeRangeMode = function(CameraAltitude, singlePointAltitudeRanges) {\n    if (CameraAltitude < singlePointAltitudeRanges.mid) {\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    }\n    else if (CameraAltitude >= singlePointAltitudeRanges.mid && CameraAltitude < singlePointAltitudeRanges.high) {\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE;\n    }\n    else if (CameraAltitude >= singlePointAltitudeRanges.high) {\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE;\n    }\n    else {\n      //default\n      return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    }\n  };\n\n  /**\n   *\n   * @param name\n   * @param size\n   * @param style\n   * @returns {{name: *, size: *, style: *, measurements: *}}\n   */\n  EMPWorldWind.utils.getFontInfo = function(name, size, style) {\n    var _ModifierFont;\n    var _ModifierFontStyle = size;\n    if (style !== 'bold' || style !== 'normal') {\n      _ModifierFontStyle = style;\n    }\n    else {\n      _ModifierFontStyle = 'bold';\n    }\n    _ModifierFont = _ModifierFontStyle + \" \" + size + \"pt \" + name;\n\n    var measurements = armyc2.c2sd.renderer.utilities.RendererUtilities.measureFont(_ModifierFont);\n    return {name: name, size: size, style: style, measurements: measurements};\n  };\n\n  /**\n   *\n   * @param fn\n   * @param delay\n   * @param context\n   * @returns {limited}\n   * @constructor\n   */\n  EMPWorldWind.utils.MultiPointRateLimit = function(fn, delay, context) {\n    var queue = [],\n      timer = null;\n    //context.newAddRateLimitQueue = queue;\n\n    function processQueue() {\n      var index = 0;\n      var items = [];\n      while (index < 200) {\n        var item = queue.shift();\n        if (item && item.context.isFeaturePresent(item.arguments.id || item.arguments.coreId)) {\n          // condition checks the case when the multi point was deleted while this request was in this queue.\n          items.push(item.arguments);\n        }\n        if (queue.length === 0) {\n          break;\n        }\n        index = index + 1;\n      }\n      if (items.length > 0) {\n        fn.apply(item.context, [items]);\n      }\n      if (items.length > 0) {\n        // item.context.viewer.dataSourceDisplay.update(Cesium.JulianDate.fromDate(new Date()));\n      }\n      if (queue.length === 0)\n        clearInterval(timer), timer = null;\n    }\n\n    return function limited() {\n      //reset queue to remove all features already expired. Expire when map moves.\n      queue = [];\n      for (var index = 0; index < arguments[0].length; index++) {\n        var feature = arguments[0][index];\n        queue.push({\n          context: context || this,\n          arguments: feature\n          //arguments: [].slice.call(feature)\n        });\n      }\n\n      if (!timer) {\n        processQueue(); // start immediately on the first invocation\n        //                if (queue.length > 20)\n        //                {\n        //                    processQueue();\n        //                }\n        //                else\n        //                {\n        timer = setInterval(processQueue, delay);\n        //}\n        //timer = setInterval(processQueue, (queue.length > 20) ? delay * 2 : delay);\n\n      }\n    };\n\n  };\n\n  /**\n   * @namespace\n   */\n  EMPWorldWind.Math = {};\n\n  /**\n   * Determines if two values are equal using an absolute or relative tolerance test. This is useful\n   * to avoid problems due to roundoff error when comparing floating-point values directly. The values are\n   * first compared using an absolute tolerance test. If that fails, a relative tolerance test is performed.\n   * Use this test if you are unsure of the magnitudes of left and right.\n   *\n   * @param {Number} left The first value to compare.\n   * @param {Number} right The other value to compare.\n   * @param {Number} relativeEpsilon The maximum inclusive delta between <code>left</code> and <code>right</code> for the relative tolerance test.\n   * @param {Number} [absoluteEpsilon=relativeEpsilon] The maximum inclusive delta between <code>left</code> and <code>right</code> for the absolute tolerance test.\n   * @returns {Boolean} <code>true</code> if the values are equal within the epsilon; otherwise, <code>false</code>.\n   *\n   * @example\n   * var a = Cesium.Math.equalsEpsilon(0.0, 0.01, Cesium.Math.EPSILON2); // true\n   * var b = Cesium.Math.equalsEpsilon(0.0, 0.1, Cesium.Math.EPSILON2);  // false\n   * var c = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON7); // true\n   * var d = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON9); // false\n   */\n  EMPWorldWind.Math.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\n    absoluteEpsilon = EMPWorldWind.Math.defaultValue(absoluteEpsilon, relativeEpsilon);\n    var absDiff = Math.abs(left - right);\n    return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\n  };\n\n  /**\n   * Returns the first parameter if not undefined, otherwise the second parameter.\n   * Useful for setting a default value for a parameter.\n   *\n   * @exports defaultValue\n   *\n   * @param {*} a\n   * @param {*} b\n   * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\n   *\n   * @example\n   * param = Cesium.defaultValue(param, 'default');\n   */\n  EMPWorldWind.Math.defaultValue = function(a, b) {\n    if (a !== undefined) {\n      return a;\n    }\n    return b;\n  };\n\n  /**\n   * 0.1\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON1 = 0.1;\n\n  /**\n   * 0.01\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON2 = 0.01;\n\n  /**\n   * 0.001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON3 = 0.001;\n\n  /**\n   * 0.0001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON4 = 0.0001;\n\n  /**\n   * 0.00001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON5 = 0.00001;\n\n  /**\n   * 0.000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON6 = 0.000001;\n\n  /**\n   * 0.0000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON7 = 0.0000001;\n\n  /**\n   * 0.00000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON8 = 0.00000001;\n\n  /**\n   * 0.000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON9 = 0.000000001;\n\n  /**\n   * 0.0000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON10 = 0.0000000001;\n\n  /**\n   * 0.00000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON11 = 0.00000000001;\n\n  /**\n   * 0.000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON12 = 0.000000000001;\n\n  /**\n   * 0.0000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON13 = 0.0000000000001;\n\n  /**\n   * 0.00000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON14 = 0.00000000000001;\n\n  /**\n   * 0.000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON15 = 0.000000000000001;\n\n  /**\n   * 0.0000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON16 = 0.0000000000000001;\n\n  /**\n   * 0.00000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON17 = 0.00000000000000001;\n\n  /**\n   * 0.000000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON18 = 0.000000000000000001;\n\n  /**\n   * 0.0000000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON19 = 0.0000000000000000001;\n\n  /**\n   * 0.00000000000000000001\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.EPSILON20 = 0.00000000000000000001;\n\n  /**\n   * 3.986004418e14\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.GRAVITATIONALPARAMETER = 3.986004418e14;\n\n  /**\n   * Radius of the sun in meters: 6.955e8\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.SOLAR_RADIUS = 6.955e8;\n\n  /**\n   * The mean radius of the moon, according to the \"Report of the IAU/IAG Working Group on\n   * Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000\",\n   * Celestial Mechanics 82: 83-110, 2002.\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.LUNAR_RADIUS = 1737400.0;\n\n  /**\n   * 64 * 1024\n   * @type {Number}\n   * @constant\n   */\n  EMPWorldWind.Math.SIXTY_FOUR_KILOBYTES = 64 * 1024;\n\n  /**\n   * Returns the sign of the value; 1 if the value is positive, -1 if the value is\n   * negative, or 0 if the value is 0.\n   *\n   * @param {Number} value The value to return the sign of.\n   * @returns {Number} The sign of value.\n   */\n  EMPWorldWind.Math.sign = function(value) {\n    if (value > 0) {\n      return 1;\n    }\n    if (value < 0) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  /**\n   * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n   * This is similar to {@link CesiumMath#sign} except that returns 1.0 instead of\n   * 0.0 when the input value is 0.0.\n   * @param {Number} value The value to return the sign of.\n   * @returns {Number} The sign of value.\n   */\n  EMPWorldWind.Math.signNotZero = function(value) {\n    return value < 0.0 ? -1.0 : 1.0;\n  };\n}());\n","var EMPWorldWind = window.EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * Set of builder functions that produce singular WorldWind primitive shapes and renderables.\n * @namespace\n */\nEMPWorldWind.editors.primitiveBuilders = (function() {\n\n  /** @type {Object.<string,function>} */\n  var builderMap = {};\n\n  /**\n   * @todo Use update from NASA WW to handle 3d airspaces\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.Polygon}\n   */\n  function constructAirControlMeasure(feature, selectionStyle) {\n    var primitivePolygon, boundaries, attributes, highlightAttributes,\n      i, selectedFillColor,\n      len = feature.data.coordinates.length;\n\n    attributes = new WorldWind.ShapeAttributes();\n    highlightAttributes = new WorldWind.ShapeAttributes();\n    // TODO highlight attributes for ACM\n\n    if (selectionStyle.fillColor) {\n      selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n      highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n    } else {\n      highlightAttributes.interiorColor = WorldWind.Color.YELLOW;\n    }\n\n    boundaries = [];\n    for (i = 0; i < len; i++) {\n      // TODO need updates to WorldWind to fix this correctly, also not setting altitude if there are multiple attributes\n      //boundaries[0].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].minAlt));\n      //boundaries[1].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n      boundaries.push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n    }\n\n    primitivePolygon = new WorldWind.Polygon(boundaries, attributes);\n    primitivePolygon.altitudeMode = WorldWind.ABSOLUTE;\n    primitivePolygon.extrude = true;\n    primitivePolygon.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n    return primitivePolygon;\n  }\n\n  /**\n   * Requires access to the current scope.\n   * ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceShape[]}\n   */\n  function constructMilStdSymbol(feature, selectionStyle) {\n    var modifiers, shapes = [];\n\n    /**\n     * @param {emp.typeLibrary.Feature} feature\n     * @param {object} modifiers\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Placemark}\n     * @private\n     */\n    function _constructSinglePointMilStdSymbol(feature, modifiers, selectionStyle) {\n      var placemark, attributes, highlightAttributes, position, imageInfo, imageCenter, imageBounds, imageOffset,\n        selectedImage, symbolCode, selectedModifiers,\n        eyeDistanceScaling = false;\n\n      attributes = new WorldWind.PlacemarkAttributes();\n\n      // Leaderline settings\n      attributes.drawLeaderLine = feature.properties.extrude || false;\n      attributes.leaderLineAttributes.outlineColor = WorldWind.Color.BLACK;\n\n      if (feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n        // Optimization\n        attributes.imageScale = 1;\n        attributes.imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.symbolCode);\n        attributes.imageOffset = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5, WorldWind.OFFSET_FRACTION, 0.5);// Centers the image on the geographic position.\n        highlightAttributes = new WorldWind.PlacemarkAttributes();\n        highlightAttributes.imageColor = WorldWind.Color.WHITE;\n        highlightAttributes.imageSource = attributes.imageSource;\n      } else {\n\n        if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) && feature.symbolCode) {\n          // do not display country code\n          symbolCode = feature.symbolCode.substr(0, 12) + \"--\" + feature.symbolCode.substr(14);\n        } else {\n          // display country code\n          symbolCode = feature.symbolCode;\n        }\n\n        // Render\n        imageInfo = armyc2.c2sd.renderer.MilStdIconRenderer.Render(symbolCode, modifiers);\n        imageCenter = imageInfo.getCenterPoint();\n        imageBounds = imageInfo.getImageBounds();\n\n        // Calculate offset\n        imageOffset = new WorldWind.Offset(\n          WorldWind.OFFSET_FRACTION, imageCenter.x / imageBounds.width,\n          WorldWind.OFFSET_FRACTION, 1 - (imageCenter.y / imageBounds.height)\n        );\n\n        attributes.imageScale = this.state.iconSize;\n        attributes.imageOffset = imageOffset;\n        attributes.imageSource = imageInfo.toDataUrl();\n\n        // Highlight attributes\n        highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n        highlightAttributes.imageColor = WorldWind.Color.WHITE;\n        highlightAttributes.imageOffset = imageOffset;\n        highlightAttributes.imageScale = this.state.selectionStyle.scale;\n\n        // Note that this is done statically, if the selection style changes a bulk update to every feature will need to be done\n        selectedModifiers = Object.assign({}, modifiers);\n        selectedModifiers.LINECOLOR = selectionStyle.lineColor;\n        selectedModifiers.FILLCOLOR = selectionStyle.fillColor;\n        selectedImage = armyc2.c2sd.renderer.MilStdIconRenderer.Render(feature.symbolCode, selectedModifiers).toDataUrl();\n        highlightAttributes.imageSource = selectedImage;\n      }\n\n      position = new WorldWind.Position(\n        feature.data.coordinates[1],\n        feature.data.coordinates[0],\n        EMPWorldWind.utils.defined(feature.data.coordinates[2]) ? feature.data.coordinates[2] : 0);\n\n      placemark = new WorldWind.Placemark(position, eyeDistanceScaling);\n      placemark.alwaysOnTop = true;\n      placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      placemark.attributes = new WorldWind.PlacemarkAttributes(attributes);\n      placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(highlightAttributes);\n\n      return placemark;\n    }\n\n\n    if (feature.data.type === \"Point\") {\n      modifiers = EMPWorldWind.editors.primitiveBuilders.processModifiers.call(this, feature);\n      shapes.push(_constructSinglePointMilStdSymbol.call(this, feature, modifiers, selectionStyle));\n    } else if (feature.data.type === \"LineString\") {\n      shapes = shapes.concat(EMPWorldWind.editors.primitiveBuilders.constructMultiPointMilStdFeatures.call(this, [feature]));\n    } else {\n      // TODO alert the user more gracefully that the type is unhandled\n      window.console.error(\"Unhandled feature type: \" + feature.data.type + \" in EMPWorldWind\");\n    }\n\n    return shapes;\n  }\n\n  /**\n   * Builds a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceCircle} primitive\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceCircle}\n   */\n  function constructSurfaceCircle(feature, selectionStyle) {\n    var attributes, location, circlePrimitive;\n\n    // Construct circle attributes\n    attributes = createShapeAttributes(feature, selectionStyle);\n\n    // Set the location\n    location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n    // Construct the primitive\n    circlePrimitive = new WorldWind.SurfaceCircle(location, feature.properties.radius, attributes.attributes);\n\n    // Set the primitive properties\n    circlePrimitive.displayName = feature.name;\n    circlePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    circlePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n    return circlePrimitive;\n  }\n\n  /**\n   * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceEllipse} primitive\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceEllipse}\n   */\n  function constructSurfaceEllipse(feature, selectionStyle) {\n    var attributes, location, ellipsePrimitive;\n\n    // Construct the ellipse attributes\n    attributes = createShapeAttributes(feature, selectionStyle);\n\n    // Set the location\n    location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n    // Construct the primitive\n    ellipsePrimitive = new WorldWind.SurfaceEllipse(location,\n      feature.properties.semiMajor,\n      feature.properties.semiMinor,\n      feature.properties.azimuth,\n      attributes.attributes);\n\n    // Set the primitive properties\n    ellipsePrimitive.displayName = feature.name;\n    ellipsePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    ellipsePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n    return ellipsePrimitive;\n  }\n\n  /**\n   * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolyline} primitive\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfacePolyline}\n   */\n  function constructSurfacePolyline(feature, selectionStyle) {\n    var i, pathPrimitive, attributes,\n      len = feature.data.coordinates.length,\n      locations = [];\n\n    // Construct the path attributes\n    attributes = createShapeAttributes(feature, selectionStyle);\n\n    // Set the locations\n    for (i = 0; i < len; i++) {\n      locations.push(new WorldWind.Location(feature.data.coordinates[i][1], feature.data.coordinates[i][0]));\n    }\n\n    // Construct the primitive\n    pathPrimitive = new WorldWind.SurfacePolyline(locations, attributes.attributes);\n\n    // Set the primitive properties\n    pathPrimitive.displayName = feature.name;\n    pathPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    pathPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n    return pathPrimitive;\n  }\n\n  /**\n   * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Placemark} primitive\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.Placemark}\n   */\n  function constructPlacemark(feature, selectionStyle) {\n    var position, placemark, attributes,\n      eyeDistanceScaling = false;\n\n    // Create the placemark attributes\n    attributes = createShapeAttributes.call(this, feature, selectionStyle);\n\n    // Set the position\n    position = new WorldWind.Position(\n      feature.data.coordinates[1],\n      feature.data.coordinates[0],\n      feature.data.coordinates[2] || 0);\n\n    // Construct the primitive\n    placemark = new WorldWind.Placemark(position, eyeDistanceScaling, attributes.attributes);\n\n    // Set the placemark attributes\n    placemark.alwaysOnTop = true;\n    placemark.label = feature.name;\n    placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(attributes.highlightAttributes);\n\n    return placemark;\n  }\n\n  /**\n   * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolygon} primitive\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfacePolygon}\n   */\n  function constructSurfacePolygon(feature, selectionStyle) {\n    var polygonPrimitive, attributes, boundaryLen,\n      i, j,\n      boundaries = [],\n      numBounds = feature.data.coordinates.length;\n\n    // Construct the polygon attributes\n    attributes = createShapeAttributes(feature, selectionStyle);\n\n    // Set the boundary locations\n    for (i = 0; i < numBounds; i++) {\n      boundaryLen = feature.data.coordinates[i].length;\n      var subBoundary = [];\n      for (j = 0; j < boundaryLen; j++) {\n        subBoundary.push(new WorldWind.Location(feature.data.coordinates[i][j][1], feature.data.coordinates[i][j][0]));\n      }\n      boundaries.push(subBoundary);\n    }\n\n    // Construct the primitive\n    polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes.attributes);\n\n    // Set the primitive properties\n    polygonPrimitive.displayName = feature.name;\n    polygonPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    polygonPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n    return polygonPrimitive;\n  }\n\n  /**\n   * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceRectangle} primitive\n   * This handles rectangles and squares\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceRectangle}\n   */\n  function constructSurfaceRectangle(feature, selectionStyle) {\n    var attributes, location, width, height, rectPrimitive;\n\n    // Construct the rectangle/square attributes\n    attributes = createShapeAttributes(feature, selectionStyle);\n\n    // Set the location\n    location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n    // Determine rect or square\n    if (feature.format === emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE) {\n      // Rectangle\n      width = feature.properties.width;\n      height = feature.properties.height;\n    } else {\n      // Square, width equals height\n      width = feature.properties.width;\n      height = feature.properties.width;\n    }\n\n    // Construct the primitive\n    rectPrimitive = new WorldWind.SurfaceRectangle(location, width, height, feature.properties.azimuth, attributes.attributes);\n\n    // Set the primitive properties\n    rectPrimitive.displayName = feature.name;\n    rectPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    rectPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n    return rectPrimitive;\n  }\n\n  /**\n   * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Text} primitive\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.Text}\n   */\n  function constructText(feature, selectionStyle) {\n    var attributes, position, textPrimitive;\n\n    // Construct circle attributes\n    attributes = createShapeAttributes(feature, selectionStyle);\n\n    // Set the position\n    position = new WorldWind.Position(\n      feature.coordinates[1], // Latitude\n      feature.coordinates[0], // Longitude\n      feature.coordinates[2] ? feature.coordinates[2] : 0); // Altitude\n\n    // Construct the text\n    textPrimitive = new WorldWind.GeographicText(position, feature.name);\n\n    // Set the primitive properties\n    textPrimitive.attributes = attributes.attributes;\n    textPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    textPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n    return textPrimitive;\n  }\n\n  /**\n   * @param {emp.typeLibrary.Feature | object} feature\n   * @returns {WorldWind.TextAttributes}\n   */\n  function createTextAttributes(feature) {\n    var textColor, size,\n      attributes = new WorldWind.TextAttributes();\n\n    // Set the offset\n    attributes.offset = new WorldWind.Offset(\n      WorldWind.OFFSET_FRACTION, -0.05, // To the right of the point by default\n      WorldWind.OFFSET_FRACTION, 0.5 // Center Y be default\n    );\n\n    // Should not be occluded by terrain or objects when false\n    attributes.depthTest = false;\n\n    // Label Color\n    if (feature.properties.labelStyle && feature.properties.labelStyle.color) {\n      textColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.labelStyle.color);\n    } else if (feature.properties.fontColor) {\n      textColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fontColor);\n    } else {\n      textColor = EMPWorldWind.utils.hexToRGBA(EMPWorldWind.constants.propertyDefaults.FILL_COLOR_HEX);\n    }\n    attributes.color = new WorldWind.Color(textColor.red, textColor.green, textColor.blue, textColor.alpha);\n\n    // Font Family\n    if (feature.properties.labelStyle && feature.properties.labelStyle.family) {\n      attributes.font.family = feature.properties.labelStyle.family;\n    } else if (feature.properties.fontFamily) {\n      attributes.font.family = feature.properties.fontFamily;\n    }\n\n    // Justification\n    if (feature.properties.labelStyle && feature.properties.labelStyle.justification) {\n      attributes.font.horizontalAlignment = feature.properties.labelStyle.justification;\n    } else if (feature.properties.labelAlign) {\n      attributes.font.horizontalAlignment = feature.properties.labelAlign;\n    }\n\n    // Font size\n    if (feature.properties.labelStyle && feature.properties.labelStyle.size) {\n      attributes.font.size = feature.properties.labelStyle.size;\n    } else if (feature.properties.fontSize) {\n      size = feature.properties.fontSize;\n      size = size.substring(0, size.length - 2);\n      if (!isNaN(size)) {\n        attributes.font.size = parseInt(feature.properties.fontSize);\n      }\n    }\n\n    // Label Scale\n    if (feature.properties.labelStyle && feature.properties.labelStyle.scale) {\n      attributes.scale = feature.properties.labelStyle.scale;\n    }\n\n    return attributes;\n  }\n\n  /**\n   * Wrapper function for generating the appropriate attributes based on the given feature and selection style\n   * @param {emp.typeLibrary.Feature | object} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {{attributes: *, highlightAttributes: *}}\n   */\n  function createShapeAttributes(feature, selectionStyle) {\n    var attributes;\n\n    /**\n     *\n     * @param feature\n     * @param selectionStyle\n     * @returns {{attributes: (WorldWind.TextAttributes|*), highlightAttributes: (WorldWind.TextAttributes|*)}}\n     * @private\n     */\n    function _createTextAttributes(feature, selectionStyle) {\n      var attributes, highlightAttributes, selectedLabelColor;\n      // GeographicText requires TextAttributes instead\n      attributes = createTextAttributes(feature);\n\n      // Create highlight attributes from the regular attributes, only update highlight color\n      highlightAttributes = new WorldWind.TextAttributes(attributes);\n      if (selectionStyle.lineColor) {\n        selectedLabelColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.color = new WorldWind.Color(selectedLabelColor.red, selectedLabelColor.green, selectedLabelColor.blue, selectedLabelColor.alpha);\n      } else {\n        highlightAttributes.color = WorldWind.Color.YELLOW;\n      }\n\n      return {\n        attributes: attributes,\n        highlightAttributes: highlightAttributes\n      };\n    }\n\n\n    /**\n     *\n     * @param feature\n     * @param selectionStyle\n     * @private\n     */\n    function _createPlacemarkAttributes(feature, selectionStyle) {\n      var attributes, highlightAttributes, selectedLineColor;\n\n      // Use PlacemarkAttributes\n      attributes = new WorldWind.PlacemarkAttributes();\n\n      // Set the leaderline options\n      attributes.drawLeaderLine = feature.properties.extrude || false;\n\n      // Set the imageURL\n      if (feature.properties.iconUrl) {\n        attributes.imageSource = feature.properties.iconUrl;\n        if (feature.properties.useProxy) {\n          attributes.imageSource = emp3.api.global.configuration.urlProxy + \"?url=\" + attributes.imageSource;\n        }\n      } else {\n        attributes.imageSource = WorldWind.configuration.baseUrl + \"images/emp-default-icon.png\";\n      }\n\n      // Set the image size\n      attributes.imageScale = this.state.iconSize;\n\n      // Create the label attributes\n      attributes.labelAttributes = createTextAttributes(feature);\n\n      // Create the highlight attributes\n      highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n\n      // Create separate label highlights, will be linked and overridden to the normal attributes if not\n      highlightAttributes.labelAttributes = new WorldWind.TextAttributes(attributes.labelAttributes);\n\n      // Image scale may differ when selected\n      if (selectionStyle.scale) {\n        highlightAttributes.imageScale = selectionStyle.scale;\n      }\n\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.imageColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.imageColor = WorldWind.Color.YELLOW;\n      }\n\n      // Update the label attributes for highlighted labels\n      highlightAttributes.labelAttributes.offset = attributes.labelAttributes.offset;\n      highlightAttributes.labelAttributes.color = highlightAttributes.imageColor;\n\n\n      return {\n        attributes: attributes,\n        highlightAttributes: highlightAttributes\n      };\n    }\n\n    /**\n     *\n     * @param feature\n     * @param selectionStyle\n     * @returns {{attributes: (WorldWind.ShapeAttributes|*), highlightAttributes: (WorldWind.ShapeAttributes|*)}}\n     * @private\n     */\n    function _createSurfaceShapeAttributes(feature, selectionStyle) {\n      var attributes, highlightAttributes, lineColor, fillColor, selectedLineColor, selectedFillColor;\n\n      attributes = new WorldWind.ShapeAttributes();\n      // Set stroke color\n      if (feature.properties.strokeStyle && feature.properties.strokeStyle.strokeColor) {\n        lineColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.strokeStyle.strokeColor);\n        attributes.outlineColor = new WorldWind.Color(lineColor.red, lineColor.green, lineColor.blue, lineColor.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      // Set fill color\n      if (feature.properties.fillColor) {\n        fillColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fillColor);\n        attributes.interiorColor = new WorldWind.Color(fillColor.red, fillColor.green, fillColor.blue, fillColor.alpha);\n      } else {\n        attributes.drawInterior = false;\n      }\n\n      // TODO fillPattern is not yet supported by the ShapeAttributes class\n\n      // Line width\n      if (feature.properties.strokeWidth || feature.properties.lineWidth) {\n        attributes.outlineWidth = feature.properties.strokeWidth || feature.properties.lineWidth;\n      }\n\n      // Stippling of outline\n      attributes.outlineStippleFactor = feature.properties.stippleFactor || attributes.outlineStippleFactor;\n      attributes.outlineStipplePattern = feature.properties.stipplePattern || attributes.outlineStipplePattern;\n\n      // Generate the highlight attributes from the normal attributes\n      highlightAttributes = new WorldWind.ShapeAttributes(attributes);\n\n      // Update the selected lineColor\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n\n      // Update the selected fillColor\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.drawInterior = false;\n      }\n\n      return {\n        attributes: attributes,\n        highlightAttributes: highlightAttributes\n      };\n    }\n\n    switch (feature.format) {\n      case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO handle GEO_ACM attributes\n      case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL: // Do nothing, handled by renderer, no primitives\n      case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n        attributes = _createPlacemarkAttributes.call(this, feature, selectionStyle);\n        break;\n      case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n        attributes = _createTextAttributes.call(this, feature, selectionStyle);\n        break;\n      case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n      case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n      case emp3.api.enums.FeatureTypeEnum.GEO_PATH: // Not all of the attributes are used for path/polyline\n      case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n      case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n      case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n      default:\n        attributes = _createSurfaceShapeAttributes(feature, selectionStyle);\n    }\n\n    return attributes;\n  }\n\n  // Add the builders to the map\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_ACM] = constructAirControlMeasure;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE] = constructSurfaceCircle;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE] = constructSurfaceEllipse;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL] = constructMilStdSymbol;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_PATH] = constructSurfacePolyline;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_POINT] = constructPlacemark;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_POLYGON] = constructSurfacePolygon;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE] = constructSurfaceRectangle;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_SQUARE] = constructSurfaceRectangle;\n  builderMap[emp3.api.enums.FeatureTypeEnum.GEO_TEXT] = constructText;\n\n  return {\n    /**\n     * @param {emp.typeLibrary.Feature} empFeature\n     */\n    getPrimitiveBuilderForFeature: function(empFeature) {\n      if (empFeature.format in builderMap) {\n        return builderMap[empFeature.format];\n      }\n    },\n    /**\n   *\n   * @param {emp.typeLibrary.Feature[]} features\n   * @private\n   */\n   constructMultiPointMilStdFeatures: function (features) {\n    var bbox, bounds, scale, featureCoords,\n      data = {};\n\n    bounds = this.getBounds();\n    bbox = bounds.west + \",\" + bounds.south + \",\" + bounds.east + \",\" + bounds.north;\n    data.bbox = bbox;\n\n    data.batch = [];\n\n    scale = EMPWorldWind.utils.boundsWidth(bounds) >> 2;\n    data.scale = scale;\n\n    data.format = EMPWorldWind.constants.MultiPointRenderType.GEOJSON;\n    data.pixelHeight = this.worldWindow.canvas.clientHeight;\n    data.pixelWidth = this.worldWindow.canvas.clientWidth;\n    data.fontInfo = EMPWorldWind.utils.getFontInfo(\"arial\", 10, \"bold\");\n\n    emp.util.each(features, function(feature) {\n      var i,\n        modifiers,\n        batchObject = {},\n        positions = \"\";\n\n      // Get the correct modifiers\n      modifiers = EMPWorldWind.editors.primitiveBuilders.processModifiers.call(this, feature);\n\n      // Generate position string\n      featureCoords = feature.data.coordinates.join().split(\",\");\n      for (i = 0; i < featureCoords.length; i += 2) {\n        positions += featureCoords[i] + \",\" + featureCoords[i + 1] + \" \";\n      }\n      positions = positions.trim();\n      modifiers[armyc2.c2sd.renderer.utilities.MilStdAttributes.GeoJSONFormat] = 1; // 0 for string geojson, 1 for object geojson\n\n      batchObject.id = feature.coreId;\n      batchObject.name = feature.name;\n      batchObject.description = unescape(feature.description);\n      batchObject.symbolID = feature.symbolCode;\n      batchObject.scale = scale; //scale;\n      batchObject.bbox = data.bbox;\n      batchObject.modifiers = modifiers;\n      batchObject.format = EMPWorldWind.constants.MultiPointRenderType.GEOJSON;\n      batchObject.symstd = 1; //TODO remove this hard coding of symstd    1;//1=2525C, 0=2525Bch2\n      batchObject.fontInfo = EMPWorldWind.utils.getFontInfo(\"arial\", 10, \"bold\");\n      batchObject.altMode = WorldWind.CLAMP_TO_GROUND;\n      batchObject.points = positions;\n      data.batch.push(batchObject);\n\n    }.bind(this));\n\n    // Call sec renderer worker\n    if (this.secRendererWorker.lastSelected === EMPWorldWind.constants.RendererWorker.B) {\n      this.secRendererWorker.A.postMessage(data);\n      this.secRendererWorker.lastSelected = EMPWorldWind.constants.RendererWorker.A;\n    } else {\n      this.secRendererWorker.B.postMessage(data);\n      this.secRendererWorker.lastSelected = EMPWorldWind.constants.RendererWorker.B;\n    }\n    // TODO remove empty array return, it is a holdover from before using web workers\n    return [];\n  },\n\n  /**\n   * Requires access to the current scope ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   */\n   processModifiers: function (feature) {\n    var modifiers, enhancedModifiers, override, lowRangeMode, showLabels;\n\n    lowRangeMode = feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    if (feature.data.type === \"Point\") {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        this.state.labelStyles, // Single-point shows symbols based on settings\n        this.state.pixelSize);\n\n      // Show labels conditionally\n      showLabels = (this.state.labelStyles.CN === true) && lowRangeMode;\n    } else {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        EMPWorldWind.constants.AllLabels, // Multi-point always shows symbols\n        this.state.pixelSize);\n\n      // TODO apply some altitude filtering\n      // Always show labels\n      showLabels = true;\n    }\n\n    modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(modifiers, showLabels);\n    enhancedModifiers = EMPWorldWind.utils.milstd.checkForRequiredModifiers(feature);\n\n    for (override in enhancedModifiers) {\n      if (enhancedModifiers.hasOwnProperty(override)) {\n        modifiers[override] = enhancedModifiers[override];\n      }\n    }\n\n    return modifiers;\n  },\n\n    /**\n     * This function is similar to the feature based version except it takes a geoJSON object as the only parameter.\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolyline}\n     */\n    constructSurfacePolylineFromGeoJSON: function(geoJSON, selectionStyle) {\n      var i, color, attributes, highlightAttributes, polylinePrimitive, selectedLineColor,\n        len = geoJSON.coordinates.length,\n        locations = [];\n\n      attributes = new WorldWind.ShapeAttributes();\n      // SurfacePolyline uses the following attributes\n      if (geoJSON.properties.strokeColor) {\n        color = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor, geoJSON.properties.lineOpacity);\n        attributes.outlineColor = new WorldWind.Color(color.red, color.green, color.blue, color.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n      for (i = 0; i < len; i++) {\n        locations.push(new WorldWind.Location(geoJSON.coordinates[i][1], geoJSON.coordinates[i][0]));\n      }\n\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n\n      polylinePrimitive = new WorldWind.SurfacePolyline(locations, attributes);\n      polylinePrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polylinePrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return polylinePrimitive;\n    },\n    /**\n     *\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.SurfacePolygon}\n     */\n    constructSurfacePolygonFromGeoJSON: function(geoJSON, selectionStyle) {\n      var attributes, interiorColor, outlineColor, boundaryLen, polygonPrimitive,\n        selectedLineColor, selectedFillColor, highlightAttributes,\n        i, j,\n        boundaries = [],\n        numBounds = geoJSON.geometry.coordinates.length;\n\n      for (i = 0; i < numBounds; i++) {\n        boundaryLen = geoJSON.geometry.coordinates[i].length;\n        var subBoundary = [];\n        for (j = 0; j < boundaryLen; j++) {\n          subBoundary.push(new WorldWind.Location(geoJSON.geometry.coordinates[i][j][1], geoJSON.geometry.coordinates[i][j][0]));\n        }\n        boundaries.push(subBoundary);\n      }\n\n      attributes = new WorldWind.ShapeAttributes();\n      if (geoJSON.properties.strokeColor) {\n        outlineColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor);\n        attributes.outlineColor = new WorldWind.Color(outlineColor.red, outlineColor.green, outlineColor.blue, outlineColor.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      if (geoJSON.properties.fillColor) {\n        interiorColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.fillColor);\n        attributes.interiorColor = new WorldWind.Color(interiorColor.red, interiorColor.green, interiorColor.blue, interiorColor.alpha);\n      } else {\n        attributes.drawInterior = false;\n      }\n\n      attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n      attributes.outlineStippleFactor = geoJSON.properties.stippleFactor || attributes.outlineStippleFactor;\n      attributes.outlineStipplePattern = geoJSON.properties.stipplePattern || attributes.outlineStipplePattern;\n\n      highlightAttributes = new WorldWind.ShapeAttributes();\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.drawInterior = false;\n      }\n\n      polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes);\n      polygonPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      polygonPrimitive.displayName = geoJSON.properties.name;\n      polygonPrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n      return polygonPrimitive;\n    },\n    /**\n     * @param {object} geoJSON\n     * @param {SelectionStyle} selectionStyle\n     * @returns {WorldWind.Text}\n     */\n    constructTextFromGeoJSON: function(geoJSON, selectionStyle) {\n      var textPrimitive, attributes, highlightAttributes, selectedColor, position;\n\n      // Create the attributes\n      attributes = createTextAttributes(geoJSON);\n\n      // Create the highlight attributes\n      highlightAttributes = new WorldWind.TextAttributes(attributes);\n      if (selectionStyle.lineColor) {\n        selectedColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.color = new WorldWind.Color(selectedColor.red, selectedColor.green, selectedColor.blue, selectedColor.alpha);\n      } else {\n        highlightAttributes.color = WorldWind.Color.YELLOW;\n      }\n\n      // Set the position\n      position = new WorldWind.Position(\n        geoJSON.geometry.coordinates[1], // Latitude\n        geoJSON.geometry.coordinates[0], // Longitude\n        geoJSON.geometry.coordinates[2] ? geoJSON.geometry.coordinates[0] : 0); // Altitude\n\n      // Construct the primitive\n      textPrimitive = new WorldWind.GeographicText(position, geoJSON.properties.label);\n\n      // Set the attributes\n      textPrimitive.attributes = attributes;\n      textPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n      textPrimitive.highlightAttributes = highlightAttributes;\n\n      return textPrimitive;\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * @classdesc The EditorController handles all drawing, editing, and updating of features\n * @class\n */\nEMPWorldWind.editors.EditorController = (function() {\n\n  /**\n   * Async function\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {PlotFeatureCB} callback\n   * @this EMPWorldWind.Map\n   */\n  function asyncPlotKMLFeature(feature, callback) {\n    var url, kmlFilePromise, kmlLayer, wwFeature,\n      rc = {\n        success: false\n      };\n\n    // Convert the kml string to a data url\n    url = \"data:text/xml,\" + encodeURIComponent(feature.data);\n\n    // Build the KML file promise\n    kmlFilePromise = new WorldWind.KmlFile(url);\n    kmlFilePromise\n      .then(function(kmlFile) {\n        // Construct the KML layer to hold the document\n        kmlLayer = new WorldWind.RenderableLayer(feature.coreId);\n\n        // Add the KML layer to the map\n        kmlLayer.addRenderable(kmlFile);\n        this.worldWindow.addLayer(kmlLayer);\n\n        // Use the standard data holder to keep track of the layer\n        wwFeature = new EMPWorldWind.data.EmpFeature(feature);\n        wwFeature.addShapes(kmlLayer); // This isn't a WW primitive but use it as if it was\n\n        // Record the layer so we can remove/modify it later\n        this.layers[feature.coreId] = kmlLayer;\n\n        // Configure the callback args\n        rc.success = true;\n        rc.feature = wwFeature;\n\n        // Fire the callback\n        callback(rc);\n      }.bind(this));\n  }\n\n  return {\n    /**\n     * Creates a new EMPWorldWind feature and associated WorldWind features from an EMP feature and adds it to the map\n     *\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback Callback to be invoked on completion\n     * @this EMPWorldWind.Map\n     */\n    plotFeature: function(empFeature, callback) {\n      var wwFeature, primitiveBuilder, shapes,\n        rc = {\n          message: \"\",\n          success: true,\n          feature: undefined\n        };\n\n      if (empFeature.format === emp3.api.enums.FeatureTypeEnum.KML) {\n        // KML is not supported as native primitives in WorldWind\n        // TODO KML selection, not sure how to support it or represent it\n        return asyncPlotKMLFeature.call(this, empFeature, callback);\n      } else {\n        primitiveBuilder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(empFeature);\n\n        if (!primitiveBuilder) {\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n\n          return callback(rc);\n        }\n      }\n\n      // Construct the feature\n      wwFeature = new EMPWorldWind.data.EmpFeature(empFeature);\n      wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n      empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      empFeature.range = this.worldWindow.navigator.range;\n\n      // Build the primitives\n      // next call is  asynchronous for the case of mil std multi-points so shapes is initially an empty array. (SEC renderer worker)\n      shapes = primitiveBuilder.call(this, empFeature, this.state.selectionStyle);\n\n      // Store the native primitives\n      wwFeature.addShapes(shapes);\n\n      // Configure the callback\n      rc.feature = wwFeature;\n\n      // Fire the callback\n      return callback(rc);\n    },\n    /**\n     * Updates a WorldWind Renderable object on the map and returns the updated objects in the response\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback\n     * @this EMPWorldWind.Map\n     */\n    updateFeature: function(wwFeature, empFeature, callback) {\n      var primitiveBuilder,\n        rc = {\n          success: true,\n          message: \"\",\n          feature: wwFeature\n        };\n\n      var _handleMilStdUpdate = function() {\n\n        var builder;\n        var _featureIsSame = function(oldfeature, newFeature) {\n          return (oldfeature.symbolCode === newFeature.symbolCode &&\n            JSON.stringify(oldfeature.properties.modifiers) === JSON.stringify(newFeature.properties.modifiers) &&\n          !this.state.stateChanged);\n        };\n\n        if (empFeature.data.type === \"Point\") {\n          if (_featureIsSame.call(this, empFeature, wwFeature.feature) && !empFeature.bCallRenderer) {\n            // Just move it\n            wwFeature.shapes[0].position = new WorldWind.Position(\n              empFeature.data.coordinates[1],\n              empFeature.data.coordinates[0],\n              empFeature.data.coordinates[2] || 0);\n            wwFeature.feature = empFeature;\n          } else {\n            // Re-render and replace it\n            builder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(empFeature);\n            this.rootLayer.removeFeature(wwFeature);\n            wwFeature.clearShapes();\n            wwFeature.addShapes(builder.call(this, empFeature, this.state.selectionStyle));\n            this.rootLayer.addFeature(wwFeature);\n            wwFeature.feature = empFeature;\n            wwFeature.bCallRenderer = false;\n            empFeature.bCallRenderer = false;\n          }\n        } else if (empFeature.data.type === \"LineString\") {\n          // update with latest emp feature\n          wwFeature.feature = empFeature;\n          builder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(empFeature);\n          builder.call(this, empFeature); // Pass it off to the web-worker\n        } else {\n          // TODO Fail gracefully\n        }\n      };\n\n      var _handlePointUpdate = function() {\n\n        var builder;\n\n        if (JSON.stringify(wwFeature.feature.properties) === JSON.stringify(empFeature.properties)) {\n          //if ((empFeature.overlayId === \"vertices\") && (JSON.stringify(wwFeature.feature.properties) === JSON.stringify(empFeature.properties))) {\n          // Just move it. no chnages to its properies\n          wwFeature.shapes[0].position = new WorldWind.Position(\n            empFeature.data.coordinates[1],\n            empFeature.data.coordinates[0],\n            empFeature.data.coordinates[2] || 0);\n          wwFeature.feature = empFeature;\n        } else {\n          builder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(empFeature);\n          this.rootLayer.removeFeature(wwFeature);\n          wwFeature.clearShapes();\n          wwFeature.addShapes(builder.call(this, empFeature, this.state.selectionStyle));\n          this.rootLayer.addFeature(wwFeature);\n          wwFeature.feature = empFeature;\n        }\n      };\n\n      var _handleDefaultUpdate = function() {\n        var builder;\n\n        // if (empFeature.overlayId === \"vertices\") {\n        //   // Just move it. It is a control point\n        //   wwFeature.shapes[0].position = new WorldWind.Position(\n        //     empFeature.data.coordinates[1],\n        //     empFeature.data.coordinates[0],\n        //     empFeature.data.coordinates[2] || 0);\n        //   wwFeature.feature = empFeature;\n        // } else {\n        builder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(empFeature);\n        this.rootLayer.removeFeature(wwFeature);\n        wwFeature.clearShapes();\n        wwFeature.addShapes(builder.call(this, empFeature, this.state.selectionStyle));\n        this.rootLayer.addFeature(wwFeature);\n        wwFeature.feature = empFeature;\n        //}\n      };\n\n\n      if (empFeature.format === emp3.api.enums.FeatureTypeEnum.KML) {\n        // Handle KML\n        this.worldWindow.removeLayer(this.layers[empFeature.coreId]);\n        // KML is not supported as native primitives in WorldWind\n        return asyncPlotKMLFeature.call(this, empFeature, callback);\n      } else if (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL) {\n        _handleMilStdUpdate.call(this);\n      } else if (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_POINT) {\n        _handlePointUpdate.call(this);\n      } else if ((empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_PATH) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_ACM) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_POLYGON) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_SQUARE) ||\n        (empFeature.format === emp3.api.enums.FeatureTypeEnum.GEO_TEXT)) {\n        _handleDefaultUpdate.call(this);\n      } else {\n        primitiveBuilder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(empFeature);\n        if (!primitiveBuilder) {\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n          return callback(rc);\n        }\n      }\n\n      empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      return callback(rc);\n\n      //\n      // // Remove existing primitives from the map\n      // if (empFeature.format !== emp3.api.enums.FeatureTypeEnum.KML) {\n      //   empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      // } else {\n      //   // Handle KML\n      //   this.worldWindow.removeLayer(this.layers[empFeature.coreId]);\n      // }\n      //\n      // // Clear the primitives from the feature\n      // wwFeature.clearShapes();\n      //\n      // switch (empFeature.format) {\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n      //     wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n      //     empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      //     wwFeature.addShapes(constructMilStdSymbol.call(this, empFeature, this.state.selectionStyle));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructPlacemark.call(this, empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n      //     wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructText(empFeature, this.state.labelStyles));\n      //     break;\n      //   case emp3.api.enums.FeatureTypeEnum.KML:\n      //     // KML is not supported as native primitives in WorldWind\n      //     return asyncPlotKMLFeature.call(this, empFeature, callback);\n      //   default:\n      //     rc.success = false;\n      //     rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      // }\n      //\n      // // Redraw the new shapes\n      // if (rc.success) {\n      //   // tag empFeature with current range.\n      //   empFeature.range = this.worldWindow.navigator.range;\n      //   // Update the empFeature stored in the wwFeature\n      //   wwFeature.feature = empFeature;\n      //   wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n      //\n      //   // Update the layer\n      //   layer.addFeature(wwFeature);\n      //\n      //   // Setup the return\n      //   rc.feature = wwFeature;\n      // }\n      // callback(rc);\n    },\n    /**\n     *\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @this EMPWorldWind.Map\n     */\n    updateFeatureLabelStyle: function(wwFeature) {\n      var shapes, builder;\n\n      switch (wwFeature.feature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          this.rootLayer.removeFeature(wwFeature);\n          wwFeature.clearShapes();\n\n          builder = EMPWorldWind.editors.primitiveBuilders.getPrimitiveBuilderForFeature(wwFeature.feature);\n\n          shapes = builder.call(this, wwFeature.feature, this.state.selectionStyle);\n          wwFeature.addShapes(shapes);\n          this.rootLayer.addFeature(wwFeature);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n        default:\n          // do nothing\n      }\n    },\n    /**\n     * @param {emp.typeLibrary.Feature[]} features\n     */\n    redrawMilStdSymbols: function(features) {\n      window.console.debug('updating', features);\n      EMPWorldWind.editors.primitiveBuilders.constructMultiPointMilStdFeatures.call(this, features);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * Throttles a function to a restrict the number of calls to it to prevent the engine from locking up under heavy use\n * @param {function} fn callback to throttle\n * @param {number} [threshold=20]\n * @param {context} scope\n * @returns {Function}\n */\nEMPWorldWind.eventHandlers.throttle = function(fn, threshold, scope) {\n  threshold = threshold || 20; // 20 ms throttle\n  var last, deferTimer;\n\n  return function() {\n    var context = scope || this;\n\n    var now = +new Date,\n      args = arguments;\n    if (last && now < last + threshold) {\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function() {\n        last = now;\n        fn.apply(context, args);\n      }, threshold);\n    }\n    else {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n};\n\n/**\n * Notifies the map the view has been updated\n *\n * NOTE: The altitude, latitude, and longitude for the returned view may not be accurate as they are still based on\n * the navigator which is based on the lookAt location.\n *\n * @param {emp3.api.enums.CameraEventEnum} [viewEventType]\n * @this EMPWorldWind.Map\n */\nEMPWorldWind.eventHandlers.notifyViewChange = function(viewEventType) {\n  var bounds = this.getBounds();\n\n  var view = {\n    range: this.worldWindow.navigator.range,\n    tilt: this.worldWindow.navigator.tilt,\n    roll: this.worldWindow.navigator.roll,\n    heading: this.worldWindow.navigator.heading,\n    altitude: this.worldWindow.navigator.range, // TODO this is not correct, just an approximation until camera support\n    location: {\n      lat: this.worldWindow.navigator.lookAtLocation.latitude,\n      lon: this.worldWindow.navigator.lookAtLocation.longitude\n    },\n    bounds: bounds\n  };\n\n  var lookAt = {\n    range: this.worldWindow.navigator.range,\n    tilt: this.worldWindow.navigator.tilt,\n    heading: this.worldWindow.navigator.heading,\n    altitude: this.worldWindow.navigator.lookAtLocation.altitude || 0,\n    latitude: this.worldWindow.navigator.lookAtLocation.latitude,\n    longitude: this.worldWindow.navigator.lookAtLocation.longitude\n  };\n\n  //optimization . isMapMoving uses an epsilon to reduce the calls to triggerRenderUpdate function.\n  if (viewEventType === emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED) {\n    // set last navigator only when the camera stop moving.\n    this.lastNavigator.range = this.worldWindow.navigator.range;\n    this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n    this.lastNavigator.roll = this.worldWindow.navigator.roll;\n    this.lastNavigator.heading = this.worldWindow.navigator.heading;\n    this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n    EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  } else if (this.isMapMoving()) {\n    this.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n    EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  }\n\n  this.empMapInstance.eventing.ViewChange(view, lookAt, viewEventType);\n  this.bounds = bounds;\n};\n\n/**\n * Notify the that a re-render of the MilStd graphics is required based off of a delta from the last time the renderer\n * was called. This may trigger based on altitude delta or distance delta.\n * @this EMPWorldWind.Map\n */\nEMPWorldWind.eventHandlers.triggerRenderUpdate = function() {\n  var featuresToRedraw = [];\n  // Don't render until the map has stopped being dragged\n  if (this.state.dragging) {\n    return;\n  }\n\n  this.state.lastRender.bounds = this.getBounds();\n  this.state.lastRender.altitude = this.worldWindow.navigator.range;\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleMidOrLowRange(feature) {\n    feature.isHighAltitudeRangeImage = false;\n    feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.singlePointAltitudeRangeChanged = false;\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleHighRange(feature) {\n    feature.isHighAltitudeRangeImage = true;\n    //  dot image based on affiliation\n    feature.shapes[0].attributes._imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.feature.symbolCode);\n    feature.shapes[0].attributes.imageOffset = new WorldWind.Offset(WorldWind.OFFSET_FRACTION, 0.5, WorldWind.OFFSET_FRACTION, 0.5);// Centers the image on the geographic position.\n    feature.shapes[0].highlightAttributes._imageSource = feature.shapes[0].attributes._imageSource;\n    feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n    feature.singlePointAltitudeRangeChanged = false;\n  }\n\n  /**\n   * @param features\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleMultiPoint(features) {\n    //if (this.isMilStdMultiPointShapeInViewRegion(feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON3) ||\n    //feature.feature.wasClipped)) {\n    // optimization - update feature only if inside view region and  (range outside range epsilon or was clipped)\n    this.throttleAddMultiPointRedraws.call(this, features);\n    ////EMPWorldWind.editors.EditorController.redrawMilStdSymbols.call(this,features);\n    //}\n  }\n\n  /**\n   * @param feature\n   * @this EMPWorldWind.Map\n   * @private\n   */\n  function _handleSinglePoint(feature) {\n    //var callRenderer = false;\n    feature.singlePointAltitudeRangeChanged = feature.singlePointAltitudeRangeMode !== this.singlePointAltitudeRangeMode;\n\n    if (feature.singlePointAltitudeRangeChanged) {\n      if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE) && (this.iconLabelOption !== 'none') ||\n        this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) {\n        feature.bCallRenderer = true;\n        feature.feature.bCallRenderer = true;\n        _handleMidOrLowRange.call(this, feature);\n      } else if (this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n        _handleHighRange.call(this, feature);\n      }\n    }\n      this.plotFeature(feature);\n  }\n\n  emp.util.each(Object.keys(this.features), function(featureId) {\n    var feature = this.features[featureId];\n\n    if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n      feature.feature.data.type === \"LineString\") {\n      if (this.isMilStdMultiPointShapeInViewRegion(feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON1) ||\n        feature.feature.wasClipped)) {\n        featuresToRedraw.push(feature.feature);\n      }\n    } else if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n      feature.feature.data.type === \"Point\") {\n      // Optimization required\n      _handleSinglePoint.call(this, feature);\n    }\n  }.bind(this));\n\n  if (featuresToRedraw.length > 0) {\n    _handleMultiPoint.call(this, featuresToRedraw);\n  }\n\n  this.worldWindow.redraw();\n};\n\n/**\n *\n * @param mouseEvent\n * @param empEventingArgs\n */\nEMPWorldWind.eventHandlers.extractFeatureFromEvent = function(mouseEvent, empEventingArgs) {\n  var obj, i,\n    pickList = this.worldWindow.pick(this.worldWindow.canvasCoordinates(mouseEvent.clientX, mouseEvent.clientY)),\n    len = pickList.objects.length;\n\n  // Reverse down the list of features to get the topmost first (useful when editing)\n  for (i = len - 1; i >= 0; i--) {\n    obj = pickList.objects[i];\n    if (!obj.isTerrain) {\n      if (obj.userObject.userProperties && obj.userObject.userProperties.id) {\n        empEventingArgs.coreId = obj.userObject.userProperties.id;\n        empEventingArgs.target = \"feature\";\n        break;\n      }\n    }\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent}\n * @typedef {Object} MouseEvent\n */\n\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent}\n * @typedef {Object} WheelEvent\n */\n\n/**\n * Mouse event handlers\n */\nEMPWorldWind.eventHandlers.mouse = (function() {\n  var throttleTime = 50; // 50ms\n\n  /**\n   * Sends a message to EMP Pointer eventing handler\n   */\n  var _notifyEMPPointing = EMPWorldWind.eventHandlers.throttle(function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n  }, throttleTime);\n\n  /**\n   * Sends a message to EMP that the view has changed\n   */\n  var _notifyEMPViewChanged = EMPWorldWind.eventHandlers.throttle(function(state) {\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, state);\n  }, throttleTime);\n\n  /**\n   * Returns true if the location and buttons pressed are identical\n   * @returns {boolean} True if the events are the same\n   * @private\n   */\n  var _isDuplicateEvent = function(a, b) {\n    if (!a || !b) {\n      return false;\n    }\n\n    return a.clientX === b.clientX &&\n      a.clientY === b.clientY &&\n      a.buttons === b.buttons;\n  };\n\n  return {\n    /**\n     * @param {MouseEvent} event\n     * @this EMPWorldWind.Map\n     */\n    click: function(event) {\n      var clickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      clickEvent.type = emp.typeLibrary.Pointer.EventType.SINGLE_CLICK;\n\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, clickEvent);\n      this.empMapInstance.eventing.Pointer(clickEvent);\n    },\n    /**\n     * Note: Double-click is not duplicated in PointerEvents\n     * @param {MouseEvent} event\n     * @this EMPWorldWind.Map\n     */\n    dblclick: function(event) {\n      var dblClickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n      dblClickEvent.type = emp.typeLibrary.Pointer.EventType.DBL_CLICK;\n\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, dblClickEvent);\n\n      this.empMapInstance.eventing.Pointer(dblClickEvent);\n    },\n    /**\n     *\n     * @param {WheelEvent} event\n     * @this EMPWorldWind.Map\n     */\n    wheel: function(event) {\n      // Handle different browser wheel values\n      var deltaY = event.wheelDeltaY /* Chrome */ || -event.deltaY /* Firefox */ || 0;\n\n      if (deltaY < 0 && this.worldWindow.navigator.range > EMPWorldWind.constants.view.MAX_HEIGHT) {\n        this.worldWindow.navigator.range = EMPWorldWind.constants.view.MAX_HEIGHT;\n        event.preventDefault();\n      }\n\n      var preventDefaultLockStates = [\n        emp3.api.enums.MapMotionLockEnum.NO_MOTION,\n        emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN,\n        emp3.api.enums.MapMotionLockEnum.NO_ZOOM\n      ];\n\n      if (preventDefaultLockStates.includes(this.state.lockState)) {\n        event.preventDefault();\n      }\n\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n    },\n    /**\n     * Wrapper for mousedown\n     * @see EMPWorldWind.eventHandlers.mouse.mousedown\n     * @this EMPWorldWind.Map\n     */\n    mousedown: function(event) {\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (_isDuplicateEvent(event, this.state.lastInteractionEvent)) {\n        return;\n      } else { // Store the event\n        this.state.lastInteractionEvent = event;\n      }\n\n      var mousedownEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n      mousedownEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mousedownEvent);\n\n      this.empMapInstance.eventing.Pointer(mousedownEvent);\n    },\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mouseup\n     * @this EMPWorldWind.Map\n     */\n    mouseup: function(event) {\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (_isDuplicateEvent(event, this.state.lastInteractionEvent)) {\n        return;\n      } else { // Store the event\n        this.state.lastInteractionEvent = event;\n      }\n\n      var mouseupEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n      mouseupEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n      EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mouseupEvent);\n\n      if (this.state.dragging) {\n        this.state.dragging = false;\n        EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      }\n\n      this.empMapInstance.eventing.Pointer(mouseupEvent);\n    },\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mousemove\n     * @this EMPWorldWind.Map\n     */\n    mousemove: function(event) {\n      /**\n       * Detects the location for auto-panning in smartMotion mode\n       * @private\n       */\n      var _handleSmartMotion = function() {\n        var smartAreaBuffer = 0.05,\n          element = event.srcElement || event.originalTarget,\n          elementBounds = element.getBoundingClientRect(),\n          pan = {\n            up: false,\n            down: false,\n            left: false,\n            right: false\n          };\n\n        // Pan left or right\n        pan.left = event.offsetX < elementBounds.width * smartAreaBuffer;\n        pan.right = event.offsetX > elementBounds.width - (elementBounds.width * smartAreaBuffer);\n\n        // Pan up or down\n        pan.up = event.offsetY < elementBounds.height * smartAreaBuffer;\n        pan.down = event.offsetY > elementBounds.height - (elementBounds.height * smartAreaBuffer);\n\n        if (pan.up || pan.down || pan.left || pan.right) {\n          this.spinGlobe(pan);\n        } else {\n          this.spinGlobe(false);\n        }\n      }.bind(this);\n\n      /**\n       * Checks if the event needs to be cancelled based on the lock state\n       * @private\n       */\n      var _checkForPreventDefault = function() {\n        var preventDefault = [\n          emp3.api.enums.MapMotionLockEnum.NO_MOTION,\n          emp3.api.enums.MapMotionLockEnum.NO_PAN,\n          emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN,\n          emp3.api.enums.MapMotionLockEnum.SMART_MOTION\n        ];\n\n        if (preventDefault.includes(this.state.lockState)) {\n          event.preventDefault();\n        }\n      }.bind(this);\n\n      // Some browsers pass mouse and pointer events events separately, only handle the first one through\n      if (_isDuplicateEvent(event, this.state.lastInteractionEvent)) {\n        return;\n      } else { // Store the event\n        this.state.lastInteractionEvent = event;\n      }\n\n      // Check if we prevent default\n      _checkForPreventDefault();\n\n      // If we are in a smartMotion state handle it\n      if (this.state.lockState === emp3.api.enums.MapMotionLockEnum.SMART_MOTION) {\n        _handleSmartMotion();\n      }\n\n      // Update EMP (throttled)\n      _notifyEMPPointing.call(this, event);\n\n      // If right or left mouse or both notify the view must have changed\n      if (event.buttons !== 0 && event.buttons < 3) {\n        this.state.dragging = true;\n        _notifyEMPViewChanged.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n      } else {\n        this.state.dragging = false;\n      }\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch}\n * @typedef {object} Touch\n */\n\n/**\n * @typedef {object} TouchEvent\n * @property {Touch[]} touches\n */\n\n/**\n * Touch event handlers\n */\nEMPWorldWind.eventHandlers.touch = (function() {\n\n\n  return {\n    /**\n     * Touch down event handler,\n     * Approximates mousedown\n     * @param {TouchEvent} event\n     * @this EMPWorldWind.Map\n     */\n    touchstart: function(event) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n\n      coords.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n      this.state.lastInteractionEvent = event;\n      this.empMapInstance.eventing.Pointer(coords);\n    },\n    /**\n     * Touch end event handler\n     * Approximates mouseup\n     * @this EMPWorldWind.Map\n     */\n    touchend: function(/*event*/) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent.touches[0]);\n\n      coords.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n      this.empMapInstance.eventing.Pointer(coords);\n    },\n    /**\n     * Touch cancel event handler, placeholder until it is needed\n     */\n    touchcancel: function(/*event*/) {\n      // Placeholder\n      // var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n      // window.console.debug(event, coords);\n    },\n    /**\n     * Touch move event handler\n     * @param {TouchEvent} event\n     * @this EMPWorldWind.Map\n     */\n    touchmove: function(event) {\n      var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n      coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n      if (coords.lat !== undefined) {\n        this.empMapInstance.eventing.Pointer(coords);\n      }\n\n      // TODO check if map is locked or not before notifying view change\n      this.state.lastInteractionEvent = event;\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n/**\n * @typedef {object} WWDragEvent\n */\n\n\n/**\n * The event handlers listed here are not standard DOM drag event handlers. They represent notification functions\n * to alert the core to different drag states.\n *\n * @see WorldWind.DragRecognizer\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.drag = (function() {\n\n\n  return {\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    began: function(/*event*/) {\n      //window.console.debug(event);\n    },\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    changed: function(/*event*/) {\n      //window.console.debug(event);\n    },\n    /**\n     *\n     * @param {WWDragEvent} event\n     * @this EMPWorldWind.Map\n     */\n    ended: function(/*event*/) {\n      //window.console.debug(event);\n    }\n  };\n}());\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events}\n * @typedef {object} PointerEvent\n */\n\n/**\n * Pointer events are currently aliases for their mouseevent counterparts\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.pointer = (function() {\n\n\n  return {\n    /**\n     * Wrapper for mousedown\n     * @see EMPWorldWind.eventHandlers.mouse.mousedown\n     * @this EMPWorldWind.Map\n     */\n    pointerdown: EMPWorldWind.eventHandlers.mouse.mousedown,\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mouseup\n     * @this EMPWorldWind.Map\n     */\n    pointerup: EMPWorldWind.eventHandlers.mouse.mouseup,\n    /**\n     * @see EMPWorldWind.eventHandlers.mouse.mousemove\n     * @this EMPWorldWind.Map\n     */\n    pointermove: EMPWorldWind.eventHandlers.mouse.mousemove\n  };\n}());\n"]}