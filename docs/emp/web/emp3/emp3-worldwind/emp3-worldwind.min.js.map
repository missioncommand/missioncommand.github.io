{"version":3,"sources":["../../../src/mapengine/worldwind/worldwind-map-engine.js","../../../src/mapengine/worldwind/EMPWorldWind.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpWMSLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpFeature.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.constants.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.utils.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.primitiveBuilders.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.EditorController.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.mouse.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.touch.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.drag.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.pointer.js"],"names":["EMPWorldWind","window","emp","engineDefs","worldWindMapEngine","args","empMapInstance","mapInstance","empWorldWind","engineInterface","map","createEngineTemplate","mapEngineExposed","implementation","displayName","version","capabilities","mapType","type3D","type2_5D","formats","GEOJSON_BASIC","plot","draw","edit","GEOJSON_FULL","WMS","version_1_1","version_1_3","elevationData","KML_BASIC","KML_COMPLEX","IMAGE","MILSTD","version2525B","version2525C","AIRSPACE","AOI","settings","milstd","iconSize","labelOption","requirements","wmsCapabilities","projection","flat","initialize","succeed","empWorldWindInstance","engineDirect","name","ref","eventing","StatusChange","status","states","READY","err","console","error","fail","MAP_INSTANCE_INIT_FAILED","view","set","transaction","altitude","bottomLeft","topRight","feature","bufferScale","t1","t2","toRad","Math","PI","items","globalType","location","latitude","lat","longitude","lon","tilt","roll","heading","bounds","west","south","east","north","pow","sin","WorldWind","EARTH_RADIUS","asin","sqrt","cos","format","emp3","api","enums","FeatureTypeEnum","GEO_CIRCLE","properties","radius","GEO_ELLIPSE","max","semiMajor","semiMinor","GEO_RECTANGLE","width","height","GEO_SQUARE","GEO_ACM","coordinates","failures","push","animate","pause","animateCB","getCenter","getBounds","run","eventHandlers","notifyViewChange","call","CameraEventEnum","CAMERA_MOTION_STOPPED","CAMERA_IN_MOTION","centerOnLocation","lookAt","range","overlay","add","rc","failList","util","each","addLayer","success","typeLibrary","Error","coreId","message","level","MINOR","remove","removeLayer","overlayId","bind","this","wms","addWMS","removeWMS","itemsCount","length","plotFeature","featureCount","cbArgs","unplotFeature","mil2525","icon","labels","setLabelStyle","getLatLonFromXY","pickPoint","Vec2","x","y","terrainObject","worldWindow","pickTerrain","position","undefined","visibility","featureId","features","setVisible","visible","refresh","config","bRangeChanged","prop","value","hasOwnProperty","toLowerCase","setContrast","utils","defined","enableRenderingOptimization","singlePointAltitudeRanges","mid","high","singlePointAltitudeRangeMode","getSinglePointAltitudeRangeMode","worldWind","navigator","navigation","enable","setLockState","selection","selectFeatures","failed","capture","screenshot","dataUrl","state","destroy","shutdown","isV2Core","wwd","layers","pixelSize","drawing","editing","dragging","lastInteractionEvent","lockState","MapMotionLockEnum","UNLOCKED","lastRender","selectionStyle","scale","lineColor","fillColor","autoPanning","step","up","down","left","right","labelStyles","V","L","S","AA","AB","AC","H","M","T","T1","CN","C","F","G","H1","H2","J","K","N","P","W","W1","X","Y","Z","constants","SinglePointAltitudeRangeMode","LOW_RANGE","empSelections","optimizationMapMoveEpsilon","EPSILON7","lastNavigator","shapesInViewArea","prototype","blackContrastLayer","SurfaceSector","Sector","FULL_SPHERE","attributes","interiorColor","Color","drawOutline","whiteContrastLayer","contrastLayer","RenderableLayer","pickEnabled","addRenderable","goToAnimator","GoToAnimator","dragRecognizer","DragRecognizer","canvas","event","drag","throttleValue","eventClass","eventHandler","addEventListener","throttle","extent","isNaN","alt","Location","greatCircleDistance","centerLat","centerLon","lookAtLocation","helpers","copyObject","configProperties","midDistanceThreshold","farDistanceThreshold","far","brightness","empOverlay","layer","data","EmpLayer","rootOverlayId","id","redraw","featureKey","result","getLayer","featureKeys","removeFeatureSelection","Position","travelTime","globeMoveTime","goTo","_completeLookAtMotion","callback","_callback","EmpFeature","editors","EditorController","updateFeature","parentCoreId","removeFeatureById","messge","selected","selectedFeature","select","storeFeatureSelection","enableLayer","subLayer","layerExists","enabled","subLayers","getSubLayer","layerType","ARCGIS_93_REST_LAYER","BING_LAYER","IMAGE_LAYER","OSM_LAYER","TMS_LAYER","WMS_LAYER","WMTS_LAYER","wmsLayer","EmpWMSLayer","isFeatureSelected","getFeatureSelection","getSelections","isMultiPointPresent","multiPointCollection","getMultiPoint","storeMultiPoint","multiPoint","removeMultiPoint","isAirspacePresent","airspaceCollection","getAirspace","storeAirspace","airspace","removeAirspace","getSinglePoints","singlePointCollection","isSinglePointPresent","getSinglePoint","storeSinglePoint","singlePoint","removeSinglePoint","getSinglePointCount","Object","keys","isSinglePointIdOnHoldPresent","singlePointCollectionIdOnHold","getSinglePointIdOnHold","singlePointCollectionOnHold","storeSinglePointIdOnHold","singlePointId","removeSinglePointIdOnHold","getSinglePointsIdOnHold","getSinglePointsIdOnHoldCount","styles","style","includes","updateFeatureLabelStyle","triggerRenderUpdate","contrast","renderables","WHITE_CONTRAST","BLACK_CONTRAST","lock","spinGlobe","vertical","horizontal","setTimeout","drawFrame","toDataURL","viewport","linearLocation","isMapMoving","equalsEpsilon","pickShapesInViewRegion","shapes","canvasCoordinates","boundRectangle","Rectangle","pickShapesInRegion","isMilStdMultiPointShapeInViewRegion","empFeature","p","inView","coordinate","description","parentId","_overlay","defineProperty","enumerable","_layer","addFeature","isFeaturePresent","shape","type","FeatureType","RENDERABLE","addFeatures","addFeatureChild","entity","childEntity","isFeatureChildPresent","parentFeature","childrenFeatureKeys","allocateFeatureChild","parentEntity","addSubLayer","isSubLayerPresent","isLayerEmpty","featuresLength","subOverlaysLength","getFeature","isFeaturePresentById","isPrimitive","PRIMITIVE","PRIMITIVE_COLLECTION","isDataSource","DATA_SOURCE","getFeatures","getSubLayers","removeFeatures","removeFeature","removeFeatureSelections","showFeatures","showFeature","oMultiPoint","childrenFeatureId","childrenEntity","featureType","ENTITY","show","billboard","reRenderBillboardRequired","path","polyline","polygon","label","rectangle","empCesium","COMPOUND_ENTITY","airspaceLabelPresent","airspaceLabel","get","oAirspace","oSinglePoint","removeSubLayers","showSubLayers","clearLayer","LayerType","showLayer","isVisible","deallocateFeatureChild","worldwind","removeRenderable","renderable","deallocateFeature","allocateFeature","featureChildrenLength","childrenFeatures","getFeatureChildrenEntityArray","index","childrenFeature","clearFeature","removeFeatureChild","featureChildrenEntityArray","removeSubLayer","subOverlay","SubLayers","removeSubLayerById","subLayersLength","layerNames","url","_wms","activeLayers","join","useProxy","global","configuration","urlProxy","service","sector","levelZeroDelta","numLevels","size","timeString","_wmsLayer","WmsLayer","_id","_altitudeMode","CLAMP_TO_GROUND","altMode","shapesCount","i","altitudeMode","_selected","highlighted","addShapes","primitives","Array","isArray","userProperties","primitive","clearShapes","MAX_HEIGHT","globeWasMoving","globeWasZooming","extentBufferFactor","USE_DATA_SOURCE","NO_PANNING","METERS_PER_INCH","SCALE_LINE_LENGTH","propertyDefaults","FILL_COLOR_HEX","LINE_COLOR_HEX","LINE_WIDTH","selectionProperties","COLOR_HEX","WIDTH","SCALE","GROUND_PRIMITIVE","OVERLAY_LAYER","TERRAIN_LAYER","EntityType","BILLBOARD","BOX","CORRIDOR","CYLINDER","DESCRIPTION","ELLIPSE","ELLIPSOID","LABEL","MODEL","ORIENTATION","PATH","POLYGON","POLYLINE","POLYLINE_VOLUME","POSITION","RECTANGLE","VIEW_FROM","WALL","KML","MultiPointRenderType","JSON","GEOJSON","DATA_URL","CANVAS","CANVAS_LABEL_ONLY","SVG","SVG_LABEL_ONLY","MID_RANGE","HIGHEST_RANGE","RendererWorker","A","B","D","LabelStyle","REQUIRED_LABELS","COMMON_LABELS","ALL_LABELS","AllLabels","RendererSettings","standard","Symbology_2525Bch2_USAS_13_14","Symbology_2525C","modifierLookup","QUANTITY","REDUCED_OR_REINFORCED","STAFF_COMMENTS","ADDITIONAL_INFO_1","ADDITIONAL_INFO_2","ADDITIONAL_INFO_3","EVALUATION_RATING","COMBAT_EFFECTIVENESS","SIGNATURE_EQUIPMENT","HIGHER_FORMATION","HOSTILE","IFF_SIF","DIRECTION_OF_MOVEMENT","OFFSET_INDICATOR","UNIQUE_DESIGNATOR_1","UNIQUE_DESIGNATOR_2","EQUIPMENT_TYPE","DATE_TIME_GROUP","DATE_TIME_GROUP_2","ALTITUDE_DEPTH","LOCATION","SPEED","SPECIAL_C2_HEADQUARTERS","DISTANCE","AZIMUTH","FILL_COLOR","LINE_COLOR","TEXT_COLOR","X_OFFSET","X_UNITS","Y_OFFSET","Y_UNITS","NAME","STANDARD","highAltitudeRangeImage","highRangeImageRed","btoa","highRangeImageBlue","highRangeImageGreen","highRangeImageYellow","getEventCoordinates","clientX","clientY","screenX","screenY","updateModifierLabels","iconLabels","iconPixelSize","mod","modifiedModifiers","property","convertModifierStringTo2525","modifiers","showModLabels","standardModifiers","sModifier","modValue","parse","stringify","Modifiers","convertSymbolStandardToRendererFormat","checkForRequiredModifiers","item","symbolCode","oAM","oAN","basicSymbolCode","symbolDef","lonDistance","overrides","armyc2","c2sd","renderer","utilities","SymbolUtilities","getBasicSymbolID","checkSymbolStandard","SymbolDefTable","getSymbolDef","distance","azimuth","drawCategory","DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE","slice","DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE","splice","newVal","DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE","DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_LINE","coord0","coord1","pointCartographic0","pointCartographic1","dist","modifiersCopy","featureMilStdVersionType","MILSTD_2525C","MILSTD_2525B","indexOf","log","_hex6ToRGBA","hex","replace","r","g","b","parseInt","substring","red","green","blue","alpha","_hex8ToRGBA","a","hexToRGBA","normalize","newHex","normalizeRGBAColor","color","normalColor","assign","toString","boundsWidth","boundsHeight","selectHighAltitudeRangeImage","affiliationLetter","highScaleImageYellow","CameraAltitude","relativeEpsilon","absoluteEpsilon","defaultValue","absDiff","abs","EPSILON1","EPSILON2","EPSILON3","EPSILON4","EPSILON5","EPSILON6","EPSILON8","EPSILON9","EPSILON10","EPSILON11","EPSILON12","EPSILON13","EPSILON14","EPSILON15","EPSILON16","EPSILON17","EPSILON18","EPSILON19","EPSILON20","GRAVITATIONALPARAMETER","SOLAR_RADIUS","LUNAR_RADIUS","SIXTY_FOUR_KILOBYTES","sign","signNotZero","primitiveBuilders","createTextAttributes","textColor","TextAttributes","offset","Offset","OFFSET_FRACTION","depthTest","labelStyle","fontColor","family","font","fontFamily","justification","horizontalAlignment","labelAlign","fontSize","createShapeAttributes","highlightAttributes","selectedLineColor","selectedFillColor","selectedLabelColor","ShapeAttributes","GEO_MIL_SYMBOL","GEO_POINT","PlacemarkAttributes","iconUrl","imageSource","baseUrl","labelAttributes","imageScale","imageColor","YELLOW","GEO_TEXT","GEO_PATH","GEO_POLYGON","strokeStyle","strokeColor","outlineColor","BLACK","drawInterior","strokeWidth","lineWidth","outlineWidth","outlineStippleFactor","stippleFactor","outlineStipplePattern","stipplePattern","constructAirControlMeasure","primitivePolygon","boundaries","len","maxAlt","Polygon","ABSOLUTE","extrude","constructSurfaceCircle","circlePrimitive","SurfaceCircle","constructSurfaceEllipse","ellipsePrimitive","SurfaceEllipse","constructSurfacePolyline","pathPrimitive","locations","SurfacePolyline","constructSurfacePolylineFromGeoJSON","geoJSON","polylinePrimitive","lineOpacity","constructPlacemark","placemark","eyeDistanceScaling","Placemark","alwaysOnTop","constructSurfacePolygon","polygonPrimitive","boundaryLen","j","numBounds","subBoundary","SurfacePolygon","constructSurfacePolygonFromGeoJSON","geometry","constructSurfaceRectangle","rectPrimitive","SurfaceRectangle","constructText","textPrimitive","GeographicText","constructTextFromGeoJSON","selectedColor","_constructSinglePointMilStdSymbol","imageInfo","imageCenter","imageBounds","imageOffset","selectedImage","selectedModifiers","drawLeaderLine","leaderLineAttributes","RED","WHITE","substr","MilStdIconRenderer","Render","getCenterPoint","getImageBounds","toDataUrl","LINECOLOR","FILLCOLOR","_constructMultiPointMilStdFeature","componentFeature","lineCount","subGeoJSON","bbox","featureCoords","positions","split","trim","sec","web","SECWebRenderer","RenderSymbol","wasClipped","strokeWeight","processModifiers","enhancedModifiers","override","lowRangeMode","constructMilStdSymbol","concat","asyncPlotKMLFeature","kmlFilePromise","kmlLayer","wwFeature","encodeURIComponent","KmlFile","then","kmlFile","buildShapes","empLayer","fn","threshold","scope","last","deferTimer","context","now","Date","arguments","clearTimeout","apply","viewEventType","ViewChange","callRenderer","singlePointAltitudeRangeChanged","iconLabelOption","isHighAltitudeRangeImage","_imageSource","extractFeatureFromEvent","mouseEvent","empEventingArgs","obj","pickList","pick","objects","isTerrain","userObject","target","mouse","click","clickEvent","Pointer","EventType","SINGLE_CLICK","dblclick","dblClickEvent","DBL_CLICK","wheel","wheelDeltaY","preventDefault","NO_MOTION","NO_ZOOM_NO_PAN","NO_ZOOM","touch","touchstart","coords","touches","MOUSEDOWN","touchend","MOUSEUP","touchcancel","touchmove","MOVE","began","changed","ended","pointer","pointerdown","mousedownEvent","pointerup","mouseupEvent","pointermove","element","elementBounds","smartAreaBuffer","pan","buttons","NO_PAN","SMART_MOTION","srcElement","originalTarget","getBoundingClientRect","offsetX","offsetY"],"mappings":"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","file":"emp3-worldwind.min.js","sourcesContent":["var EMPWorldWind = window.EMPWorldWind || {};\nvar emp = window.emp || {};\nemp.engineDefs = emp.engineDefs || {};\n\n/**\n * @classdesc EMP3 WorldWind Map Engine Interface\n *\n * @class Instantiates a WorldWind map for EMP\n * @param args\n * @returns {engineInterface}\n */\nemp.engineDefs.worldWindMapEngine = function(args) {\n\n  var empMapInstance = args.mapInstance;\n  /** @type EMPWorldWind.map# */\n  var empWorldWind;\n\n  var engineInterface = emp.map.createEngineTemplate(),\n    mapEngineExposed = engineInterface;\n\n  engineInterface.implementation.displayName = \"WorldWind Map Engine\";\n  engineInterface.implementation.version = \"1.0.0\";\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.mapType.type2_5D = true;\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.draw = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.edit = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.edit = true;\n  engineInterface.capabilities.formats.WMS.version_1_1 = true;\n  engineInterface.capabilities.formats.WMS.version_1_3 = true;\n  engineInterface.capabilities.formats.WMS.elevationData = true;\n  engineInterface.capabilities.formats.KML_BASIC.plot = true;\n  engineInterface.capabilities.formats.KML_BASIC.draw = true;\n  engineInterface.capabilities.formats.KML_BASIC.edit = true;\n  engineInterface.capabilities.formats.KML_COMPLEX.plot = true;\n  engineInterface.capabilities.formats.IMAGE.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.edit = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.edit = true;\n  engineInterface.capabilities.formats.AIRSPACE.plot = true;\n  engineInterface.capabilities.formats.AIRSPACE.draw = true;\n  engineInterface.capabilities.formats.AIRSPACE.edit = true;\n  engineInterface.capabilities.formats.AOI.plot = true;\n  engineInterface.capabilities.formats.AOI.draw = true;\n  engineInterface.capabilities.formats.AOI.edit = true;\n  engineInterface.capabilities.settings.milstd.iconSize = true;\n  engineInterface.capabilities.settings.milstd.labelOption = true;\n  engineInterface.requirements.wmsCapabilities = true;\n  engineInterface.capabilities.projection.flat = false;\n\n  /**\n   * Initialization\n   * @param {EMPWorldWind.map} empWorldWindInstance\n   */\n  engineInterface.initialize.succeed = function(empWorldWindInstance) {\n    // Add initialization code here\n    try {\n      empWorldWind = empWorldWindInstance;\n      empWorldWind.mapEngineExposed = mapEngineExposed;\n      emp.map.engineDirect = {name: \"worldwind\", ref: empWorldWind};\n\n      // Notify application that the map is ready to receive data\n      empMapInstance.eventing.StatusChange({\n        status: emp.map.states.READY\n      });\n    }\n    catch (err) {\n      window.console.error(\"Error initializing WorldWind \", err);\n    }\n  };\n\n  /**\n   * Indicates a failed loading\n   */\n  engineInterface.initialize.fail = function() {\n    empMapInstance.eventing.StatusChange({\n      status: emp.map.states.MAP_INSTANCE_INIT_FAILED\n    });\n  };\n\n  /**\n   * @todo drop this functionality into the map itself and expose a simpler call\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.set = function(transaction) {\n    var args, altitude, bottomLeft, topRight, feature, bufferScale,\n      t1, t2,\n      toRad = Math.PI / 180.0; // save a few divisions later\n\n    switch (transaction.items[0].globalType) {\n      case \"view\":\n        if (transaction.items[0].location) {\n          // Set camera\n          args = {\n            latitude: transaction.items[0].location.lat,\n            longitude: transaction.items[0].location.lon,\n            altitude: transaction.items[0].altitude,\n            tilt: transaction.items[0].tilt,\n            roll: transaction.items[0].roll,\n            heading: transaction.items[0].heading\n          };\n        }\n        else if (transaction.items[0].bounds) {\n          // Zoom to overlay\n\n          // Express lat/lon as radians\n          bottomLeft = {\n            lat: transaction.items[0].bounds.west * toRad,\n            lon: transaction.items[0].bounds.south * toRad\n          };\n\n          topRight = {\n            lat: transaction.items[0].bounds.east * toRad,\n            lon: transaction.items[0].bounds.north * toRad\n          };\n\n          t1 = Math.pow(Math.sin((topRight.lat - bottomLeft.lat) / 2), 2);\n          t2 = Math.pow(Math.sin((topRight.lon - bottomLeft.lon) / 2), 2);\n\n          // Haversine formula\n          // TODO see if we can replace this with WorldWind functionality\n          altitude = 2 * WorldWind.EARTH_RADIUS * Math.asin(Math.sqrt(t1 + Math.cos(topRight.lat) * Math.cos(bottomLeft.lat) * t2));\n\n          args = {\n            latitude: (transaction.items[0].bounds.north + transaction.items[0].bounds.south) / 2,\n            longitude: (transaction.items[0].bounds.east + transaction.items[0].bounds.west) / 2,\n            altitude: altitude,\n            tilt: 0,\n            roll: 0,\n            heading: 0\n          };\n        }\n        break;\n      case \"feature\":\n        bufferScale = 2.25; // Assume conic view from the camera\n        feature = transaction.items[0];\n        switch (feature.format) {\n          case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n            altitude = feature.properties.radius * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n            altitude = Math.max(feature.properties.semiMajor, feature.properties.semiMinor) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n            altitude = Math.max(feature.properties.width, feature.properties.height) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n            altitude = feature.properties.width * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO compute bounding box diagonal distance\n          default:\n            altitude = 10000; // Default to 10000m\n        }\n\n        args = {\n          latitude: transaction.items[0].coordinates[1],\n          longitude: transaction.items[0].coordinates[0],\n          altitude: altitude,\n          tilt: 0,\n          roll: 0,\n          heading: 0\n        };\n        break;\n      default:\n        transaction.failures.push(transaction.items[0]);\n    }\n\n    // Check if we are animating\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n\n        // If we animated update the returned values\n        transaction.items[0].location = {\n          lat: empWorldWind.getCenter().latitude,\n          lon: empWorldWind.getCenter().longitude\n        };\n        transaction.items[0].bounds = empWorldWind.getBounds();\n\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n\n    // Notify start of movement\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    empWorldWind.centerOnLocation(args);\n\n    // Set initial transaction return values, to be overwritten if the move is animated\n    transaction.items[0].location = {\n      lat: empWorldWind.getCenter().latitude,\n      lon: empWorldWind.getCenter().longitude\n    };\n    transaction.items[0].bounds = empWorldWind.getBounds();\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.lookAt.set = function(transaction) {\n    var args = {\n      latitude: transaction.items[0].latitude,\n      longitude: transaction.items[0].longitude,\n      altitude: transaction.items[0].altitude,\n      range: transaction.items[0].range,\n      tilt: transaction.items[0].tilt,\n      heading: transaction.items[0].heading\n    };\n\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n    empWorldWind.lookAt(args);\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.add = function(transaction) {\n    var rc,\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.addLayer(overlay);\n\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message,\n          level: emp.typeLibrary.Error.level.MINOR\n        }));\n      }\n    });\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.remove = function(transaction) {\n    var rc = {},\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.removeLayer(overlay.overlayId);\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message\n        }));\n      }\n    }.bind(this));\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.add = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.addWMS(wms);\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.remove = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.removeWMS(wms);\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.add = function(transaction) {\n    var feature,\n      itemsCount = transaction.items.length;\n\n    // Pause the transaction\n    transaction.pause();\n\n    while (itemsCount) {\n      // Note pre-decrement\n      feature = transaction.items[--itemsCount];\n\n      empWorldWind.plotFeature(feature, function(featureCount, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error({\n            feature: cbArgs.feature\n          }));\n        }\n\n        // All items have been processed\n        if (featureCount === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemsCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.remove = function(transaction) {\n    var rc;\n    emp.util.each(transaction.items, function(feature) {\n      rc = empWorldWind.unplotFeature(feature);\n      if (!rc.success) {\n        transaction.fail(new emp.typeLibrary.Error({\n          message: rc.message\n        }));\n      }\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   * @deprecated\n   */\n  engineInterface.settings.mil2525.icon.labels.set = function(transaction) {\n    empWorldWind.setLabelStyle(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.getLatLonFromXY = function(transaction) {\n    var pickPoint = new WorldWind.Vec2(transaction.items[0].x, transaction.items[0].y);\n    var terrainObject = empWorldWind.worldWindow.pickTerrain(pickPoint).terrainObject();\n    transaction.items[0].lat = terrainObject ? terrainObject.position.latitude : undefined;\n    transaction.items[0].lon = terrainObject ? terrainObject.position.longitude : undefined;\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.visibility.set = function(transaction) {\n    emp.util.each(transaction.items, function(feature) {\n      if (feature.featureId in empWorldWind.features) {\n        empWorldWind.features[feature.featureId].setVisible(feature.visible);\n      }\n    }.bind(this));\n    empWorldWind.refresh();\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.map.config = function(transaction) {\n    var bRangeChanged;\n    // Iterate through each transaction item, check for properties and apply them\n    emp.util.each(transaction.items, function(config) {\n      var prop, value;\n      for (prop in config) {\n        if (config.hasOwnProperty(prop)) {\n          // Skip meta data fields\n          if (prop === \"messageId\") {\n            continue;\n          }\n\n          value = config[prop];\n\n          switch (prop.toLowerCase()) {\n            case \"brightness\":\n              empWorldWind.setContrast(value);\n              break;\n            case \"milstdlabels\":\n              empWorldWind.setLabelStyle(value);\n              break;\n            case \"renderingOptimization\":\n              if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.enableRenderingOptimization)) {\n                bRangeChanged = true;\n                empWorldWind.enableRenderingOptimization = value;\n              }\n              break;\n            case \"midDistanceThreshold\":\n              if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.mid)) {\n                bRangeChanged = true;\n                empWorldWind.singlePointAltitudeRanges.mid = value;\n              }\n              break;\n            case \"farDistanceThreshold\":\n              if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.high)) {\n                bRangeChanged = true;\n                empWorldWind.singlePointAltitudeRanges.high = value;\n                //empCesium.singlePointAltitudeRangeMode = cesiumEngine.utils.getSinglePointAltitudeRangeMode(empCesium.cameraAltitude, empCesium.singlePointAltitudeRanges);\n                //empCesium.processOnRangeChangeSinglePoints();\n              }\n              break;\n            default:\n              transaction.fail(new emp.typeLibrary.Error({\n                message: 'Config property ' + prop + ' is not supported by this engine'\n              }));\n          }\n\n          if (bRangeChanged) {\n            empWorldWind.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(empWorldWind.worldWind.navigator.range, empWorldWind.singlePointAltitudeRanges);\n            // force a render update when the altitude range changes\n            empWorldWind.refresh();\n          }\n        }\n      }\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.navigation.enable = function(transaction) {\n    empWorldWind.setLockState(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.selection.set = function(transaction) {\n    var rc = empWorldWind.selectFeatures(transaction.items);\n    transaction.failures = rc.failed;\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.capture.screenshot = function(transaction) {\n    return transaction.items[0].dataUrl = empWorldWind.screenshot();\n  };\n\n  /**\n   * Destroys the current engine\n   */\n  engineInterface.state.destroy = function() {\n    if (empWorldWind) {\n      empWorldWind.shutdown();\n      empWorldWind = undefined;\n    }\n  };\n\n  // return the engineInterface object as a new engineTemplate instance\n  return engineInterface;\n};","/* global WorldWind */\n\n/**\n * @namespace\n */\nvar EMPWorldWind = {};\nEMPWorldWind.isV2Core = false;\n\n/**\n * @classdesc The main interface for interacting with NASA WebWorldWind. Any interaction with the WorldWindow will occur\n * in this class.\n *\n * @class\n * @param {WorldWind.WorldWindow} wwd\n */\nEMPWorldWind.map = function(wwd) {\n  /**\n   * @type {WorldWind.WorldWindow}\n   */\n  this.worldWindow = wwd;\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpLayer>} */\n  this.layers = {};\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpFeature>} */\n  this.features = {};\n\n  /**\n   * This holds the state of the instance\n   * @memberof EMPWorldWind.map#\n   */\n  this.state = {\n    /**\n     * Pixel size\n     */\n    pixelSize: 1,\n    /**\n     * Whether the map is in drawing mode\n     */\n    drawing: false,\n    /**\n     * Whether the map is in editing mode\n     */\n    editing: false,\n    /**\n     * Whether we are dragging\n     */\n    dragging: false,\n    /**\n     * Placeholder for the last detected mouse move/touch/pointer event\n     */\n    lastInteractionEvent: undefined,\n    /**\n     * Lock state\n     */\n    lockState: emp3.api.enums.MapMotionLockEnum.UNLOCKED,\n    /**\n     * Object for holding state to compute when MilStdSymbols should be re-rendered\n     */\n    lastRender: {\n      bounds: {\n        north: 0,\n        south: 0,\n        east: 0,\n        west: 0\n      },\n      altitude: 0\n    },\n    /**\n     * Default selection style\n     * @type SelectionStyle\n     */\n    selectionStyle: {\n      scale: 1,\n      lineColor: \"#FFFF00\",\n      fillColor: undefined\n    },\n    /**\n     * Object for describing autoPanning behavior\n     */\n    autoPanning: {\n      step: 0.5,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    },\n    /**\n     * Label styles for the renderer\n     */\n    labelStyles: {\n      \"V\": false,\n      \"L\": false,\n      \"S\": false,\n      \"AA\": false,\n      \"AB\": false,\n      \"AC\": true,\n      \"H\": false,\n      \"M\": false,\n      \"T\": false,\n      \"T1\": false,\n      \"CN\": false,\n      \"C\": false,\n      \"F\": false,\n      \"G\": false,\n      \"H1\": false,\n      \"H2\": false,\n      \"J\": false,\n      \"K\": false,\n      \"N\": false,\n      \"P\": false,\n      \"W\": false,\n      \"W1\": false,\n      \"X\": false,\n      \"Y\": false,\n      \"Z\": false\n    }\n  };\n\n  // Optimization for mil standard  single points.\n  /**\n   * Object for holding render optimization params\n   */\n  this.singlePointAltitudeRanges = {};\n  /**\n   * Mid-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.mid = 600000; // default\n  /**\n   * High-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.high = 1200000; // default\n  /**\n   * Current range mode\n   */\n  this.singlePointAltitudeRangeMode = EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n\n  /**\n   * Current set of selected objects\n   */\n  this.empSelections = {};\n  this.optimizationMapMoveEpsilon = EMPWorldWind.Math.EPSILON7;\n  this.lastNavigator = {};\n  this.shapesInViewArea;\n  this.bounds;\n};\n\n// typedefs ============================================================================================================\n/**\n * @typedef {object} SelectionStyle\n * @property {number} scale\n * @property {string|undefined} lineColor\n * @property {string|undefined} fillColor\n */\n//======================================================================================================================\n\n/**\n * Creates the initial layers\n * @param {object} args\n * @param {Bounds} [args.extent]\n * @param {object} [args.configProperties]\n * @param {emp.map} args.mapInstance\n */\nEMPWorldWind.map.prototype.initialize = function(args) {\n  /**\n   * @memberof EMPWorldWind.map#\n   * @type {emp.map}\n   */\n  this.empMapInstance = args.mapInstance;\n\n  // Create the contrast layers\n  var blackContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n  blackContrastLayer.attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0.0);\n  blackContrastLayer.attributes.drawOutline = false;\n\n  var whiteContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n  whiteContrastLayer.attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0.0);\n  whiteContrastLayer.attributes.drawOutline = false;\n\n  this.contrastLayer = new WorldWind.RenderableLayer('contrast layer');\n  this.contrastLayer.pickEnabled = false;\n  this.worldWindow.addLayer(this.contrastLayer);\n\n  this.contrastLayer.addRenderable(whiteContrastLayer);\n  this.contrastLayer.addRenderable(blackContrastLayer);\n\n  // Create the goTo manipulator\n  /** @member {WorldWind.GoToAnimator} */\n  this.goToAnimator = new WorldWind.GoToAnimator(this.worldWindow);\n\n  // Register drag event handlers\n  /** @member {WorldWind.DragRecognizer} */\n  this.dragRecognizer = new WorldWind.DragRecognizer(this.worldWindow.canvas, function(event) {\n    if (event.state in EMPWorldWind.eventHandlers.drag) {\n      EMPWorldWind.eventHandlers.drag[event.state].call(this, event);\n    }\n  }.bind(this));\n\n  // Register DOM event handlers\n  var throttleValue = 50; // throttle on event calls in ms\n  var eventClass, eventHandler;\n  for (eventClass in EMPWorldWind.eventHandlers) {\n    if (EMPWorldWind.eventHandlers.hasOwnProperty(eventClass)) {\n      eventClass = EMPWorldWind.eventHandlers[eventClass];\n      for (eventHandler in eventClass) {\n        if (eventClass.hasOwnProperty(eventHandler)) {\n          this.worldWindow.addEventListener(eventHandler,\n            EMPWorldWind.eventHandlers.throttle(eventClass[eventHandler].bind(this), throttleValue, this)\n          );\n        }\n      }\n    }\n  }\n\n  // If an initial extent is passed in set the view\n  if (args.extent) {\n    if (!isNaN(args.extent.north) && !isNaN(args.extent.south) && !isNaN(args.extent.east) && !isNaN(args.extent.west)) {\n      // Get approximate height from the width of the extent\n      var alt = Math.PI * WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n          new WorldWind.Location(args.extent.north, args.extent.west),\n          new WorldWind.Location(args.extent.south, args.extent.east));\n\n      this.centerOnLocation({\n        latitude: (args.extent.north + args.extent.south) / 2,\n        longitude: (args.extent.east + args.extent.west) / 2,\n        altitude: alt\n      });\n    }\n    else if (!isNaN(args.extent.centerLat) && !isNaN(args.extent.centerLon)) {\n      // Arbitrarily use 1e7 as altitude\n      this.centerOnLocation({\n        latitude: args.extent.centerLat,\n        longitude: args.extent.centerLon,\n        altitude: 1e7\n      });\n    }\n  }\n\n  if (this.worldWindow.navigator) {\n    this.lastNavigator.range = this.worldWindow.navigator.range;\n    this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n    this.lastNavigator.roll = this.worldWindow.navigator.roll;\n    this.lastNavigator.heading = this.worldWindow.navigator.heading;\n    this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n  }\n\n\n  // Update any other config properties passed in\n  if (EMPWorldWind.utils.defined(args.configProperties.midDistanceThreshold)) {\n    this.singlePointAltitudeRanges.mid = args.configProperties.midDistanceThreshold;\n  }\n\n  if (EMPWorldWind.utils.defined(args.configProperties.farDistanceThreshold)) {\n    this.singlePointAltitudeRanges.far = args.configProperties.farDistanceThreshold;\n  }\n\n  if (EMPWorldWind.utils.defined(args.configProperties.brightness)) {\n    this.setContrast(args.configProperties.brightness);\n  }\n\n  // Trigger an initial camera update to update EMP\n  EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n}\n;\n\n/**\n *\n * @param {emp.typeLibrary.Overlay} empOverlay\n * @returns {{success: boolean, message: string}}\n */\nEMPWorldWind.map.prototype.addLayer = function(empOverlay) {\n  var layer,\n    rc = {\n      success: false,\n      message: ''\n    };\n\n  if (empOverlay.overlayId in this.layers) {\n    rc = {\n      success: false,\n      message: \"An overlay with this id (\" + empOverlay.overlayId + \") already exists\"\n    };\n    return rc;\n  }\n\n  // Create the layer\n  layer = new EMPWorldWind.data.EmpLayer(empOverlay);\n  this.rootOverlayId = empOverlay.overlayId;\n  this.worldWindow.addLayer(layer.layer);\n\n  // Register the layer\n  this.layers[layer.id] = layer;\n\n  // Update the display\n  this.worldWindow.redraw();\n\n  rc.success = true;\n\n  return rc;\n};\n\n/**\n *\n * @param {emp.typeLibrary.Overlay | EMPWorldWind.data.EmpLayer} layer\n * @returns {{success: boolean, message: string}}\n */\nEMPWorldWind.map.prototype.removeLayer = function(layer) {\n  var featureKey, id,\n    result = {\n      success: false,\n      message: \"\"\n    };\n\n  id = layer.id || layer.coreId;\n  layer = this.getLayer(id);\n  if (layer) {\n    for (featureKey in layer.featureKeys) {\n      if (layer.featureKeys.hasOwnProperty(featureKey)) {\n        this.removeFeatureSelection(featureKey);\n      }\n    }\n\n    // Update the display\n    this.worldWindow.removeLayer(layer.layer);\n    this.worldWindow.redraw();\n\n    // Remove the record of the layer\n    delete this.layers[layer.id];\n\n    result.success = true;\n  }\n  else {\n    result.message = \"No layer found with the id \" + id;\n  }\n\n  return result;\n};\n\n/**\n *\n * @param {object} args\n * @param {number} args.latitude\n * @param {number} args.longitude\n * @param {number} [args.altitude]\n * @param {number} [args.tilt]\n * @param {number} [args.roll]\n * @param {number} [args.heading]\n * @param {boolean} [args.animate = false]\n * @param {function} [args.animateCB]\n */\nEMPWorldWind.map.prototype.centerOnLocation = function(args) {\n  var position;\n  if (typeof args.altitude === \"number\") {\n    position = new WorldWind.Position(args.latitude, args.longitude, args.altitude);\n  }\n  else {\n    position = new WorldWind.Location(args.latitude, args.longitude);\n  }\n\n  this.worldWindow.navigator.heading = args.heading || 0;\n  this.worldWindow.navigator.roll = args.roll || 0;\n  this.worldWindow.navigator.tilt = args.tilt || 0;\n\n  if (args.animate) {\n    this.goToAnimator.travelTime = EMPWorldWind.constants.globeMoveTime;\n    this.goToAnimator.goTo(position, args.animateCB || function() {\n      });\n  }\n  else {\n    this.goToAnimator.travelTime = 0;\n    this.goToAnimator.goTo(position);\n  }\n};\n\n/**\n *\n * @param {object} args\n * @param {number} args.latitude\n * @param {number} args.longitude\n * @param {number} [args.altitude] Currently unused by WorldWind\n * @param {number} args.range\n * @param {number} args.tilt\n * @param {number} args.heading\n * @param {boolean} [args.animate]\n * @param {function} [args.animateCB]\n */\nEMPWorldWind.map.prototype.lookAt = function(args) {\n  // substituting range for altitude for now\n  if (args.range !== 0) {\n    args.range = args.range || this.worldWindow.navigator.range;\n  }\n\n  var position = new WorldWind.Position(args.latitude, args.longitude, args.range);\n\n  /**\n   * @this {EMPWorldWind.map}\n   * @private\n   */\n  function _completeLookAtMotion() {\n    this.worldWindow.navigator.lookAtLocation.latitude = args.latitude;\n    this.worldWindow.navigator.lookAtLocation.longitude = args.longitude;\n\n    // lookAt does not support altitude in WorldWind yet\n    // this.worldWindow.navigator.lookAtLocation.altitude = args.altitude;\n\n    this.worldWindow.navigator.range = args.range;\n    this.worldWindow.navigator.tilt = args.tilt;\n    this.worldWindow.navigator.heading = args.heading;\n\n    if (args.animateCB) {\n      args.animateCB();\n    }\n\n    this.worldWindow.redraw();\n  }\n\n  this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n  this.goToAnimator.goTo(position, _completeLookAtMotion.bind(this));\n};\n\n/**\n * @param {emp.typeLibrary.Feature|EMPWorldWind.data.EmpFeature} feature\n * @param {PlotFeatureCB} [callback]\n */\nEMPWorldWind.map.prototype.plotFeature = function(feature, callback) {\n  /**\n   * Handle the async plotFeature method\n   * @private\n   */\n  var _callback = function(cbArgs) {\n    // Trigger an update for the display\n    this.worldWindow.redraw();\n\n    if (cbArgs.success) {\n      // Add the new feature to the global list of features\n      if (!(cbArgs.feature.id in this.features)) {\n        this.features[cbArgs.feature.id] = cbArgs.feature;\n      }\n    }\n\n    if (callback) {\n      callback(cbArgs);\n    }\n  }.bind(this);\n\n  // Check if we are using a EMPWorldWind feature internally\n  if (feature instanceof EMPWorldWind.data.EmpFeature) {\n    feature = feature.feature;\n  }\n\n  if (feature.featureId in this.features) {\n    // Update an existing feature\n    EMPWorldWind.editors.EditorController.updateFeature.call(this, this.features[feature.featureId], feature, _callback);\n  }\n  else {\n    // Plot a new feature\n    EMPWorldWind.editors.EditorController.plotFeature.call(this, feature, _callback);\n  }\n};\n/**\n * @callback PlotFeatureCB\n * @param {object} cbArgs\n * @param {EMPWorldWind.data.Feature} cbArgs.feature\n * @param {boolean} cbArgs.success\n * @param {string} [cbArgs.message]\n * @param {string} [cbArgs.jsError]\n */\n\n/**\n *\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.map.prototype.unplotFeature = function(feature) {\n  var layer,\n    rc = {\n      success: false,\n      message: \"\"\n    };\n\n  layer = this.getLayer(feature.parentCoreId);\n  if (layer) {\n    layer.removeFeatureById(feature.coreId);\n    this.removeFeatureSelection(feature.coreId);\n    this.worldWindow.redraw();\n    rc.success = true;\n  }\n  else {\n    rc.messge = 'Could not find the parent overlay';\n  }\n\n  return rc;\n};\n\n/**\n *\n * @param {emp.typeLibrary.Selection[]} empSelections\n */\nEMPWorldWind.map.prototype.selectFeatures = function(empSelections) {\n  var selected = [],\n    failed = [];\n\n  emp.util.each(empSelections, function(selectedFeature) {\n    var feature = this.features[selectedFeature.featureId];\n    if (feature) {\n      feature.selected = selectedFeature.select;\n      (feature.selected) ? this.storeFeatureSelection(selectedFeature.featureId) : this.removeFeatureSelection(selectedFeature.featureId);\n      //selected.push(feature);\n    }\n    else {\n      failed.push(selectedFeature.featureId);\n    }\n  }.bind(this));\n\n  this.worldWindow.redraw();\n\n  return {\n    success: selected.length !== 0,\n    selected: selected,\n    failed: failed\n  };\n};\n\n/**\n *\n * @param {string} id\n * @returns {EMPWorldWind.data.EmpLayer}\n */\nEMPWorldWind.map.prototype.getLayer = function(id) {\n  if (this.layers.hasOwnProperty(id)) {\n    return this.layers[id];\n  }\n};\n\n/**\n *\n * @param layer\n * @param enable\n */\nEMPWorldWind.map.prototype.enableLayer = function(layer, enable) {\n  var id, subLayer;\n  if (this.layerExists(layer)) {\n    layer.enabled = enable;\n    for (id in layer.subLayers) {\n      if (layer.subLayers.hasOwnProperty(id)) {\n        subLayer = layer.getSubLayer(id);\n        if (subLayer) {\n          this.enableLayer(subLayer, enable);\n        }\n      }\n    }\n\n    if ((layer.globalType === EMPWorldWind.constants.layerType.ARCGIS_93_REST_LAYER) || (layer.globalType === EMPWorldWind.constants.layerType.BING_LAYER) ||\n      (layer.globalType === EMPWorldWind.constants.layerType.IMAGE_LAYER) || (layer.globalType === EMPWorldWind.constants.layerType.OSM_LAYER) ||\n      (layer.globalType === EMPWorldWind.constants.layerType.TMS_LAYER) || (layer.globalType === EMPWorldWind.constants.layerType.WMS_LAYER)\n      || (layer.globalType === EMPWorldWind.constants.layerType.WMTS_LAYER)) {\n      if (!enable) {\n        this.worldWindow.removeLayer(layer);\n      }\n    }\n  }\n};\n\n/**\n *\n * @param layer\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.layerExists = function(layer) {\n  return this.layers.hasOwnProperty(layer.id);\n};\n\n/**\n * Adds a WMS layer to the map\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.map.prototype.addWMS = function(wms) {\n  var wmsLayer;\n\n  // Remove existing WMS if it already exists, we shall re-add it\n  wmsLayer = this.getLayer(wms.coreId);\n  if (wmsLayer) {\n    this.removeWMS(wmsLayer);\n  }\n\n  // Create the new layer\n  wmsLayer = new EMPWorldWind.data.EmpWMSLayer(wms);\n\n  this.layers[wmsLayer.id] = wmsLayer;\n  this.worldWindow.addLayer(wmsLayer.layer);\n  this.worldWindow.redraw();\n};\n\n/**\n * Removes a WMS layer from the map\n * @param {emp.typeLibrary.WMS|EMPWorldWind.data.EmpWMSLayer} wms\n */\nEMPWorldWind.map.prototype.removeWMS = function(wms) {\n  var layer,\n    id = wms.coreId || wms.id;\n\n  layer = this.getLayer(id);\n  if (layer) {\n    this.worldWindow.removeLayer(layer.layer);\n    delete this.layers[layer.id];\n    this.worldWindow.redraw();\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isFeatureSelected = function(id) {\n  return !!this.empSelections.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getFeatureSelection = function(id) {\n  if (this.isFeatureSelected(id)) {\n    return this.empSelections[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.map.prototype.storeFeatureSelection = function(id) {\n  this.empSelections[id] = id;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeFeatureSelection = function(id) {\n  if (this.empSelections.hasOwnProperty(id)) {\n    delete this.empSelections[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*|null}\n */\nEMPWorldWind.map.prototype.getSelections = function() {\n  return this.empSelections;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isMultiPointPresent = function(id) {\n  return !!this.multiPointCollection.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getMultiPoint = function(id) {\n  if (this.isMultiPointPresent(id)) {\n    return this.multiPointCollection[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param multiPoint\n */\nEMPWorldWind.map.prototype.storeMultiPoint = function(multiPoint) {\n  this.multiPointCollection[multiPoint.id] = multiPoint;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeMultiPoint = function(id) {\n  if (this.multiPointCollection.hasOwnProperty(id)) {\n    delete this.multiPointCollection[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isAirspacePresent = function(id) {\n  return !!this.airspaceCollection.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getAirspace = function(id) {\n  if (this.isAirspacePresent(id)) {\n    return this.airspaceCollection[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param airspace\n */\nEMPWorldWind.map.prototype.storeAirspace = function(airspace) {\n  this.airspaceCollection[airspace.id || airspace.coreId] = airspace;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeAirspace = function(id) {\n  if (this.airspaceCollection.hasOwnProperty(id)) {\n    delete this.airspaceCollection[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*|null}\n */\nEMPWorldWind.map.prototype.getSinglePoints = function() {\n  return this.singlePointCollection;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isSinglePointPresent = function(id) {\n  return !!this.singlePointCollection.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePoint = function(id) {\n  if (this.isSinglePointPresent(id)) {\n    return this.singlePointCollection[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param singlePoint\n */\nEMPWorldWind.map.prototype.storeSinglePoint = function(singlePoint) {\n  this.singlePointCollection[singlePoint.id] = singlePoint;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeSinglePoint = function(id) {\n  if (this.isSinglePointPresent(id)) {\n    delete this.singlePointCollection[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*|null}\n */\nEMPWorldWind.map.prototype.getSinglePoints = function() {\n  return this.singlePointCollection;\n};\n\n/**\n *\n * @returns {number}\n */\nEMPWorldWind.map.prototype.getSinglePointCount = function() {\n  if (this.defined(this.singlePointCollection)) {\n    return Object.keys(this.singlePointCollection).length;\n  }\n  else {\n    return 0;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isSinglePointIdOnHoldPresent = function(id) {\n  return !!this.singlePointCollectionIdOnHold.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePointIdOnHold = function(id) {\n  if (this.isSinglePointIdOnHoldPresent(id)) {\n    return this.singlePointCollectionOnHold[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param singlePointId\n */\nEMPWorldWind.map.prototype.storeSinglePointIdOnHold = function(singlePointId) {\n  this.singlePointCollectionIdOnHold[singlePointId] = singlePointId;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeSinglePointIdOnHold = function(id) {\n  if (this.isSinglePointIdOnHoldPresent(id)) {\n    delete this.singlePointCollectionIdOnHold[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePointsIdOnHold = function() {\n  return this.singlePointCollectionIdOnHold;\n};\n\n/**\n *\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePointsIdOnHoldCount = function() {\n  if (this.defined(this.singlePointCollectionIdOnHold)) {\n    return Object.keys(this.singlePointCollectionIdOnHold).length;\n  }\n  else {\n    return 0;\n  }\n};\n\n/**\n *\n * @param {Array} styles\n */\nEMPWorldWind.map.prototype.setLabelStyle = function(styles) {\n  var style, featureId, feature;\n  for (style in this.state.labelStyles) {\n    if (this.state.labelStyles.hasOwnProperty(style)) {\n      this.state.labelStyles[style] = styles.includes(style);\n    }\n  }\n\n  // TODO refresh only visible points and mark the rest as update when requested\n  for (featureId in this.features) {\n    if (this.features.hasOwnProperty(featureId)) {\n      feature = this.features[featureId];\n      EMPWorldWind.editors.EditorController.updateFeatureLabelStyle.call(this, feature);\n    }\n  }\n  this.worldWindow.redraw();\n};\n\n/**\n * Expose a refresh\n */\nEMPWorldWind.map.prototype.refresh = function() {\n  EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  //var featureId, feature;\n\n  // for (featureId in this.features) {\n  //   if (this.features.hasOwnProperty(featureId)) {\n  //     feature = this.features[featureId];\n  //\n  //     // TODO check if it is visible first\n  //     //EMPWorldWind.editors.EditorController.updateRender.call(this, feature);\n  //   }\n  // }\n\n  // TODO trigger redraw if necessary only\n  this.worldWindow.redraw();\n};\n\n/**\n * Adjust the background contrast\n * @param {number} contrast Value from 0-100, 50 is default\n */\nEMPWorldWind.map.prototype.setContrast = function(contrast) {\n  if (contrast > 100) {\n    contrast = 100;\n  }\n  else if (contrast < 0) {\n    contrast = 0;\n  }\n\n  if (contrast >= 50) {\n    this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, (contrast - 50) / 50);\n    this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0);\n  }\n  else {\n    this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0);\n    this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, (50 - contrast) / 50);\n  }\n\n  this.worldWindow.redraw();\n};\n\n/**\n *\n * @param {emp.typeLibrary.Lock} lockState\n */\nEMPWorldWind.map.prototype.setLockState = function(lockState) {\n  this.state.lockState = lockState.lock;\n};\n\n/**\n * Spins the globe if autoPanning is enabled\n */\nEMPWorldWind.map.prototype.spinGlobe = function() {\n  var vertical = 0,\n    horizontal = 0;\n\n  var step = this.worldWindow.navigator.range / (WorldWind.EARTH_RADIUS);\n\n  if (this.state.autoPanning.up) {\n    vertical = step;\n  }\n  else if (this.state.autoPanning.down) {\n    vertical = -step;\n  }\n\n  if (this.state.autoPanning.left) {\n    horizontal = -step;\n  }\n  else if (this.state.autoPanning.right) {\n    horizontal = step;\n  }\n\n  var position = new WorldWind.Position(\n    this.worldWindow.navigator.lookAtLocation.latitude + vertical,\n    this.worldWindow.navigator.lookAtLocation.longitude + horizontal,\n    this.worldWindow.navigator.range);\n  this.goToAnimator.travelTime = 500; // TODO smooth the transition if this is getting called too often\n\n  if (this.state.autoPanning.up ||\n    this.state.autoPanning.left ||\n    this.state.autoPanning.down ||\n    this.state.autoPanning.right) {\n    this.goToAnimator.goTo(position);\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    setTimeout(this.spinGlobe.bind(this), 250);\n  }\n  else {\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n  }\n};\n\n/**\n * Returns a data URI of the current view of the canvas\n * @todo Handle iconURL within Placemarks\n * @returns {string}\n */\nEMPWorldWind.map.prototype.screenshot = function() {\n  // This forces webgl to render which exposes current context for the canvas.toDataURL function\n  // Note: this is still lacking functionality as Placemarks are not rendered\n  this.worldWindow.drawFrame();\n  return this.worldWindow.canvas.toDataURL();\n};\n\n/**\n * Calculate the current bounds of the WorldWindow\n * @returns {Bounds}\n */\nEMPWorldWind.map.prototype.getBounds = function() {\n  var topRight, bottomLeft;\n\n  // Check the viewport corners\n  topRight = this.worldWindow.pickTerrain(new WorldWind.Vec2(this.worldWindow.viewport.width - 1, 1)).terrainObject();\n  bottomLeft = this.worldWindow.pickTerrain(new WorldWind.Vec2(1, this.worldWindow.viewport.height - 1)).terrainObject();\n\n  // If the corners don't contain the globe assume we are zoomed very far out, estimate an arbitrary rectangle\n  if (!topRight) {\n    topRight = {\n      position: WorldWind.Location.linearLocation(\n        this.worldWindow.navigator.lookAtLocation,\n        this.worldWindow.navigator.heading + 45,\n        Math.PI / 3,\n        new WorldWind.Location())\n    };\n  }\n\n  if (!bottomLeft) {\n    bottomLeft = {\n      position: WorldWind.Location.linearLocation(\n        this.worldWindow.navigator.lookAtLocation,\n        this.worldWindow.navigator.heading + 45,\n        -Math.PI / 3,\n        new WorldWind.Location())\n    };\n  }\n\n  return {\n    north: topRight.position.latitude,\n    south: bottomLeft.position.latitude,\n    east: topRight.position.longitude,\n    west: bottomLeft.position.longitude\n  };\n};\n\n/**\n * Returns the center of focus of the map\n * @returns {{latitude: number, longitude:number}}\n */\nEMPWorldWind.map.prototype.getCenter = function() {\n  return this.worldWindow.navigator.lookAtLocation;\n};\n\n/**\n * Deletes and removes all features and layers on the map\n */\nEMPWorldWind.map.prototype.shutdown = function() {\n  this.features = {};\n  this.layers = {};\n  this.worldWindow = undefined;\n};\n\n/**\n * checks is map is moving outside an epsilon. This function is used\n * to reduce the calls to update the features of the map.\n */\nEMPWorldWind.map.prototype.isMapMoving = function() {\n  if ((!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.latitude, this.lastNavigator.lookAtLocation.latitude, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.longitude, this.lastNavigator.lookAtLocation.longitude, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.range, this.lastNavigator.range, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.tilt, this.lastNavigator.tilt, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.roll, this.lastNavigator.roll, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.heading, this.lastNavigator.heading, this.optimizationMapMoveEpsilon))) {\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\n\nEMPWorldWind.map.prototype.pickShapesInViewRegion = function() {\n  var shapes;\n  //var bound = this.getBounds();\n  //var boundRectangle = new this.worldwind.Rectangle(new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude), this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n  // this.worldWindow.viewport\n  var canvasCoordinates = this.worldWindow.canvasCoordinates(0, 0);\n  //var screenLocation = new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude);\n  var boundRectangle = new WorldWind.Rectangle(canvasCoordinates[0], canvasCoordinates[1], 5000, 4000);\n  //var boundRectangle  = new WorldWind.Rectangle(0, 0 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n  //var boundRectangle  = new WorldWind.Rectangle(this.worldWindow.canvas.width/2, this.worldWindow.canvas.height/2 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n\n  shapes = this.worldWindow.pickShapesInRegion(boundRectangle);\n  return shapes;\n};\n\n\n/**\n * checks if feature is within view area of map.\n * @param {emp.typeLibrary.Feature} empFeature object representing a feature (not a ww feature).\n */\nEMPWorldWind.map.prototype.isMilStdMultiPointShapeInViewRegion = function(empFeature) {\n  var p,\n    inView = false;\n\n  // Highlight the items picked.\n  if (!this.bounds) {\n    this.bounds = this.getBounds();\n  }\n\n  for (p = 0; p < empFeature.coordinates.length; p++) {\n    var coordinate = empFeature.coordinates[p];\n    if ((coordinate[0] <= this.bounds.east && coordinate[0] >= this.bounds.west) && (coordinate[1] > this.bounds.south && coordinate[1] < this.bounds.north)) {\n      inView = true;\n      break;\n    }\n  }\n  return inView;\n};\n ","var EMPWorldWind = EMPWorldWind || {};\n/**\n * Namespace for EMPWorldWind feature classes\n * @namespace\n */\nEMPWorldWind.data = {};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.Overlay} overlay\n */\nEMPWorldWind.data.EmpLayer = function(overlay) {\n  /** @type {Object.<string, EMPWorldWind.Data.EmpLayer>} */\n  this.subLayers = {};\n\n  /** @type {Object.<string, EMPWorldWind.Data.EmpFeature>} */\n  this.featureKeys = {};\n\n  /** @member {string} */\n  this.name = overlay.name || undefined;\n\n  /** @member {string} */\n  this.description = overlay.description;\n\n  /** @member {string} */\n  this.id = overlay.overlayId;\n\n  /** @member {string} */\n  this.parentId = overlay.parentId;\n\n  /** @member {string} */\n  this.globalType = overlay.globalType || \"vector\"; // vector, wms\n\n  var _overlay = overlay;\n  /**\n   * @name EMPWorldWind.data.EmpLayer#overlay\n   * @type {emp.typeLibrary.Overlay}\n   */\n  Object.defineProperty(this, 'overlay', {\n    enumerable: true,\n    value: _overlay\n  });\n\n  // TODO handle WMS, WMTS, KML...\n  var _layer = new WorldWind.RenderableLayer(this.id);\n  /**\n   * @name EMPWorldWind.data.EmpLayer#layer\n   * @type {WorldWind.RenderableLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _layer\n  });\n\n  /** @member {boolean} */\n  this.enabled = true; // true by default\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature} feature\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    emp.util.each(feature.shapes, function(shape) {\n      this.layer.addRenderable(shape);\n    }.bind(this));\n\n    this.featureKeys[feature.id] = {\n      \"id\": feature.id,\n      \"type\": EMPWorldWind.constants.FeatureType.RENDERABLE,\n      \"feature\": feature\n    };\n\n    feature.overlayId = this.id;\n  } else {\n    // feature already present in map. First remove existing one and then add as new one. The updateFeature\n    // does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes.\n    this.updateFeature(feature);\n  }\n};\n\n/**\n * Expose a refresh for the actual WorldWind layer\n */\nEMPWorldWind.data.EmpLayer.prototype.refresh = function() {\n  this.layer.refresh();\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature[]} features\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatures = function(features) {\n  emp.util.each(features, function(feature) {\n    this.addFeature(feature);\n  }.bind(this));\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (!this.isFeaturePresent(childEntity)) {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        this.addFeature(childEntity);\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (this.isFeaturePresent(childEntity)) // must be present in layer\n      {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeatureChildPresent = function(parentEntity, childEntity) {\n  if (parentEntity && childEntity) {\n    if (parentEntity.childrenFeatureKeys) {\n      return (childEntity.id in parentEntity.childrenFeatureKeys);\n    } else {\n      return false;\n    }\n  }\n};\n\n/**\n *\n * @param subLayer\n */\nEMPWorldWind.data.EmpLayer.prototype.addSubLayer = function(subLayer) {\n  if (!this.isSubLayerPresent(subLayer.id)) {\n    subLayer.parentId = this.id;\n    this.subLayers[subLayer.id] = subLayer;\n  }\n};\n\n/**\n *\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isLayerEmpty = function() {\n  return (this.featuresLength() + this.subOverlaysLength() <= 0);\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeature = function(id) {\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    return empFeature.feature;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isPrimitive = function(id) {\n  var isPrimitive = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE || empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      isPrimitive = true;\n    }\n  }\n\n  return isPrimitive;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isDataSource = function(id) {\n  var isDataSource = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      isDataSource = true;\n    }\n  }\n\n  return isDataSource;\n};\n\n/**\n *\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatures = function() {\n  var features = [], id;\n  for (id in this.featureKeys) {\n    if (id && this.featureKeys.hasOwnProperty(id)) {\n      features.push(this.getFeature(id));\n    }\n  }\n\n  return features;\n};\n\n/**\n *\n * @param id\n * @returns {undefined}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayer = function(id) {\n  var subLayer = undefined;\n  if (this.isSubLayerPresent(id)) {\n    subLayer = this.subLayers[id];\n  }\n\n  return subLayer;\n};\n\n/**\n *\n * @param id\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayers = function(id) {\n  var layers = [];\n  for (id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      layers.push(this.getSubLayer(id));\n    }\n  }\n\n  return layers;\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatures = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      this.removeFeature(entity);\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureSelections = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      //TODO this.empWorldWind.removeFeatureSelection(id);\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeatures = function(visibility) {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      if (entity) {\n        this.showFeature(entity.id, visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n * @param id\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeature = function(id, visibility) {\n  var oMultiPoint,\n    childrenFeatureId,\n    childrenEntity,\n    feature = this.getFeature(id);\n  if (!feature) {\n    return;\n  }\n  if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n    feature.show = visibility;\n    if (feature.billboard !== undefined) {\n      if (feature.reRenderBillboardRequired && visibility) {\n        // when the overlay or parent if hidden the billboard is added to the entity collection with show = false but the loadImage is never called\n        // in the Cesium sdk. Here I'm removing and then re adding the entity when the show visibility is set to true for the for the first  time.\n        // This fixes the issue for kml and geojson points.\n        feature.reRenderBillboardRequired = undefined;\n        feature.show = visibility;\n        feature.billboard.show = visibility;\n        this.updateFeature(feature); // the update removes and then adds the feature to the entity or primitive collection. The children are not remove and re-added.\n      }\n      feature.billboard.show = visibility;\n    }\n    if (feature.path !== undefined) {\n      feature.path.show = visibility;\n    }\n    if (feature.polyline !== undefined) {\n      feature.polyline.show = visibility;\n    }\n    if (feature.polygon !== undefined) {\n      feature.polygon.show = visibility;\n    }\n    if (feature.label !== undefined) {\n      feature.label.show = visibility;\n    }\n    if (feature.rectangle !== undefined) {\n      feature.show = visibility;\n      if (this.empCesium.isMultiPointPresent(id)) {\n        oMultiPoint = this.empCesium.getMultiPoint(id);\n        if (oMultiPoint) {\n          oMultiPoint.visible = visibility;\n        }\n      }\n    }\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  }\n  else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n    feature.show = visibility;\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n    feature.show = visibility;\n    //primitive could represent a 3D multipoint that uses labels (entity.rectangle... with canvas)\n    var airspaceLabelPresent = this.empCesium.isMultiPointPresent(id + \"_label\");\n    if (airspaceLabelPresent) {\n      var airspaceLabel = this.getFeature(id + \"_label\");\n      if (airspaceLabel) {\n        airspaceLabel.show = visibility;    //new this.empCesium.ConstantProperty(visibility);\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n    if (feature.length > 0) {\n      feature.get(0).show = visibility;\n    }\n    if (this.empCesium.isAirspacePresent(id)) {\n      var oAirspace = this.empCesium.getAirspace(id);\n      if (oAirspace) {\n        oAirspace.visible = visibility;\n      }\n    } else if (this.empCesium.isSinglePointPresent(id)) {\n      var oSinglePoint = this.empCesium.getSinglePoint(id);\n      if (oSinglePoint) {\n        oSinglePoint.visible = visibility;\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayers = function() {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.removeFeatures();\n        subLayer.removeSubLayers();\n        delete this.subLayers[id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showSubLayers = function(visibility) {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.visibility = visibility;\n        subLayer.showFeatures(visibility);\n        subLayer.showSubLayers(visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.clearLayer = function() {\n  switch (this.globalType) {\n    case EMPWorldWind.constants.LayerType.ARCGIS_93_REST_LAYER:\n    case EMPWorldWind.constants.LayerType.BING_LAYER:\n    case EMPWorldWind.constants.LayerType.IMAGE_LAYER:\n    case EMPWorldWind.constants.LayerType.OSM_LAYER:\n    case EMPWorldWind.constants.LayerType.WMS_LAYER:\n    case EMPWorldWind.constants.LayerType.TMS_LAYER:\n    case EMPWorldWind.constants.LayerType.WMTS_LAYER:\n      this.enabled = false;\n      break;\n    default:\n    // do nothing\n  }\n  this.removeFeatureSelections();\n  this.removeFeatures();\n  this.removeSubLayers();\n};\n\n/**\n *\n * @param isVisible\n */\nEMPWorldWind.data.EmpLayer.prototype.showLayer = function(isVisible) {\n  this.showFeatures(isVisible);\n  this.showSubLayers(isVisible);\n};\n\n/**\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeature = function(feature) {\n  if (this.isFeaturePresent(feature)) {\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (var id in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    if (EMPWorldWind.utils.defined(feature.parentFeature)) {\n      this.deallocateFeatureChild(feature.parentFeature, feature);\n    }\n\n    emp.util.each(feature.shapes, function(shape){\n      if (shape instanceof WorldWind.RenderableLayer) {\n        // Handle KML features\n        this.worldwind.removeLayer(shape);\n      } else {\n        // Handle normal primitives\n        this.layer.removeRenderable(shape);\n      }\n    }.bind(this));\n\n    delete this.featureKeys[feature.id];\n  }\n};\n\n/**\n * feature already present in map. First remove existing one and then add as new one. The updateFeature\n * does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes. The addFeature from the emp engine api\n * takes care of the case of an update. The updateFeature is used for internal removal and then re-adding the feature to map with same id. The\n * presence of the feature in the layers , and any child entities ( ojo - would a replace erase any children feature association to updated feature?) under the updated feature is mantained (v2)..\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.updateFeature = function(feature) {\n  var renderable;\n  //feature already present in map. First remove existing one and then add as new one\n  if (feature.id && feature.id !== null) {\n    renderable = this.getFeature(feature.id); // entity is the current geometry rendered on map\n    // keep children association to parent when updating\n    feature.childrenFeatureKeys = renderable.childrenFeatureKeys;\n    feature.parentFeature = renderable.parentFeature;\n    this.layer.removeRenderable(renderable);\n    this.layer.addRenderable(feature);\n    this.featureKeys[feature.id].feature = feature;\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n * remove feature recursively from layer but keep feature in the Cesium entityCollection\n * this function is used for the moving of features.\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.deallocateFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    entity.overlayId = undefined;\n    delete this.featureKeys[entity.id];\n  }\n};\n\n/**\n * Add feature recursively to layer. the feature must  already be part of the Cesium entityCollection\n * this function is used for the moving of features.\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.DATA_SOURCE\n      };\n    }\n    var featureChildrenLength = this.featureChildrenLength(feature);\n    if (featureChildrenLength > 0) {\n      var childrenFeatures = this.getFeatureChildrenEntityArray(feature);\n      for (var index = 0; index < featureChildrenLength; index++) {\n        var childrenFeature = childrenFeatures[index];\n        this.allocateFeature(childrenFeature);\n      }\n    }\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n *\n * @param entity\n */\nEMPWorldWind.data.EmpLayer.prototype.clearFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n      entity.childrenFeatureKeys = undefined;\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        //this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n        childEntity.parentFeature = undefined;\n        childEntity.overlayId = undefined;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatureChildrenEntityArray = function(entity) {\n  var featureChildrenEntityArray = [];\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            featureChildrenEntityArray.push(childrenEntity);\n          }\n        }\n      }\n    }\n  }\n\n  return featureChildrenEntityArray;\n\n};\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureById = function(id) {\n  var feature;\n  if (this.isFeaturePresentById(id)) {\n    feature = this.getFeature(id);\n    this.removeFeature(feature);\n  }\n};\n\n/**\n *\n * @param subOverlay\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayer = function(subOverlay) {\n  if (this.isSubLayerPresent(subOverlay.id)) {\n    this.subLayer.removeFeatures();\n    this.subLayer.removeSubLayers();\n    delete this.SubLayers[this.subLayer.id];\n  }\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayerById = function(id) {\n  if (this.isSubLayerPresent(id)) {\n    var subLayer = this.getLayer(id);\n    this.removeSubLayer(subLayer);\n  }\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.featuresLength = function() {\n  return Object.keys(this.featureKeys).length;\n};\n\n/**\n *\n * @param entity\n * @returns {number}\n */\nEMPWorldWind.data.EmpLayer.prototype.featureChildrenLength = function(entity) {\n  var length = 0;\n  if (entity.childrenFeatureKeys) {\n    length = Object.keys(entity.childrenFeatureKeys).length;\n  }\n\n  return length;\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.subLayersLength = function() {\n  return Object.keys(this.subLayers).length;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresentById = function(id) {\n  if (id)\n    return (id in this.featureKeys);\n};\n\n/**\n *\n * @param entity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresent = function(entity) {\n  if (entity && entity.id) {\n    return (entity.id in this.featureKeys);\n  } else {\n    return false;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isSubLayerPresent = function(id) {\n  if (id) {\n    return (id in this.subLayers);\n  }\n\n  return false;\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.data.EmpWMSLayer = function(wms) {\n  var layerNames, config, url;\n\n  this.id = wms.coreId;\n\n  var _wms = wms;\n\n  /**\n   * @name EMPWorldWind.data.EmpWMSLayer#wms\n   * @type {emp.typeLibrary.WMS}\n   */\n  Object.defineProperty(this, 'wms', {\n    enumerable: true,\n    value: _wms\n  });\n\n  layerNames = wms.activeLayers.join();\n\n  // Set the URL to the service\n  if (wms.useProxy) {\n    url = emp3.api.global.configuration.urlProxy + \"?url=\" + wms.url;\n  } else {\n    url = wms.url;\n  }\n\n  config = {\n    service: url,\n    layerNames: layerNames,\n    sector: WorldWind.Sector.FULL_SPHERE,\n    levelZeroDelta: new WorldWind.Location(36, 36),\n    numLevels: 15,\n    format: \"image/png\",\n    size: 256\n  };\n\n  // Purposely null for now\n  var timeString = '';\n  var _wmsLayer = new WorldWind.WmsLayer(config, timeString);\n  /**\n   * @name EMPWorldWind.data.EmpWMS#layer\n   * @type {WorldWind.WmsLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _wmsLayer\n  });\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc Container class for establishing mappings between empFeatures and the WorldWind representations.\n * A Feature may consist of any number of WorldWind Surface shapes. Any direct interaction with the WorldWind features\n * will occur in this class.\n *\n * @class\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.data.EmpFeature = function(feature) {\n  /**\n   * The storage of all the shapes composing the primary shape\n   * @type {WorldWind.SurfaceShape[]}\n   */\n  this.shapes = [];\n\n  /**\n   * The native EMP Feature\n   * @type {emp.typeLibrary.Feature}\n   */\n  this.feature = feature;\n\n  var _id = feature.coreId;\n  /**\n   * @readonly\n   * @name EMPWorldWind.data.EmpFeature#id\n   */\n  Object.defineProperty(this, 'id', {\n    enumerable: true,\n    value: _id\n  });\n\n  var _altitudeMode = WorldWind.CLAMP_TO_GROUND;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#altitudeMode\n   */\n  Object.defineProperty(this, 'altitudeMode', {\n    enumerable: true,\n    get: function() { return _altitudeMode; },\n    set: function(altMode) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].altitudeMode = altMode;\n      }\n      _altitudeMode = altMode;\n    }\n  });\n\n  var _selected = false;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#selected\n   */\n  Object.defineProperty(this, 'selected', {\n    enumerable: true,\n    get: function() { return _selected; },\n    set: function(value) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].highlighted = value;\n      }\n      _selected = value;\n    }\n  });\n};\n\n/**\n * Convenience function\n * @returns {Number}\n */\nEMPWorldWind.data.EmpFeature.prototype.shapesCount = function() {\n  return this.shapes.length;\n};\n\n/**\n *\n * @param {WorldWind.SurfaceShape|WorldWind.SurfaceShape[]|*} primitives\n */\nEMPWorldWind.data.EmpFeature.prototype.addShapes = function(primitives) {\n  if (!Array.isArray(primitives)) {\n    if (primitives instanceof WorldWind.RenderableLayer) { // TODO this doesn't smell right, may need to handle KML differently\n      primitives.renderables[0].userProperties.id = this.id;\n    } else {\n      primitives.userProperties.id = this.id;\n    }\n    this.shapes.push(primitives);\n\n  } else {\n    emp.util.each(primitives, function(primitive) {\n      primitive.userProperties.id = this.id;\n      this.shapes.push(primitive);\n    }.bind(this));\n  }\n};\n\n/**\n * Clears all primitives from the feature. It does not remove them from any layers they are rendered on so that must be\n * done first.\n */\nEMPWorldWind.data.EmpFeature.prototype.clearShapes = function() {\n  this.shapes = [];\n};\n\n/**\n *\n * @param {boolean} visible\n */\nEMPWorldWind.data.EmpFeature.prototype.setVisible = function(visible) {\n  emp.util.each(this.shapes, function(shape) {\n    shape.enabled = visible;\n  });\n};","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants = {\n  view: {\n    MAX_HEIGHT: 10000000\n  }\n};\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasMoving = false;\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasZooming = false;\n\n/** @type {number} */\nEMPWorldWind.constants.globeMoveTime = 2000;\n\n/** @type {number} */\nEMPWorldWind.constants.extentBufferFactor = .4; // use when flyto a feature so the camera is not too close to it.\n\n/** @type {boolean} */\nEMPWorldWind.constants.USE_DATA_SOURCE = false;\n\n/** @constant {number} */\nEMPWorldWind.constants.WHITE_CONTRAST = 0;\n\n/** @constant {number} */\nEMPWorldWind.constants.BLACK_CONTRAST = 1;\n\n/**\n * No panning state for autoPanning in smart motion\n * @constant {object}\n */\nEMPWorldWind.constants.NO_PANNING = {\n  step: 0,\n  up: false,\n  down: false,\n  right: false,\n  left: false\n};\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.METERS_PER_INCH = 0.0254;\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.SCALE_LINE_LENGTH = 50;\n\n/**\n * @readonly\n */\nEMPWorldWind.constants.propertyDefaults = {\n  FILL_COLOR_HEX: \"ffffff\",\n  LINE_COLOR_HEX: \"000000\",\n  LINE_WIDTH: 3\n};\n\n/**\n * @readonly\n * @type {{COLOR_HEX: string, WIDTH: number, SCALE: number}}\n */\nEMPWorldWind.constants.selectionProperties = {\n  COLOR_HEX: 'FFFF00',\n  WIDTH: 2,\n  SCALE: 0.5\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.FeatureType = {\n  ENTITY: \"entity\",\n  RENDERABLE: \"renderable\",\n  PRIMITIVE: \"primitive\",\n  GROUND_PRIMITIVE: \"ground_primitive\",\n  DATA_SOURCE: \"dataSource\",\n  COMPOUND_ENTITY: \"compoundEntity\",\n  PRIMITIVE_COLLECTION: \"primitiveCollection\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LayerType = {\n  OVERLAY_LAYER: \"overlay\",\n  WMS_LAYER: \"wms\",\n  IMAGE_LAYER: \"image\",\n  BING_LAYER: \"bing\",\n  ARCGIS_93_REST_LAYER: \"arcgis93rest\",\n  OSM_LAYER: \"osm\",\n  TMS_LAYER: \"tms\",\n  TERRAIN_LAYER: \"terrain\",\n  WMTS_LAYER: \"wmts\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.EntityType = {\n  BILLBOARD: \"billboard\",\n  BOX: \"box\",\n  CORRIDOR: \"corridor\",\n  CYLINDER: \"cylinder\",\n  DESCRIPTION: \"description\",\n  ELLIPSE: \"ellipse\",\n  ELLIPSOID: \"ellipsoid\",\n  LABEL: \"label\",\n  MODEL: \"model\",\n  ORIENTATION: \"orientation\",\n  PATH: \"path\",\n  POLYGON: \"polygon\",\n  POLYLINE: \"polyline\",\n  POLYLINE_VOLUME: \"polylineVolume\",\n  POSITION: \"position\",\n  RECTANGLE: \"rectangle\",\n  VIEW_FROM: \"viewFrom\",\n  WALL: \"wall\",\n  KML: \"kml\"\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.MultiPointRenderType = {\n  KML: 0,\n  /** @deprecated */\n  JSON: 1,\n  GEOJSON: 2,\n  DATA_URL: 4,\n  CANVAS: 3,\n  CANVAS_LABEL_ONLY: 5,\n  SVG: 6,\n  SVG_LABEL_ONLY: 7\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.SinglePointAltitudeRangeMode = {\n  LOW_RANGE: 0,\n  MID_RANGE: 1,\n  HIGHEST_RANGE: 2\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererWorker = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LabelStyle = {\n  REQUIRED_LABELS: 'required_labels',\n  COMMON_LABELS: 'common_labels',\n  ALL_LABELS: 'all_labels'\n};\n\n/**\n * Modifiers for All labels to be displayed\n * @enum {object}\n * @constant\n */\nEMPWorldWind.constants.AllLabels = {\n  \"V\": true,\n  \"L\": true,\n  \"S\": true,\n  \"AA\": true,\n  \"AB\": true,\n  \"AC\": true, \n  \"H\": true,\n  \"M\": true,\n  \"T\": true,\n  \"T1\": true,\n  \"CN\": true,\n  \"C\": true,\n  \"F\": true,\n  \"G\": true,\n  \"H1\": true,\n  \"H2\": true,\n  \"J\": true,\n  \"K\": true,\n  \"N\": true,\n  \"P\": true,\n  \"W\": true,\n  \"W1\": true,\n  \"X\": true,\n  \"Y\": true,\n  \"Z\": true\n};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants.RendererSettings = {};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.standard = {\n  'Symbology_2525Bch2_USAS_13_14': 0,\n  'Symbology_2525C': 1\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.modifierLookup = {\n  QUANTITY: \"quantity\",\n  REDUCED_OR_REINFORCED: \"reinforcedOrReduced\",\n  STAFF_COMMENTS: \"staffComments\",\n  ADDITIONAL_INFO_1: \"additionalInfo1\",\n  ADDITIONAL_INFO_2: \"additionalInfo2\",\n  ADDITIONAL_INFO_3: \"additionalInfo3\",\n  EVALUATION_RATING: \"evaluationRating\",\n  COMBAT_EFFECTIVENESS: \"combatEffectiveness\",\n  SIGNATURE_EQUIPMENT: \"signatureEquipment\",\n  HIGHER_FORMATION: \"higherFormation\",\n  HOSTILE: \"hostile\",\n  IFF_SIF: \"iffSiff\",\n  DIRECTION_OF_MOVEMENT: \"directionOfMovement\",\n  OFFSET_INDICATOR: \"offsetIndicator\",\n  UNIQUE_DESIGNATOR_1: \"uniqueDesignation1\",\n  UNIQUE_DESIGNATOR_2: \"uniqueDesignation2\",\n  EQUIPMENT_TYPE: \"equipmentType\",\n  DATE_TIME_GROUP: \"dateTimeGroup1\",\n  DATE_TIME_GROUP_2: \"dateTimeGroup2\",\n  ALTITUDE_DEPTH: \"altitudeDepth\",\n  LOCATION: \"location\",\n  SPEED: \"speed\",\n  SPECIAL_C2_HEADQUARTERS: \"specialC2Headquarters\",\n  DISTANCE: \"distance\",\n  AZIMUTH: \"azimuth\",\n  FILL_COLOR: \"fillColor\",\n  LINE_COLOR: \"lineColor\",\n  TEXT_COLOR: \"textColor\",\n  X_OFFSET: \"xOffset\",\n  X_UNITS: \"xUnits\",\n  Y_OFFSET: \"yOffset\",\n  Y_UNITS: \"yUnits\",\n  NAME: \"name\",\n  STANDARD: \"standard\"\n};\n\nEMPWorldWind.constants.highAltitudeRangeImage = {};\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\"  r=\"3\" fill=\"red\" stroke=\"red\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle cx=\"12\" cy=\"12\"  r=\"3\" fill=\"blue\" stroke=\"blue\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"green\" stroke=\"green\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"yellow\" stroke=\"yellow\" stroke-width=\"1\"  /></g></svg>');\n//EMPWorldWind.constants.highAltitudeRangeImage.blankMultipoint = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"2px\" height=\"2px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"black\" stroke=\"black\" stroke-width=\"1\"  /></g></svg>');\n\n\n","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.utils = {};\n\n/**\n * @typedef {object} RGBAColor\n * @property {number} red\n * @property {number} green\n * @property {number} blue\n * @property {number} alpha 0-1\n */\n\n/**\n *\n * @param {MouseEvent} event\n * @returns {{lat: undefined, lon: undefined, clientX: *, clientY: *, screenX: *, screenY: *}}\n */\nEMPWorldWind.utils.getEventCoordinates = function (event)\n{\n    var pickPoint = this.worldWindow.canvasCoordinates(event.clientX, event.clientY);\n    var terrainObject = this.worldWindow.pickTerrain(pickPoint).terrainObject();\n\n    return {\n        lat: terrainObject ? terrainObject.position.latitude : undefined,\n        lon: terrainObject ? terrainObject.position.longitude : undefined,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        screenX: event.screenX,\n        screenY: event.screenY\n    };\n};\n\n/**\n *\n * @param value\n * @returns {boolean}\n */\nEMPWorldWind.utils.defined = function (value)\n{\n    return value !== undefined && value !== null;\n};\n\n\n/**\n * @namespace\n */\nEMPWorldWind.utils.milstd = {};\n\n/**\n *\n * @param properties\n * @param name\n * @param iconLabels\n * @param iconPixelSize\n * @returns {{}}\n */\nEMPWorldWind.utils.milstd.updateModifierLabels = function (properties, name, iconLabels, iconPixelSize)\n{\n    var mod,\n            modifiedModifiers = {},\n            property,\n            size;\n\n    // loop through all the properties, add a parameter for each property\n    for (property in properties)\n    {\n        if (properties.hasOwnProperty(property))\n        {\n            switch (property)\n            {\n                case \"labelColor\":\n                    // Convert labelColor to textColor\n                    modifiedModifiers[\"textColor\"] = properties[property];\n                    break;\n                case \"fillColor\":\n                    modifiedModifiers[\"fillColor\"] = properties[property];\n                    break;\n                case \"lineColor\":\n                    modifiedModifiers[\"lineColor\"] = properties[property];\n                    break;\n                case \"modifiers\":\n                    // modifiers contains an object that has other properties in it.\n                    // loop through each of the properties and add parameters to those\n                    // that are relevant.\n                    for (mod in properties[property])\n                    {\n                        if (properties[property].hasOwnProperty(mod))\n                        {\n                            switch (mod)\n                            {\n                                case \"quantity\":\n                                    if (iconLabels.C && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"quantity\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"reinforcedOrReduced\":\n                                    if (iconLabels.F && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"reinforcedOrReduced\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"staffComments\":\n                                    if (iconLabels.G && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"staffComments\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"additionalInfo1\":\n                                    if (iconLabels.H && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"additionalInfo1\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"additionalInfo2\":\n                                    if (iconLabels.H1 && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"additionalInfo2\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"additionalInfo3\":\n                                    if (iconLabels.H2 && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"additionalInfo3\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"evaluationRating\":\n                                    if (iconLabels.J && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"evaluationRating\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"combatEffectiveness\":\n                                    if (iconLabels.K && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"combatEffectiveness\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"signatureEquipment\":\n                                    if (properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"signatureEquipment\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"higherFormation\":\n                                    if (iconLabels.M && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"higherFormation\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"hostile\":\n                                    if (iconLabels.N && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"hostile\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"iffSif\":\n                                    if (iconLabels.P && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"iffSif\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"offsetIndicator\":\n                                    if (properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"offsetIndicator\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"uniqueDesignation1\":\n                                    if (iconLabels.T && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"uniqueDesignation1\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"uniqueDesignation2\":\n                                    if (iconLabels.T1 && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"uniqueDesignation2\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"equipmentType\":\n                                    if (properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"equipmentType\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"dateTimeGroup1\":\n                                    if (iconLabels.W && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"dateTimeGroup1\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"dateTimeGroup2\":\n                                    if (iconLabels.W1 && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"dateTimeGroup2\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"altitudeDepth\":\n                                    if (iconLabels.X)\n                                    {\n                                        modifiedModifiers[\"altitudeDepth\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"location\":\n                                    if (iconLabels.Y && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"location\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"speed\":\n                                    if (iconLabels.Z && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"speed\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"specialC2Headquarters\":\n                                    if (iconLabels.AA && properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[\"specialC2Headquarters\"] = properties[property][mod];\n                                    }\n                                    break;\n                                case \"distance\":\n                                    modifiedModifiers[\"distance\"] = properties[property][mod];\n                                    break;\n                                case \"azimuth\":\n                                    modifiedModifiers[\"azimuth\"] = properties[property][mod];\n                                    break;\n                                case \"standard\":\n                                    modifiedModifiers[\"standard\"] = properties[property][mod];\n                                    break;\n                                case \"size\":\n                                    size = properties[property][mod];\n                                    if (!size)\n                                    {\n                                        size = iconPixelSize;\n                                    }\n                                    modifiedModifiers[\"size\"] = size;\n                                    break;\n                                default:\n                                    if (properties[property][mod] && (properties[property][mod] !== \"\"))\n                                    {\n                                        modifiedModifiers[mod] = properties[property][mod];\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n\n    if (iconLabels.CN)\n    {\n        modifiedModifiers[\"name\"] = name;\n    }\n    return modifiedModifiers;\n};\n\n\n/**\n *\n * @param modifiers\n * @param showModLabels\n * @returns {object}\n */\nEMPWorldWind.utils.milstd.convertModifierStringTo2525 = function (modifiers, showModLabels)\n{\n    var standardModifiers = {};\n\n    if (modifiers !== undefined && modifiers !== null)\n    {\n        for (var sModifier in modifiers)\n        {\n            if (modifiers.hasOwnProperty(sModifier))\n            {\n                var modValue = modifiers[sModifier];\n                if (modValue !== null && modValue !== \"null\" && modValue !== 0)\n                {\n                    switch (sModifier)\n                    {\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.QUANTITY:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"C\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.REDUCED_OR_REINFORCED:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"F\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.STAFF_COMMENTS:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"G\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_1:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"H\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_2:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"H1\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_3:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"H2\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.EVALUATION_RATING:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"J\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.COMBAT_EFFECTIVENESS:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"K\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.SIGNATURE_EQUIPMENT:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"L\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.HIGHER_FORMATION:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"M\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.HOSTILE:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"N\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.IFF_SIF:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"P\"] = modValue;\n                            }\n                            break;\n                            // Direction of movement cannot work on 3D because the view can rotate\n                            // case EMPWorldWind.constants.RendererSettings.modifierLookup.DIRECTION_OF_MOVEMENT:\n                            //    modifiersArray.push(\"Q=\" + modValue);\n                            //    break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.OFFSET_INDICATOR:\n                            standardModifiers[\"S\"] = modValue;\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_1:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"T\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_2:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"T1\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.EQUIPMENT_TYPE:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"V\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"W\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP_2:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"W1\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.ALTITUDE_DEPTH:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"X\"] = JSON.parse(JSON.stringify(modValue));\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.LOCATION:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"Y\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.SPEED:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"Z\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.SPECIAL_C2_HEADQUARTERS:\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"AA\"] = modValue;\n                            }\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.DISTANCE:\n                            standardModifiers[\"AM\"] = JSON.parse(JSON.stringify(modValue));\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.AZIMUTH:\n                            standardModifiers[\"AN\"] = JSON.parse(JSON.stringify(modValue));\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.FILL_COLOR:\n                            standardModifiers[\"FILLCOLOR\"] = modValue;\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.LINE_COLOR:\n                            standardModifiers[\"LINECOLOR\"] = modValue;\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.TEXT_COLOR:\n                            standardModifiers[\"TEXTCOLOR\"] = modValue;\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.STANDARD:\n                            // convert standard string value  to modifier numeric\n                            standardModifiers[emp.typeLibrary.utils.milstd.Modifiers.STANDARD] = EMPWorldWind.utils.convertSymbolStandardToRendererFormat(modifiers);\n                            break;\n                        case EMPWorldWind.constants.RendererSettings.modifierLookup.NAME:\n                        case \"CN\":\n                            if (showModLabels)\n                            {\n                                standardModifiers[\"CN\"] = modValue;\n                            }\n                            break;\n                        default:\n                            standardModifiers[sModifier] = modValue;\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    return standardModifiers;\n};\n\n/**\n * Borrowed from the Cesium Implementation\n *\n * @param item\n * @returns {object}\n */\nEMPWorldWind.utils.milstd.checkForRequiredModifiers = function (item)\n{\n    var result = {},\n            symbolCode,\n            properties = {},\n            modifiers = {},\n            oAM = [],\n            oAN = [],\n            basicSymbolCode,\n            standard,\n            symbolDef,\n            i,\n            lonDistance,\n            overrides = {};\n\n    // Check to see if the properties and modifiers have not yet been set.\n    // If they don't exist, this will default them to empty objects.\n    if (item.data && item.data.symbolCode)\n    {\n        symbolCode = item.data.symbolCode;\n    }\n    else if (item.symbolCode)\n    {\n        symbolCode = item.symbolCode;\n    }\n\n    if (item.properties)\n    {\n        properties = item.properties;\n        if (properties.modifiers)\n        {\n            modifiers = properties.modifiers;\n        }\n        else\n        {\n            properties.modifiers = {};\n            modifiers = properties.modifiers;\n        }\n    }\n    else\n    {\n        item.properties = {\n            modifiers: {}\n        };\n\n        modifiers = item.properties.modifiers;\n    }\n\n    // Get the basic symbol code.  We need the basic code because we need to look it up with\n    // getSymbolDef.  This requires the basic code.\n    basicSymbolCode = armyc2.c2sd.renderer.utilities.SymbolUtilities.getBasicSymbolID(symbolCode);\n    // Get the standard we are using.  We need to convert it to what the function getSymbolDef uses.\n    standard = EMPWorldWind.utils.milstd.checkSymbolStandard(item.properties.modifiers);\n    // Retrieve the symbol definition object.  This contains information about the required\n    // symbol modifiers.  We will use this to determine which modifiers are not sufficiently\n    // populated.\n    symbolDef = armyc2.c2sd.renderer.utilities.SymbolDefTable.getSymbolDef(basicSymbolCode, standard);\n    if ((symbolDef === undefined) || (symbolDef === null))\n    {\n        return result;\n    }\n    // The only modifiers that are sometimes required in MIL-STD-2525B and C are\n    // distance and azimuth.\n    //\n    // First check if distance and azimuth has already been set.  If they are, we\n    // still may not have enough entries for them (as both are arrays), so we still need to\n    // verify that they are good.\n\n    // If distance already exists retrieve the values in it.\n    if (modifiers.hasOwnProperty(\"distance\"))\n    {\n        // Lets make sure that if it is there that it is an array.\n        if (modifiers.distance instanceof Array)\n        {\n            oAM = modifiers.distance;\n        }\n    }\n    // If azimuth already exists retrieve the values of it.\n    if (modifiers.hasOwnProperty(\"azimuth\"))\n    {\n        // Lets make sure that if it is there that it is an array.\n        if (modifiers.azimuth instanceof Array)\n        {\n            oAN = modifiers.azimuth;\n        }\n    }\n    // Based on the symbol draw category, we can determine if the symbol has\n    // has the required parameters or not.  For each draw category, we do a different\n    // check.\n    switch (symbolDef.drawCategory)\n    {\n        // These are circle graphics represented by a single point and a radius.\n        case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE: //16\n            if (oAM !== null && oAM.length > 0)\n            {\n                oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n            }\n            else\n            {\n                oAM[0] = 5000;\n            }\n\n            overrides = {\n                distance: oAM\n            };\n            break;\n            // These are 1-point rectangles with an azimuth that determine the angle, and a distance that determines width\n        case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE: //17\n            if ((oAM !== null) && (oAM.length >= 2) &&\n                    (typeof (oAM[0]) === \"number\") &&\n                    (typeof (oAM[1]) === \"number\"))\n            {\n                oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n            }\n            else\n            {\n                // Check to see if the [0] value is present and its a number.\n                // If not set a value.\n                if ((oAM[0] === undefined) || (typeof (oAM[0]) !== \"number\"))\n                {\n                    oAM[0] = 10000;\n                }\n                // Check to see if the [1] value is present and its a number.\n                // If not set a value.\n                if ((oAM[1] === undefined) || (typeof (oAM[1]) !== \"number\"))\n                {\n                    oAM[1] = 5000;\n                }\n                oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n            }\n\n            if ((oAN !== null) && (oAN.length >= 1) &&\n                    (typeof (oAN[1]) === \"number\"))\n            {\n                oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n            }\n            else\n            {\n                // Check to see if the [0] value is present and its a number.\n                // If not set a value.\n                if ((oAN[0] === undefined) || (typeof (oAN[0]) !== \"number\"))\n                {\n                    oAN[0] = 0;\n                }\n                oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n            }\n            overrides = {\n                distance: oAM,\n                azimuth: oAN\n            };\n            break;\n            // This is a sector range fan, requires a point, a min and max distance for each sector, and left\n            // and right azimuths for each sector.\n        case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE: //18\n            if ((oAM !== null) && (oAM.length >= 2))\n            {\n                for (i = 0; i < oAM.length; )\n                {\n                    if (typeof (oAM[i]) !== \"number\")\n                    {\n                        oAM.splice(i, 1);\n                    }\n                    else\n                    {\n                        i++;\n                    }\n                }\n            }\n            if (oAM.length > 1)\n            {\n                // Check to see if the each value is present.\n                for (i = 0; i < oAM.length; i++)\n                {\n                    if (oAM[i] === undefined)\n                    {\n                        oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n                    }\n                }\n            }\n            else\n            {\n                if (oAM[0] === undefined)\n                {\n                    oAM[0] = 2000;\n                }\n            }\n            // You need at least 2 azimuth values for this to be a drawable graphic\n            // If it doesn't have it, create it.\n            if (oAN.length === 0)\n            {\n                oAN.push(315);\n                oAN.push(45);\n            }\n            else if (oAN.length === 1)\n            {\n                var newVal = oAN[0] + 90;\n                if (newVal > 360)\n                {\n                    newVal = newVal - 360;\n                }\n                oAN.push(newVal);\n            }\n            overrides = {\n                distance: oAM,\n                azimuth: oAN\n            };\n            break;\n            // A circular range fan that is a point and multiple distances for each ring.\n        case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE: //19\n            if ((oAM !== null) && (oAM.length > 0))\n            {\n                for (i = 0; i < oAM.length; )\n                {\n                    if (typeof (oAM[i]) !== \"number\")\n                    {\n                        oAM.splice(i, 1);\n                    }\n                    else\n                    {\n                        i++;\n                    }\n                }\n            }\n            if (oAM.length < 2)\n            {\n                // Check to see if the each value is present.\n                for (i = 0; i < 2; i++)\n                {\n                    if (oAM[i] === undefined)\n                    {\n                        oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n                    }\n                }\n            }\n            overrides = {\n                distance: oAM\n            };\n            break;\n            // These are 2-point rectangles that determine the angle, and a distance that requires width\n        case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE: //20\n            if (oAM !== null && oAM.length > 0)\n            {\n                if (typeof (oAM[0]) !== \"number\")\n                {\n                    oAM[0] = 5000;\n                }\n                oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n            }\n            else\n            {\n                oAM[0] = 5000;\n            }\n            overrides = {\n                distance: oAM\n            };\n            break;\n            // Any air corridor.\n        case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_LINE:\n            // This really only applies to air corridors.  As far as\n            // I know the only line that requires distance is air corridors.\n\n            // If we do not have the distance field set, or it is set\n            // and the array length is 0, then we want to set it to a default\n            // width.  We want to make the width in relation to the current\n            // scale of the map, otherwise the air corridor won't look like\n            // an air corridor; it will look like a line.\n\n            if ((oAM === null || oAM.length === 0) || (oAM.length > 0 && (isNaN(oAM[0]) || oAM[0] === null)))\n            {\n                if (item.data && item.data.coordinates && item.data.coordinates.length > 1)\n                {\n                    var coord0 = item.data.coordinates[0];\n                    var coord1 = item.data.coordinates[1];\n\n                    // var pointCartographic0 = Cesium.Cartographic.fromDegrees(coord0[0], coord0[1], 0);\n                    // var pointCartographic1 = Cesium.Cartographic.fromDegrees(coord1[0], coord1[1], 0);\n                    // var dist = pointCartographic0.distanceTo(pointCartographic1);\n                    // lonDistance = dist / 4;\n\n                    var pointCartographic0 = new WorldWind.Location(coord0[0], coord0[1]);\n                    var pointCartographic1 = new WorldWind.Location(coord1[0], coord1[1]);\n\n                    var dist = WorldWind.Location.greatCircleDistance(pointCartographic0, pointCartographic1);\n\n                    lonDistance = dist / 4;\n                }\n                else\n                {\n                    lonDistance = lonDistance / 34;\n                }\n\n                oAM[0] = lonDistance;\n                overrides = {\n                    distance: oAM\n                };\n            }\n            else\n            {\n                overrides = {\n                    distance: oAM\n                };\n            }\n\n            break;\n    }\n\n    return overrides;\n};\n\n/**\n *\n * @param modifiers\n * @returns {number}\n */\nEMPWorldWind.utils.milstd.checkSymbolStandard = function (modifiers)\n{\n    var standard = 1,\n            modifiersCopy,\n            modValue;\n\n    try\n    {\n        if (modifiers !== undefined && modifiers !== null && modifiers !== \"\")\n        {\n            modifiersCopy = typeof (modifiers) === \"string\" ? JSON.parse(modifiers) : emp.helpers.copyObject(modifiers);\n\n            if (modifiersCopy.hasOwnProperty(\"modifiers\"))\n            {\n                modifiersCopy = modifiersCopy.modifiers;\n            }\n\n            if (modifiersCopy.hasOwnProperty(\"renderer\"))\n            {\n                modValue = modifiersCopy.renderer;\n                if (modValue !== undefined && modValue !== null && modValue !== 0)\n                {\n                    if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase())\n                    {\n                        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n                    }\n                    else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase())\n                    {\n                        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n                    }\n                    else\n                    {\n                        standard = modValue;\n                    }\n                }\n            }\n            else if (modifiersCopy.hasOwnProperty(\"standard\"))\n            {\n                modValue = modifiersCopy.standard;\n                if (modValue !== undefined && modValue !== null && modValue !== 0)\n                {\n                    if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase())\n                    {\n                        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n                    }\n                    else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) > -1)\n                    {\n                        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n                    }\n                    else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase())\n                    {\n                        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n                    }\n                    else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) > -1)\n                    {\n                        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n                    }\n                    else\n                    {\n                        standard = modValue;\n                    }\n                }\n            }\n        }\n    }\n    catch (err)\n    {\n        window.console.log(\"Error getting symbol standard\");\n    }\n\n    return standard;\n};\n\n\n/**\n *\n * @param modifiers\n */\nEMPWorldWind.utils.convertSymbolStandardToRendererFormat = function (modifiers)\n{\n    var standard,\n            modValue;\n\n    modValue = modifiers.standard;\n    if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase())\n    {\n        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n    }\n    else\n    {\n        standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n    }\n\n    return standard;\n};\n\n/**\n * Parses a 6 character color string, assumes full opacity\n * @param hex #RRGGBB\n * @returns {RGBAColor}\n * @private\n */\nfunction _hex6ToRGBA(hex)\n{\n    hex = hex.replace('#', '');\n    var r, g, b;\n\n    r = parseInt(hex.substring(0, 2), 16);\n    g = parseInt(hex.substring(2, 4), 16);\n    b = parseInt(hex.substring(4, 6), 16);\n\n    return {\n        red: r,\n        green: g,\n        blue: b,\n        alpha: 1\n    };\n}\n\n/**\n * Parses an 8 character color string\n * @param hex AARRGGBB format\n * @returns {RGBAColor}\n * @private\n */\nfunction _hex8ToRGBA(hex)\n{\n    var r, g, b, a;\n\n    a = parseInt(hex.substring(0, 2), 16) / 256.0;\n    r = parseInt(hex.substring(2, 4), 16);\n    g = parseInt(hex.substring(4, 6), 16);\n    b = parseInt(hex.substring(6, 8), 16);\n\n    return {\n        red: r,\n        green: g,\n        blue: b,\n        alpha: a\n    };\n}\n\n/**\n * @example\n * hexToRGBA(\"#00FF83\")\n *\n * @param {string} hex\n * @param {float} [alpha=1] 0-1 expected range\n * @param {boolean} [normalize=true] True produce float values between 0 and 1, otherwise integers between 0 and 255\n * @returns {RGBAColor}\n */\nEMPWorldWind.utils.hexToRGBA = function (hex, alpha, normalize)\n{\n    var newHex;\n\n    if (!hex)\n    {\n        return {\n            red: 0,\n            green: 0,\n            blue: 0,\n            alpha: 1\n        };\n    }\n    normalize = EMPWorldWind.utils.defined(normalize) ? normalize : true;\n    alpha = EMPWorldWind.utils.defined(alpha) ? alpha : 1;\n\n    if (hex.length === 8)\n    {\n        newHex = _hex8ToRGBA(hex);\n    }\n    else\n    {\n        newHex = _hex6ToRGBA(hex);\n        newHex.alpha = alpha;\n    }\n\n    if (normalize)\n    {\n        newHex.red = newHex.red / 256.0;\n        newHex.green = newHex.green / 256.0;\n        newHex.blue = newHex.blue / 256.0;\n    }\n\n    return newHex;\n};\n\n/**\n * Will normalize an {@link RGBAColor} object, will return the same object if already normalized\n * (contains a decimal in the value)\n *\n * WorldWind.Color requires 0-1 values for color\n *\n * @param {RGBAColor} color\n * @returns {RGBAColor}\n */\nEMPWorldWind.utils.normalizeRGBAColor = function (color)\n{\n    var normalize,\n            normalColor = Object.assign({}, color);\n\n    normalize = color.red.toString().indexOf('.') === -1 ||\n            color.green.toString().indexOf('.') === -1 ||\n            color.blue.toString().indexOf('.') === -1;\n\n    if (normalize)\n    {\n        normalColor.red = color.red / 256.0;\n        normalColor.green = color.green / 256.0;\n        normalColor.blue = color.blue / 256.0;\n    }\n\n    return normalColor;\n};\n\n/**\n * Returns the east-west distance of the bounds\n * @param {Bounds} bounds\n * @returns {number}\n */\nEMPWorldWind.utils.boundsWidth = function (bounds)\n{\n    return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n            new WorldWind.Location(0, bounds.west),\n            new WorldWind.Location(0, bounds.east));\n};\n\n/**\n * Returns the north-south distance of the bounds\n * @param {Bounds} bounds\n * @returns {number}\n */\nEMPWorldWind.utils.boundsHeight = function (bounds)\n{\n    return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n            new WorldWind.Location(bounds.south, 0),\n            new WorldWind.Location(bounds.north, 0));\n};\n\n\n/**\n * Dot color based on the symbol code affiliation\n * @param symbolCode\n * @returns {*}\n */\nEMPWorldWind.utils.selectHighAltitudeRangeImage = function (symbolCode)\n{\n    var affiliationLetter,\n            highAltitudeRangeImage;\n\n    if (!EMPWorldWind.utils.defined(symbolCode))\n    {\n        return EMPWorldWind.constants.highAltitudeRangeImage.highScaleImageYellow; // unknown\n    }\n\n    affiliationLetter = symbolCode.substring(1, 2);\n    switch (affiliationLetter.toLowerCase())\n    {\n        case \"h\":\n            highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed;\n            break;\n        case \"f\":\n            highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue;\n            break;\n        case \"n\":\n            highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen;\n            break;\n        case \"u\":\n            highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n            break;\n        default:\n            highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n            break;\n    }\n    return highAltitudeRangeImage;\n};\n\n/**\n *\n * @param CameraAltitude\n * @param singlePointAltitudeRanges\n * @returns {EMPWorldWind.constants.SinglePointAltitudeRangeMode|number}\n */\nEMPWorldWind.utils.getSinglePointAltitudeRangeMode = function (CameraAltitude, singlePointAltitudeRanges)\n{\n    if (CameraAltitude < singlePointAltitudeRanges.mid)\n    {\n        return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    }\n    else if (CameraAltitude >= singlePointAltitudeRanges.mid && CameraAltitude < singlePointAltitudeRanges.high)\n    {\n        return EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE;\n    }\n    else if (CameraAltitude >= singlePointAltitudeRanges.high)\n    {\n        return EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE;\n    }\n    else\n    {\n        //default\n        return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    }\n};\n\n\n\n\nEMPWorldWind.Math = {};\n\n/**\n * Determines if two values are equal using an absolute or relative tolerance test. This is useful\n * to avoid problems due to roundoff error when comparing floating-point values directly. The values are\n * first compared using an absolute tolerance test. If that fails, a relative tolerance test is performed.\n * Use this test if you are unsure of the magnitudes of left and right.\n *\n * @param {Number} left The first value to compare.\n * @param {Number} right The other value to compare.\n * @param {Number} relativeEpsilon The maximum inclusive delta between <code>left</code> and <code>right</code> for the relative tolerance test.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The maximum inclusive delta between <code>left</code> and <code>right</code> for the absolute tolerance test.\n * @returns {Boolean} <code>true</code> if the values are equal within the epsilon; otherwise, <code>false</code>.\n *\n * @example\n * var a = Cesium.Math.equalsEpsilon(0.0, 0.01, Cesium.Math.EPSILON2); // true\n * var b = Cesium.Math.equalsEpsilon(0.0, 0.1, Cesium.Math.EPSILON2);  // false\n * var c = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON7); // true\n * var d = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON9); // false\n */\nEMPWorldWind.Math.equalsEpsilon = function (left, right, relativeEpsilon, absoluteEpsilon)\n{\n    absoluteEpsilon = EMPWorldWind.Math.defaultValue(absoluteEpsilon, relativeEpsilon);\n    var absDiff = Math.abs(left - right);\n    return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\n};\n\n\n/**\n * Returns the first parameter if not undefined, otherwise the second parameter.\n * Useful for setting a default value for a parameter.\n *\n * @exports defaultValue\n *\n * @param {*} a\n * @param {*} b\n * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\n *\n * @example\n * param = Cesium.defaultValue(param, 'default');\n */\nEMPWorldWind.Math.defaultValue = function (a, b)\n{\n    if (a !== undefined)\n    {\n        return a;\n    }\n    return b;\n};\n\n\n/**\n * 0.1\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON1 = 0.1;\n\n/**\n * 0.01\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON2 = 0.01;\n\n/**\n * 0.001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON3 = 0.001;\n\n/**\n * 0.0001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON4 = 0.0001;\n\n/**\n * 0.00001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON5 = 0.00001;\n\n/**\n * 0.000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON6 = 0.000001;\n\n/**\n * 0.0000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON7 = 0.0000001;\n\n/**\n * 0.00000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON8 = 0.00000001;\n\n/**\n * 0.000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON9 = 0.000000001;\n\n/**\n * 0.0000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON10 = 0.0000000001;\n\n/**\n * 0.00000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON11 = 0.00000000001;\n\n/**\n * 0.000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON12 = 0.000000000001;\n\n/**\n * 0.0000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON13 = 0.0000000000001;\n\n/**\n * 0.00000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON14 = 0.00000000000001;\n\n/**\n * 0.000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON15 = 0.000000000000001;\n\n/**\n * 0.0000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON16 = 0.0000000000000001;\n\n/**\n * 0.00000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON17 = 0.00000000000000001;\n\n/**\n * 0.000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON18 = 0.000000000000000001;\n\n/**\n * 0.0000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON19 = 0.0000000000000000001;\n\n/**\n * 0.00000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON20 = 0.00000000000000000001;\n\n/**\n * 3.986004418e14\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.GRAVITATIONALPARAMETER = 3.986004418e14;\n\n/**\n * Radius of the sun in meters: 6.955e8\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.SOLAR_RADIUS = 6.955e8;\n\n/**\n * The mean radius of the moon, according to the \"Report of the IAU/IAG Working Group on\n * Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000\",\n * Celestial Mechanics 82: 83-110, 2002.\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.LUNAR_RADIUS = 1737400.0;\n\n/**\n * 64 * 1024\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.SIXTY_FOUR_KILOBYTES = 64 * 1024;\n\n/**\n * Returns the sign of the value; 1 if the value is positive, -1 if the value is\n * negative, or 0 if the value is 0.\n *\n * @param {Number} value The value to return the sign of.\n * @returns {Number} The sign of value.\n */\nEMPWorldWind.Math.sign = function (value)\n{\n    if (value > 0)\n    {\n        return 1;\n    }\n    if (value < 0)\n    {\n        return -1;\n    }\n\n    return 0;\n};\n\n/**\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n * This is similar to {@link CesiumMath#sign} except that returns 1.0 instead of\n * 0.0 when the input value is 0.0.\n * @param {Number} value The value to return the sign of.\n * @returns {Number} The sign of value.\n */\nEMPWorldWind.Math.signNotZero = function (value)\n{\n    return value < 0.0 ? -1.0 : 1.0;\n};\n\n","var EMPWorldWind = window.EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * Set of builder functions that produce singular WorldWind primitive shapes and renderables.\n * @namespace\n */\nEMPWorldWind.editors.primitiveBuilders = EMPWorldWind.editors.primitiveBuilders || {};\n\n/**\n * @param {emp.typeLibrary.Feature | object} feature\n * @returns {WorldWind.TextAttributes}\n */\nEMPWorldWind.editors.primitiveBuilders.createTextAttributes = function(feature) {\n  var textColor, size,\n    attributes = new WorldWind.TextAttributes();\n\n  // Set the offset\n  attributes.offset = new WorldWind.Offset(\n    WorldWind.OFFSET_FRACTION, -0.05, // To the right of the point by default\n    WorldWind.OFFSET_FRACTION, 0.5 // Center Y be default\n  );\n\n  // Should not be occluded by terrain or objects when false\n  attributes.depthTest = false;\n\n  // Label Color\n  if (feature.properties.labelStyle && feature.properties.labelStyle.color) {\n    textColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.labelStyle.color);\n  } else if (feature.properties.fontColor) {\n    textColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fontColor);\n  } else {\n    textColor = EMPWorldWind.utils.hexToRGBA(EMPWorldWind.constants.propertyDefaults.FILL_COLOR_HEX);\n  }\n  attributes.color = new WorldWind.Color(textColor.red, textColor.green, textColor.blue, textColor.alpha);\n\n  // Font Family\n  if (feature.properties.labelStyle && feature.properties.labelStyle.family) {\n    attributes.font.family = feature.properties.labelStyle.family;\n  } else if (feature.properties.fontFamily) {\n    attributes.font.family = feature.properties.fontFamily;\n  }\n\n  // Justification\n  if (feature.properties.labelStyle && feature.properties.labelStyle.justification) {\n    attributes.font.horizontalAlignment = feature.properties.labelStyle.justification;\n  } else if (feature.properties.labelAlign) {\n    attributes.font.horizontalAlignment = feature.properties.labelAlign;\n  }\n\n  // Font size\n  if (feature.properties.labelStyle && feature.properties.labelStyle.size) {\n    attributes.font.size = feature.properties.labelStyle.size;\n  } else if (feature.properties.fontSize) {\n    size = feature.properties.fontSize;\n    size = size.substring(0, size.length - 2);\n    if (!isNaN(size)) {\n      attributes.font.size = parseInt(feature.properties.fontSize);\n    }\n  }\n\n  // Label Scale\n  if (feature.properties.labelStyle && feature.properties.labelStyle.scale) {\n    attributes.scale = feature.properties.labelStyle.scale;\n  }\n\n  return attributes;\n};\n\n/**\n * Wrapper function for generating the appropriate attributes based on the given feature and selection style\n * @param {emp.typeLibrary.Feature | object} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {{attributes: *, highlightAttributes: *}}\n */\nEMPWorldWind.editors.primitiveBuilders.createShapeAttributes = function(feature, selectionStyle) {\n  var lineColor, fillColor, highlightAttributes,\n    selectedLineColor, selectedFillColor, selectedLabelColor;\n\n  var attributes = new WorldWind.ShapeAttributes();\n\n  switch (feature.format) {\n    case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO handle GEO_ACM attributes\n    case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL: // Do nothing, handled by renderer, no primitives\n    case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n      // Use PlacemarkAttributes\n      attributes = new WorldWind.PlacemarkAttributes();\n\n      // Set the imageURL\n      if (feature.properties.iconUrl) {\n        attributes.imageSource = feature.properties.iconUrl;\n        if (feature.properties.useProxy) {\n          attributes.imageSource = emp3.api.global.configuration.urlProxy + \"?url=\" + attributes.imageSource;\n        }\n      } else {\n        attributes.imageSource = WorldWind.configuration.baseUrl + \"images/emp-default-icon.png\";\n      }\n\n\n      // Create the label attributes\n      attributes.labelAttributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n      // Create the highlight attributes\n      highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n\n      // Create separate label highlights, will be linked and overridden to the normal attributes if not\n      highlightAttributes.labelAttributes = new WorldWind.TextAttributes(attributes.labelAttributes);\n\n      // Image scale may differ when selected\n      if (selectionStyle.scale) {\n        highlightAttributes.imageScale = selectionStyle.scale;\n      }\n\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.imageColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.imageColor = WorldWind.Color.YELLOW;\n      }\n\n      // Update the label attributes for highlighted labels\n      highlightAttributes.labelAttributes.offset = attributes.labelAttributes.offset;\n      highlightAttributes.labelAttributes.color = highlightAttributes.imageColor;\n      break;\n    case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n      // GeographicText requires TextAttributes instead\n      attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n      // Create highlight attributes from the regular attributes, only update highlight color\n      highlightAttributes = new WorldWind.TextAttributes(attributes);\n      if (selectionStyle.lineColor) {\n        selectedLabelColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.color = new WorldWind.Color(selectedLabelColor.red, selectedLabelColor.green, selectedLabelColor.blue, selectedLabelColor.alpha);\n      } else {\n        highlightAttributes.color = WorldWind.Color.YELLOW;\n      }\n      break;\n    case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n    case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n    case emp3.api.enums.FeatureTypeEnum.GEO_PATH: // Not all of the attributes are used for path/polyline\n    case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n    case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n    case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n    default:\n      // Set stroke color\n      if (feature.properties.strokeStyle && feature.properties.strokeStyle.strokeColor) {\n        lineColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.strokeStyle.strokeColor);\n        attributes.outlineColor = new WorldWind.Color(lineColor.red, lineColor.green, lineColor.blue, lineColor.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      // Set fill color\n      if (feature.properties.fillColor) {\n        fillColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fillColor);\n        attributes.interiorColor = new WorldWind.Color(fillColor.red, fillColor.green, fillColor.blue, fillColor.alpha);\n      } else {\n        attributes.drawInterior = false;\n      }\n\n      // TODO fillPattern is not yet supported by the ShapeAttributes class\n\n      // Line width\n      if (feature.properties.strokeWidth || feature.properties.lineWidth) {\n        attributes.outlineWidth = feature.properties.strokeWidth || feature.properties.lineWidth;\n      }\n\n      // Stippling of outline\n      attributes.outlineStippleFactor = feature.properties.stippleFactor || attributes.outlineStippleFactor;\n      attributes.outlineStipplePattern = feature.properties.stipplePattern || attributes.outlineStipplePattern;\n\n      // Generate the highlight attributes from the normal attributes\n      highlightAttributes = new WorldWind.ShapeAttributes(attributes);\n\n      // Update the selected lineColor\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n\n      // Update the selected fillColor\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.drawInterior = false;\n      }\n  }\n\n  return {\n    attributes: attributes,\n    highlightAttributes: highlightAttributes\n  };\n};\n\n/**\n * @todo Use update from NASA WW to handle 3d airspaces\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Polygon}\n */\nEMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure = function(feature, selectionStyle) {\n  var primitivePolygon, boundaries, attributes, highlightAttributes,\n    i, selectedFillColor,\n    len = feature.data.coordinates.length;\n\n  attributes = new WorldWind.ShapeAttributes();\n  highlightAttributes = new WorldWind.ShapeAttributes();\n  // TODO highlight attributes for ACM\n\n  if (selectionStyle.fillColor) {\n    selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n    highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n  } else {\n    highlightAttributes.interiorColor = WorldWind.Color.YELLOW;\n  }\n\n  boundaries = [];\n  for (i = 0; i < len; i++) {\n    // TODO need updates to WorldWind to fix this correctly, also not setting altitude if there are multiple attributes\n    //boundaries[0].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].minAlt));\n    //boundaries[1].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n    boundaries.push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n  }\n\n  primitivePolygon = new WorldWind.Polygon(boundaries, attributes);\n  primitivePolygon.altitudeMode = WorldWind.ABSOLUTE;\n  primitivePolygon.extrude = true;\n  primitivePolygon.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n  return primitivePolygon;\n};\n\n/**\n * Builds a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceCircle} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfaceCircle}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle = function(feature, selectionStyle) {\n  var attributes, location, circlePrimitive;\n\n  // Construct circle attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the location\n  location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n  // Construct the primitive\n  circlePrimitive = new WorldWind.SurfaceCircle(location, feature.properties.radius, attributes.attributes);\n\n  // Set the primitive properties\n  circlePrimitive.displayName = feature.name;\n  circlePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  circlePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return circlePrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceEllipse} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfaceEllipse}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse = function(feature, selectionStyle) {\n  var attributes, location, ellipsePrimitive;\n\n  // Construct the ellipse attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the location\n  location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n  // Construct the primitive\n  ellipsePrimitive = new WorldWind.SurfaceEllipse(location,\n    feature.properties.semiMajor,\n    feature.properties.semiMinor,\n    feature.properties.azimuth,\n    attributes.attributes);\n\n  // Set the primitive properties\n  ellipsePrimitive.displayName = feature.name;\n  ellipsePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  ellipsePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return ellipsePrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolyline} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolyline}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline = function(feature, selectionStyle) {\n  var i, pathPrimitive, attributes,\n    len = feature.data.coordinates.length,\n    locations = [];\n\n  // Construct the path attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the locations\n  for (i = 0; i < len; i++) {\n    locations.push(new WorldWind.Location(feature.data.coordinates[i][1], feature.data.coordinates[i][0]));\n  }\n\n  // Construct the primitive\n  pathPrimitive = new WorldWind.SurfacePolyline(locations, attributes.attributes);\n\n  // Set the primitive properties\n  pathPrimitive.displayName = feature.name;\n  pathPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  pathPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return pathPrimitive;\n};\n\n/**\n * This function is similar to the feature based version except it takes a geoJSON object as the only parameter.\n * @param {object} geoJSON\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolyline}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON = function(geoJSON, selectionStyle) {\n  var i, color, attributes, highlightAttributes, polylinePrimitive, selectedLineColor,\n    len = geoJSON.coordinates.length,\n    locations = [];\n\n  attributes = new WorldWind.ShapeAttributes();\n  // SurfacePolyline uses the following attributes\n  if (geoJSON.properties.strokeColor) {\n    color = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor, geoJSON.properties.lineOpacity);\n    attributes.outlineColor = new WorldWind.Color(color.red, color.green, color.blue, color.alpha);\n  } else {\n    attributes.outlineColor = WorldWind.Color.BLACK;\n  }\n\n  attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n  for (i = 0; i < len; i++) {\n    locations.push(new WorldWind.Location(geoJSON.coordinates[i][1], geoJSON.coordinates[i][0]));\n  }\n\n  highlightAttributes = new WorldWind.ShapeAttributes();\n  if (selectionStyle.lineColor) {\n    selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n    highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n  } else {\n    highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n  }\n\n  polylinePrimitive = new WorldWind.SurfacePolyline(locations, attributes);\n  polylinePrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  polylinePrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n  return polylinePrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Placemark} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Placemark}\n */\nEMPWorldWind.editors.primitiveBuilders.constructPlacemark = function(feature, selectionStyle) {\n  var position, placemark, attributes,\n    eyeDistanceScaling = false;\n\n  // Create the placemark attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the position\n  position = new WorldWind.Position(\n    feature.data.coordinates[1],\n    feature.data.coordinates[0],\n    feature.data.coordinates[2] || 0);\n\n  // Construct the primitive\n  placemark = new WorldWind.Placemark(position, eyeDistanceScaling, attributes.attributes);\n\n  // Set the placemark attributes\n  placemark.alwaysOnTop = true;\n  placemark.label = feature.name;\n  placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(attributes.highlightAttributes);\n\n  return placemark;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolygon} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolygon}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon = function(feature, selectionStyle) {\n  var polygonPrimitive, attributes, boundaryLen,\n    i, j,\n    boundaries = [],\n    numBounds = feature.data.coordinates.length;\n\n  // Construct the polygon attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the boundary locations\n  for (i = 0; i < numBounds; i++) {\n    boundaryLen = feature.data.coordinates[i].length;\n    var subBoundary = [];\n    for (j = 0; j < boundaryLen; j++) {\n      subBoundary.push(new WorldWind.Location(feature.data.coordinates[i][j][1], feature.data.coordinates[i][j][0]));\n    }\n    boundaries.push(subBoundary);\n  }\n\n  // Construct the primitive\n  polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes.attributes);\n\n  // Set the primitive properties\n  polygonPrimitive.displayName = feature.name;\n  polygonPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  polygonPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return polygonPrimitive;\n};\n\n/**\n *\n * @param {object} geoJSON\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolygon}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON = function(geoJSON, selectionStyle) {\n  var attributes, interiorColor, outlineColor, boundaryLen, polygonPrimitive,\n    selectedLineColor, selectedFillColor, highlightAttributes,\n    i, j,\n    boundaries = [],\n    numBounds = geoJSON.geometry.coordinates.length;\n\n  for (i = 0; i < numBounds; i++) {\n    boundaryLen = geoJSON.geometry.coordinates[i].length;\n    var subBoundary = [];\n    for (j = 0; j < boundaryLen; j++) {\n      subBoundary.push(new WorldWind.Location(geoJSON.geometry.coordinates[i][j][1], geoJSON.geometry.coordinates[i][j][0]));\n    }\n    boundaries.push(subBoundary);\n  }\n\n  attributes = new WorldWind.ShapeAttributes();\n  if (geoJSON.properties.strokeColor) {\n    outlineColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor);\n    attributes.outlineColor = new WorldWind.Color(outlineColor.red, outlineColor.green, outlineColor.blue, outlineColor.alpha);\n  } else {\n    attributes.outlineColor = WorldWind.Color.BLACK;\n  }\n\n  if (geoJSON.properties.fillColor) {\n    interiorColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.fillColor);\n    attributes.interiorColor = new WorldWind.Color(interiorColor.red, interiorColor.green, interiorColor.blue, interiorColor.alpha);\n  } else {\n    attributes.drawInterior = false;\n  }\n\n  attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n  attributes.outlineStippleFactor = geoJSON.properties.stippleFactor || attributes.outlineStippleFactor;\n  attributes.outlineStipplePattern = geoJSON.properties.stipplePattern || attributes.outlineStipplePattern;\n\n  highlightAttributes = new WorldWind.ShapeAttributes();\n  if (selectionStyle.lineColor) {\n    selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n    highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n  } else {\n    highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n  }\n  if (selectionStyle.fillColor) {\n    selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n    highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n  } else {\n    highlightAttributes.drawInterior = false;\n  }\n\n  polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes);\n  polygonPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  polygonPrimitive.displayName = geoJSON.properties.name;\n  polygonPrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n  return polygonPrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceRectangle} primitive\n * This handles rectangles and squares\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfaceRectangle}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle = function(feature, selectionStyle) {\n  var attributes, location, width, height, rectPrimitive;\n\n  // Construct the rectangle/square attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the location\n  location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n  // Determine rect or square\n  if (feature.format === emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE) {\n    // Rectangle\n    width = feature.properties.width;\n    height = feature.properties.height;\n  } else {\n    // Square, width equals height\n    width = feature.properties.width;\n    height = feature.properties.width;\n  }\n\n  // Construct the primitive\n  rectPrimitive = new WorldWind.SurfaceRectangle(location, width, height, feature.properties.azimuth, attributes.attributes);\n\n  // Set the primitive properties\n  rectPrimitive.displayName = feature.name;\n  rectPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  rectPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return rectPrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Text} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Text}\n */\nEMPWorldWind.editors.primitiveBuilders.constructText = function(feature, selectionStyle) {\n  var attributes, position, textPrimitive;\n\n  // Construct circle attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the position\n  position = new WorldWind.Position(\n    feature.coordinates[1], // Latitude\n    feature.coordinates[0], // Longitude\n    feature.coordinates[2] ? feature.coordinates[2] : 0); // Altitude\n\n  // Construct the text\n  textPrimitive = new WorldWind.GeographicText(position, feature.name);\n\n  // Set the primitive properties\n  textPrimitive.attributes = attributes.attributes;\n  textPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  textPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return textPrimitive;\n};\n\n/**\n * @param {object} geoJSON\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Text}\n */\nEMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON = function(geoJSON, selectionStyle) {\n  var textPrimitive, attributes, highlightAttributes, selectedColor, position;\n\n  // Create the attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(geoJSON);\n\n  // Create the highlight attributes\n  highlightAttributes = new WorldWind.TextAttributes(attributes);\n  if (selectionStyle.lineColor) {\n    selectedColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n    highlightAttributes.color = new WorldWind.Color(selectedColor.red, selectedColor.green, selectedColor.blue, selectedColor.alpha);\n  } else {\n    highlightAttributes.color = WorldWind.Color.YELLOW;\n  }\n\n  // Set the position\n  position = new WorldWind.Position(\n    geoJSON.geometry.coordinates[1], // Latitude\n    geoJSON.geometry.coordinates[0], // Longitude\n    geoJSON.geometry.coordinates[2] ? geoJSON.geometry.coordinates[0] : 0); // Altitude\n\n  // Construct the primitive\n  textPrimitive = new WorldWind.GeographicText(position, geoJSON.properties.label);\n\n  // Set the attributes\n  textPrimitive.attributes = attributes;\n  textPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  textPrimitive.highlightAttributes = highlightAttributes;\n\n  return textPrimitive;\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * @classdesc The EditorController handles all drawing, editing, and updating of features\n * @class\n */\nEMPWorldWind.editors.EditorController = (function() {\n  /**\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {object} modifiers\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.Placemark}\n   * @private\n   */\n  function _constructSinglePointMilStdSymbol(feature, modifiers, selectionStyle) {\n    var placemark, attributes, highlightAttributes, position, imageInfo, imageCenter, imageBounds, imageOffset,\n      selectedImage, symbolCode, selectedModifiers,\n      eyeDistanceScaling = false;\n\n    attributes = new WorldWind.PlacemarkAttributes();\n\n    // TODO pass in leaderline settings by feature or via config object\n    // Leaderline settings\n    attributes.drawLeaderLine = true;\n    attributes.leaderLineAttributes.outlineColor = WorldWind.Color.RED;\n\n    if (feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n      // Optimization\n      attributes.imageScale = 1;\n      attributes.imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.symbolCode);\n      highlightAttributes = new WorldWind.PlacemarkAttributes();\n      highlightAttributes.imageColor = WorldWind.Color.WHITE;\n      highlightAttributes.imageSource = attributes.imageSource;\n    }\n    else {\n\n      if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) && feature.symbolCode) {\n        // do not display country code\n        symbolCode = feature.symbolCode.substr(0, 12) + \"--\" + feature.symbolCode.substr(14);\n      }\n      else {\n        // display country code\n        symbolCode = feature.symbolCode;\n      }\n      // Render\n      imageInfo = armyc2.c2sd.renderer.MilStdIconRenderer.Render(symbolCode, modifiers);\n      imageCenter = imageInfo.getCenterPoint();\n      imageBounds = imageInfo.getImageBounds();\n\n      // Calculate offset\n      imageOffset = new WorldWind.Offset(\n        WorldWind.OFFSET_FRACTION, imageCenter.x / imageBounds.width,\n        WorldWind.OFFSET_FRACTION, 1 - (imageCenter.y / imageBounds.height)\n      );\n\n      attributes.imageScale = 1;\n      attributes.imageOffset = imageOffset;\n      attributes.imageSource = imageInfo.toDataUrl();\n\n      // Highlight attributes\n      highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n      highlightAttributes.imageColor = WorldWind.Color.WHITE;\n      highlightAttributes.imageOffset = imageOffset;\n\n      // Note that this is done statically, if the selection style changes a bulk update to every feature will need to be done\n      selectedModifiers = Object.assign({}, modifiers);\n      selectedModifiers.LINECOLOR = selectionStyle.lineColor;\n      selectedModifiers.FILLCOLOR = selectionStyle.fillColor;\n      selectedImage = armyc2.c2sd.renderer.MilStdIconRenderer.Render(feature.symbolCode, selectedModifiers).toDataUrl();\n      highlightAttributes.imageSource = selectedImage;\n    }\n\n    position = new WorldWind.Position(\n      feature.data.coordinates[1],\n      feature.data.coordinates[0],\n      EMPWorldWind.utils.defined(feature.data.coordinates[2]) ? feature.data.coordinates[2] : 0);\n\n    placemark = new WorldWind.Placemark(position, eyeDistanceScaling);\n    placemark.alwaysOnTop = true;\n    placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    placemark.attributes = new WorldWind.PlacemarkAttributes(attributes);\n    placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(highlightAttributes);\n\n    return placemark;\n  }\n\n  /**\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {object} modifiers\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceShape[]}\n   * @private\n   */\n  function _constructMultiPointMilStdFeature(feature, modifiers, selectionStyle) {\n    var imageInfo, componentFeature, lineCount, subGeoJSON, bbox, bounds, scale, featureCoords,\n      i, j,\n      positions = \"\",\n      shapes = [];\n\n    // Generate position string\n    featureCoords = feature.data.coordinates.join().split(\",\");\n    for (i = 0; i < featureCoords.length; i += 2) {\n      positions += featureCoords[i] + \",\" + featureCoords[i + 1] + \" \";\n    }\n    positions = positions.trim();\n\n    // Convert bounds to bbox\n    bounds = this.getBounds();\n    bbox = bounds.west + \",\" + bounds.south + \",\" + bounds.east + \",\" + bounds.north;\n\n    // Calculate the approximate scale\n    scale = EMPWorldWind.utils.boundsWidth(bounds) >> 2;\n\n    // TODO get update to renderer to pass back raw JSON object\n    imageInfo = JSON.parse(sec.web.renderer.SECWebRenderer.RenderSymbol(\n      feature.name,\n      feature.coreId,\n      feature.description,\n      feature.symbolCode,\n      positions,\n      WorldWind.CLAMP_TO_GROUND,\n      scale,\n      bbox,\n      modifiers,\n      EMPWorldWind.constants.MultiPointRenderType.GEOJSON));\n      \n      feature.wasClipped = imageInfo.properties.wasClipped;\n\n    // Generate primitives from the geoJSON\n    for (i = 0; i < imageInfo.features.length; i++) {\n      componentFeature = imageInfo.features[i];\n\n      // TODO have the renderer return the proper width, manually overwriting the line width for now\n      componentFeature.properties.strokeWidth = 1;\n      componentFeature.properties.strokeWeight = 1;\n\n      switch (componentFeature.geometry.type) {\n        case \"MultiLineString\":\n          lineCount = componentFeature.geometry.coordinates.length;\n\n          for (j = 0; j < lineCount; j++) {\n            subGeoJSON = {\n              properties: componentFeature.properties,\n              coordinates: componentFeature.geometry.coordinates[j]\n            };\n\n            shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(subGeoJSON, selectionStyle));\n          }\n          break;\n        case \"LineString\":\n          shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(componentFeature, selectionStyle));\n          break;\n        case \"Point\":\n          shapes.push(EMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON(componentFeature, selectionStyle));\n          break;\n        case \"Polygon\":\n          shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON(componentFeature, selectionStyle));\n          break;\n        default:\n          window.console.error(\"Unable to render symbol with type \" + componentFeature.geometry.type);\n      }\n    }\n\n    return shapes;\n  }\n\n  /**\n   * Requires access to the current scope ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   */\n  function processModifiers(feature) {\n    var modifiers, enhancedModifiers, override, lowRangeMode;\n    if (feature.data.type === \"Point\") {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        this.state.labelStyles, // Single-point shows symbols based on settings\n        this.state.pixelSize);\n    } else {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        EMPWorldWind.constants.AllLabels, // Multi-point always shows symbols\n        this.state.pixelSize);\n    }\n\n    lowRangeMode = feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(\n      modifiers,\n      ((this.state.labelStyles.CN === true) && lowRangeMode));\n\n    enhancedModifiers = EMPWorldWind.utils.milstd.checkForRequiredModifiers(feature);\n\n    for (override in enhancedModifiers) {\n      if (enhancedModifiers.hasOwnProperty(override)) {\n        modifiers[override] = enhancedModifiers[override];\n      }\n    }\n\n    return modifiers;\n  }\n\n  /**\n   * Requires access to the current scope.\n   * ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceShape[]}\n   */\n  function constructMilStdSymbol(feature, selectionStyle) {\n    var modifiers, shapes = [];\n\n    // Process the modifiers\n    modifiers = processModifiers.call(this, feature);\n\n    if (feature.data.type === \"Point\") {\n      shapes.push(_constructSinglePointMilStdSymbol.call(this, feature, modifiers, selectionStyle));\n    } else if (feature.data.type === \"LineString\") {\n      // Requires access to the WorldWindow navigator, bind to the current scope\n      shapes = shapes.concat(_constructMultiPointMilStdFeature.call(this, feature, modifiers, selectionStyle));\n    } else {\n      // TODO alert the user more gracefully that the type is unhandled\n      window.console.error(\"Unhandled feature type: \" + feature.data.type + \" in EMPWorldWind\");\n    }\n\n    return shapes;\n  }\n\n  /**\n   * Async function\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {PlotFeatureCB} callback\n   * @this EMPWorldWind.map\n   */\n  function asyncPlotKMLFeature(feature, callback) {\n    var url, kmlFilePromise, kmlLayer, wwFeature,\n      rc = {\n        success: false\n      };\n\n    // Convert the kml string to a data url\n    url = \"data:text/xml,\" + encodeURIComponent(feature.data);\n\n    // Build the KML file promise\n    kmlFilePromise = new WorldWind.KmlFile(url);\n    kmlFilePromise\n      .then(function(kmlFile) {\n        // Construct the KML layer to hold the document\n        kmlLayer = new WorldWind.RenderableLayer(feature.coreId);\n\n        // Add the KML layer to the map\n        kmlLayer.addRenderable(kmlFile);\n        this.worldWindow.addLayer(kmlLayer);\n\n        // Use the standard data holder to keep track of the layer\n        wwFeature = new EMPWorldWind.data.EmpFeature(feature);\n        wwFeature.addShapes(kmlLayer); // This isn't a WW primitive but use it as if it was\n\n        // Record the layer so we can remove/modify it later\n        this.layers[feature.coreId] = kmlLayer;\n\n        // Configure the callback args\n        rc.success = true;\n        rc.feature = wwFeature;\n\n        // Fire the callback\n        callback(rc);\n      }.bind(this));\n  }\n\n  return {\n    /**\n     * Creates a new EMPWorldWind feature and associated WorldWind features from an EMP feature and adds it to the map\n     *\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback Callback to be invoked on completion\n     * @this EMPWorldWind.map\n     */\n    plotFeature: function(empFeature, callback) {\n      var wwFeature, layer, buildShapes, shapes;\n\n      var rc = {\n        message: \"\",\n        success: true,\n        feature: undefined\n      };\n\n      switch (empFeature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          buildShapes = constructMilStdSymbol.bind(this);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructPlacemark;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructText;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.KML:\n          // KML is not supported as native primitives in WorldWind\n          // TODO KML selection, not sure how to support it or represent it\n          return asyncPlotKMLFeature.call(this, empFeature, callback);\n        default:\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      }\n\n      // Check if we have a builder for standard primitives\n      if (!rc.success) {\n        callback(rc);\n        return;\n      }\n\n      // construct the feature\n      wwFeature = new EMPWorldWind.data.EmpFeature(empFeature);\n      wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n      empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      empFeature.range =  this.worldWindow.navigator.range;\n\n      // Build the primitives\n      shapes = buildShapes(empFeature, this.state.selectionStyle);\n      wwFeature.addShapes(shapes);\n\n      // Add the feature to the layer\n      layer = this.getLayer(empFeature.parentCoreId);\n      layer.addFeature(wwFeature);\n\n      // Configure the callback params\n      rc.feature = wwFeature;\n      rc.success = true;\n\n      // Fire the callback\n      callback(rc);\n    },\n    /**\n     * Updates a WorldWind Renderable object on the map and returns the updated objects in the response\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback\n     * @this EMPWorldWind.map\n     */\n    updateFeature: function(wwFeature, empFeature, callback) {\n      var layer,\n        rc = {\n          success: true,\n          message: \"\",\n          feature: wwFeature\n        };\n\n      // Remove existing primitives from the map\n      if (empFeature.format !== emp3.api.enums.FeatureTypeEnum.KML) {\n        layer = this.getLayer(empFeature.parentCoreId);\n        empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n        layer.removeFeature(wwFeature);\n      }\n      else {\n        // Handle KML\n        this.worldWindow.removeLayer(this.layers[empFeature.coreId]);\n      }\n\n      // Clear the primitives from the feature\n      wwFeature.clearShapes();\n\n      switch (empFeature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n          empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n          wwFeature.addShapes(constructMilStdSymbol.call(this, empFeature, this.state.selectionStyle));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructPlacemark(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructText(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.KML:\n          // KML is not supported as native primitives in WorldWind\n          return asyncPlotKMLFeature.call(this, empFeature, callback);\n        default:\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      }\n\n      // Redraw the new shapes\n      if (rc.success) {\n        // tag empFeature with current range. \n        empFeature.range =  this.worldWindow.navigator.range;\n           // Update the empFeature stored in the wwFeature\n        wwFeature.feature = empFeature;\n        wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n\n        // Update the layer\n        layer.addFeature(wwFeature);\n\n        // Setup the return\n        rc.feature = wwFeature;\n      }\n      callback(rc);\n    },\n    /**\n     *\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @this EMPWorldWind.map\n     */\n    updateFeatureLabelStyle: function(wwFeature) {\n      var shapes,\n        empLayer = this.getLayer(wwFeature.feature.parentCoreId);\n\n      switch (wwFeature.feature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          empLayer.removeFeature(wwFeature);\n          wwFeature.clearShapes();\n          shapes = constructMilStdSymbol.call(this, wwFeature.feature, this.state.selectionStyle);\n          wwFeature.addShapes(shapes);\n          empLayer.addFeature(wwFeature);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n        default:\n        // do nothing\n      }\n    }\n  };\n})();\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * Throttles a function to a restrict the number of calls to it to prevent the engine from locking up under heavy use\n * @param {function} fn callback to throttle\n * @param {number} [threshold=20]\n * @param {context} scope\n * @returns {Function}\n */\nEMPWorldWind.eventHandlers.throttle = function (fn, threshold, scope)\n{\n    threshold = threshold || 20; // 20 ms throttle\n    var last, deferTimer;\n\n    return function ()\n    {\n        var context = scope || this;\n\n        var now = +new Date,\n                args = arguments;\n        if (last && now < last + threshold)\n        {\n            clearTimeout(deferTimer);\n            deferTimer = setTimeout(function ()\n            {\n                last = now;\n                fn.apply(context, args);\n            }, threshold);\n        }\n        else\n        {\n            last = now;\n            fn.apply(context, args);\n        }\n    };\n};\n\n/**\n * Notifies the map the view has been updated\n *\n * NOTE: The altitude, latitude, and longitude for the returned view may not be accurate as they are still based on\n * the navigator which is based on the lookAt location.\n *\n * @param {emp3.api.enums.CameraEventType} [viewEventType]\n * @this EMPWorldWind.map\n */\nEMPWorldWind.eventHandlers.notifyViewChange = function (viewEventType)\n{\n    var view = {\n        range: this.worldWindow.navigator.range,\n        tilt: this.worldWindow.navigator.tilt,\n        roll: this.worldWindow.navigator.roll,\n        heading: this.worldWindow.navigator.heading,\n        altitude: this.worldWindow.navigator.range, // TODO this is not correct, just an approximation until camera support\n        location: {\n            lat: this.worldWindow.navigator.lookAtLocation.latitude,\n            lon: this.worldWindow.navigator.lookAtLocation.longitude\n        },\n        bounds: this.getBounds()\n    };\n\n    var lookAt = {\n        range: this.worldWindow.navigator.range,\n        tilt: this.worldWindow.navigator.tilt,\n        heading: this.worldWindow.navigator.heading,\n        altitude: this.worldWindow.navigator.lookAtLocation.altitude || 0,\n        latitude: this.worldWindow.navigator.lookAtLocation.latitude,\n        longitude: this.worldWindow.navigator.lookAtLocation.longitude\n    };\n\n    //optimization . isMapMoving uses an epsilon to reduce the calls to triggerRenderUpdate function.\n    if (this.isMapMoving())\n    {\n        this.empMapInstance.eventing.ViewChange(view, lookAt, viewEventType);\n        this.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n        this.bounds = this.getBounds();\n       // this.shapesInViewArea = this.pickShapesInViewRegion();\n        EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n        this.lastNavigator.range = this.worldWindow.navigator.range;\n        this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n        this.lastNavigator.roll = this.worldWindow.navigator.roll;\n        this.lastNavigator.heading = this.worldWindow.navigator.heading;\n        this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n    }\n\n\n\n\n\n};\n\n/**\n * Notify the that a re-render of the MilStd graphics is required based off of a delta from the last time the renderer\n * was called. This may trigger based on altitude delta or distance delta.\n * @this EMPWorldWind.map\n */\nEMPWorldWind.eventHandlers.triggerRenderUpdate = function ()\n{\n    // TODO trigger this less often or on a timer\n    this.state.lastRender.bounds = this.getBounds();\n    this.state.lastRender.altitude = this.worldWindow.navigator.range;\n\n    emp.util.each(Object.keys(this.features), function (featureId)\n    {\n        var feature = this.features[featureId];\n\n        // TODO check if the symbol is visible first\n        if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n                feature.feature.data.type === \"LineString\")\n        {\n            if (this.isMilStdMultiPointShapeInViewRegion (feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON3) ||\n                    feature.feature.wasClipped))\n            {\n                // optimization - update feature only if inside view region and  (range outside range epsilon or was cliiped)\n                this.plotFeature(feature);\n            }\n        }\n        else if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n                feature.feature.data.type === \"Point\")\n        {\n            //optimization\n            var callRenderer = false;\n            feature.singlePointAltitudeRangeChanged = feature.singlePointAltitudeRangeMode !== this.singlePointAltitudeRangeMode;\n\n            if (feature.singlePointAltitudeRangeChanged && (this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE) && (this.iconLabelOption !== 'none'))\n            {\n                callRenderer = true;\n                feature.isHighAltitudeRangeImage = false;\n                feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.singlePointAltitudeRangeChanged = false;\n            }\n            else if (feature.singlePointAltitudeRangeChanged && this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE)\n            {\n                callRenderer = true;\n                feature.isHighAltitudeRangeImage = false;\n                feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.singlePointAltitudeRangeChanged = false;\n            }\n            else if (feature.singlePointAltitudeRangeChanged && this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE)\n            {\n                feature.isHighAltitudeRangeImage = true;\n                //  dot image based on affiliation\n                feature.shapes[0].attributes._imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.feature.symbolCode);\n                feature.shapes[0].highlightAttributes._imageSource = feature.shapes[0].attributes._imageSource;\n                feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.singlePointAltitudeRangeChanged = false;\n            }\n            if (callRenderer)\n            {\n                this.plotFeature(feature);\n            }\n        }\n    }.bind(this));\n    this.worldWindow.redraw();\n};\n\n/**\n *\n * @param mouseEvent\n * @param empEventingArgs\n */\nEMPWorldWind.eventHandlers.extractFeatureFromEvent = function (mouseEvent, empEventingArgs)\n{\n    var obj, i,\n            pickList = this.worldWindow.pick(this.worldWindow.canvasCoordinates(mouseEvent.clientX, mouseEvent.clientY)),\n            len = pickList.objects.length;\n\n    for (i = 0; i < len; i++)\n    {\n        obj = pickList.objects[i];\n        if (!obj.isTerrain)\n        {\n            if (obj.userObject.userProperties && obj.userObject.userProperties.id)\n            {\n                empEventingArgs.coreId = obj.userObject.userProperties.id;\n                empEventingArgs.target = \"feature\";\n                break;\n            }\n        }\n    }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent}\n * @typedef {Object} MouseEvent\n */\n\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent}\n * @typedef {Object} WheelEvent\n */\n\n/**\n * Mouse event handlers\n */\nEMPWorldWind.eventHandlers.mouse = {\n  /**\n   * @param {MouseEvent} event\n   * @this EMPWorldWind.map\n   */\n  click: function(event) {\n    var clickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    clickEvent.type = emp.typeLibrary.Pointer.EventType.SINGLE_CLICK;\n\n    EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, clickEvent);\n    this.empMapInstance.eventing.Pointer(clickEvent);\n  },\n  /**\n   *\n   * @param {MouseEvent} event\n   * @this EMPWorldWind.map\n   */\n  dblclick: function(event) {\n    var dblClickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    dblClickEvent.type = emp.typeLibrary.Pointer.EventType.DBL_CLICK;\n\n    EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, dblClickEvent);\n\n    this.empMapInstance.eventing.Pointer(dblClickEvent);\n  },\n  /**\n   *\n   * @param {WheelEvent} event\n   * @this EMPWorldWind.map\n   */\n  wheel: function(event) {\n    if (event.wheelDeltaY < 0 && this.worldWindow.navigator.range > EMPWorldWind.constants.view.MAX_HEIGHT) {\n      this.worldWindow.navigator.range = EMPWorldWind.constants.view.MAX_HEIGHT;\n      event.preventDefault();\n    }\n\n    switch (this.state.lockState) {\n      case emp3.api.enums.MapMotionLockEnum.NO_MOTION:\n      case emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN:\n      case emp3.api.enums.MapMotionLockEnum.NO_ZOOM:\n        event.preventDefault();\n        break;\n      default:\n      // business as usual\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch}\n * @typedef {object} Touch\n */\n\n/**\n * @typedef {object} TouchEvent\n * @property {Touch[]} touches\n */\n\n/**\n * Touch event handlers\n */\nEMPWorldWind.eventHandlers.touch = {\n  /**\n   * Touch down event handler,\n   * Approximates mousedown\n   * @param {TouchEvent} event\n   * @this EMPWorldWind.map\n   */\n  touchstart: function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n\n    coords.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n    this.state.lastInteractionEvent = event;\n    this.empMapInstance.eventing.Pointer(coords);\n  },\n  /**\n   * Touch end event handler\n   * Approximates mouseup\n   * @this EMPWorldWind.map\n   */\n  touchend: function(/*event*/) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent.touches[0]);\n\n    coords.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n    this.empMapInstance.eventing.Pointer(coords);\n  },\n  /**\n   * Touch cancel event handler, placeholder until it is needed\n   */\n  touchcancel: function(/*event*/) {\n    // Placeholder\n    // var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n    // window.console.debug(event, coords);\n  },\n  /**\n   * Touch move event handler\n   * @param {TouchEvent} event\n   * @this EMPWorldWind.map\n   */\n  touchmove: function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n\n    // TODO check if map is locked or not before notifying view change\n    this.state.lastInteractionEvent = event;\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n  }\n};","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n/**\n * @typedef {object} WWDragEvent\n */\n\n\n/**\n * The event handlers listed here are not standard DOM drag event handlers. They represent notification functions\n * to alert the core to different drag states.\n *\n * @see WorldWind.DragRecognizer\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.drag = {\n  /**\n   *\n   * @param {WWDragEvent} event\n   * @this EMPWorldWind.map\n   */\n  began: function (/*event*/) {\n    //window.console.debug(event);\n  },\n  /**\n   *\n   * @param {WWDragEvent} event\n   * @this EMPWorldWind.map\n   */\n  changed: function (/*event*/) {\n    //window.console.debug(event);\n  },\n  /**\n   *\n   * @param {WWDragEvent} event\n   * @this EMPWorldWind.map\n   */\n  ended: function (/*event*/) {\n    //window.console.debug(event);\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events}\n * @typedef {object} PointerEvent\n */\n\n/**\n * Pointer events are currently aliases for their mouseevent counterparts\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.pointer = {\n  /**\n   * Wrapper for mousedown\n   * @see EMPWorldWind.eventHandlers.mouse.mousedown\n   * @this EMPWorldWind.map\n   */\n  pointerdown: function(event) {\n    var mousedownEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n    mousedownEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n    EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mousedownEvent);\n\n    this.empMapInstance.eventing.Pointer(mousedownEvent);\n  },\n  /**\n   * @see EMPWorldWind.eventHandlers.mouse.mouseup\n   * @this EMPWorldWind.map\n   */\n  pointerup: function(event) {\n    var mouseupEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    mouseupEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n    // TODO see if features are needed on mouseup\n    // EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mouseupEvent);\n\n    if (this.state.dragging) {\n      this.state.dragging = false;\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n    }\n\n    this.state.autoPanning = EMPWorldWind.constants.NO_PANNING;\n    this.empMapInstance.eventing.Pointer(mouseupEvent);\n  },\n  /**\n   * @see EMPWorldWind.eventHandlers.mouse.mousemove\n   * @this EMPWorldWind.map\n   */\n  pointermove: function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n\n    var element, elementBounds,\n      smartAreaBuffer = 0.05,\n      pan = {\n        up: false,\n        down: false,\n        left: false,\n        right: false\n      };\n\n    switch (event.buttons) {\n      case 1: // Left button, we're moving the map\n      case 2: // Right button, we're tilting/rotating the map\n        switch (this.state.lockState) {\n          case emp3.api.enums.MapMotionLockEnum.NO_MOTION:\n          case emp3.api.enums.MapMotionLockEnum.NO_PAN:\n          case emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN:\n            this.state.dragging = true;\n            event.preventDefault();\n            break;\n          case emp3.api.enums.MapMotionLockEnum.SMART_MOTION:\n            event.preventDefault();\n\n            element = event.srcElement || event.originalTarget;\n            elementBounds = element.getBoundingClientRect();\n\n            // Pan left or right\n            pan.left = event.offsetX < elementBounds.width * smartAreaBuffer;\n            pan.right = event.offsetX > elementBounds.width - (elementBounds.width * smartAreaBuffer);\n\n            // Pan up or down\n            pan.up = event.offsetY < elementBounds.height * smartAreaBuffer;\n            pan.down = event.offsetY > elementBounds.height - (elementBounds.height * smartAreaBuffer);\n\n            if (pan.up || pan.down || pan.left || pan.right) {\n              this.state.autoPanning = pan;\n              this.spinGlobe();\n            } else {\n              this.state.autoPanning = EMPWorldWind.constants.NO_PANNING;\n            }\n            break;\n          case emp3.api.enums.MapMotionLockEnum.UNLOCKED:\n          default:\n            EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n        }\n        break;\n      case 4: // Wheel/middle button\n      case 8: // 4th button (back)\n      case 16: // 5th button (forward)\n      default:\n      // No actions\n    }\n\n    this.state.lastInteractionEvent = event;\n  }\n};"]}