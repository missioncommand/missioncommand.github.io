{"version":3,"sources":["../../../src/mapengine/worldwind/worldwind-map-engine.js","../../../src/mapengine/worldwind/EMPWorldWind.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpWMSLayer.js","../../../src/mapengine/worldwind/data/EMPWorldWind.data.EmpFeature.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.constants.js","../../../src/mapengine/worldwind/utils/EMPWorldWind.utils.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.primitiveBuilders.js","../../../src/mapengine/worldwind/controllers/editors/EMPWorldWind.editors.EditorController.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.mouse.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.touch.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.drag.js","../../../src/mapengine/worldwind/controllers/eventHandlers/EMPWorldWind.eventHandlers.pointer.js"],"names":["EMPWorldWind","window","emp","engineDefs","worldWindMapEngine","args","empMapInstance","mapInstance","empWorldWind","engineInterface","map","createEngineTemplate","mapEngineExposed","implementation","displayName","version","capabilities","mapType","type3D","type2_5D","formats","GEOJSON_BASIC","plot","draw","edit","GEOJSON_FULL","WMS","version_1_1","version_1_3","elevationData","KML_BASIC","KML_COMPLEX","IMAGE","MILSTD","version2525B","version2525C","AIRSPACE","AOI","settings","milstd","iconSize","labelOption","requirements","wmsCapabilities","projection","flat","initialize","succeed","empWorldWindInstance","engineDirect","name","ref","eventing","StatusChange","status","states","READY","err","console","error","fail","MAP_INSTANCE_INIT_FAILED","view","set","transaction","altitude","bottomLeft","topRight","feature","bufferScale","t1","t2","toRad","Math","PI","items","globalType","location","latitude","lat","longitude","lon","tilt","roll","heading","bounds","west","south","east","north","pow","sin","WorldWind","EARTH_RADIUS","asin","sqrt","cos","format","emp3","api","enums","FeatureTypeEnum","GEO_CIRCLE","properties","radius","GEO_ELLIPSE","max","semiMajor","semiMinor","GEO_RECTANGLE","width","height","GEO_SQUARE","GEO_ACM","coordinates","failures","push","animate","pause","animateCB","getCenter","getBounds","run","eventHandlers","notifyViewChange","call","CameraEventEnum","CAMERA_MOTION_STOPPED","CAMERA_IN_MOTION","centerOnLocation","lookAt","range","overlay","add","rc","failList","util","each","addLayer","success","typeLibrary","Error","coreId","message","level","MINOR","remove","removeLayer","overlayId","bind","this","wms","addWMS","removeWMS","itemsCount","length","plotFeature","featureCount","cbArgs","unplotFeature","mil2525","icon","labels","setLabelStyle","getLatLonFromXY","pickPoint","Vec2","x","y","terrainObject","worldWindow","pickTerrain","position","undefined","visibility","featureId","features","setVisible","visible","refresh","config","bRangeChanged","prop","value","hasOwnProperty","setContrast","utils","defined","enableRenderingOptimization","singlePointAltitudeRanges","mid","high","singlePointAltitudeRangeMode","getSinglePointAltitudeRangeMode","navigator","navigation","enable","setLockState","selection","selectFeatures","failed","capture","screenshot","dataUrl","state","destroy","shutdown","isV2Core","wwd","layers","pixelSize","drawing","editing","dragging","lastInteractionEvent","lockState","MapMotionLockEnum","UNLOCKED","lastRender","selectionStyle","scale","lineColor","fillColor","autoPanning","step","up","down","left","right","labelStyles","V","L","S","AA","AB","AC","H","M","T","T1","CN","C","F","G","H1","H2","J","K","N","P","W","W1","X","Y","Z","constants","SinglePointAltitudeRangeMode","LOW_RANGE","empSelections","optimizationMapMoveEpsilon","EPSILON7","lastNavigator","shapesInViewArea","prototype","blackContrastLayer","SurfaceSector","Sector","FULL_SPHERE","attributes","interiorColor","Color","drawOutline","whiteContrastLayer","contrastLayer","RenderableLayer","pickEnabled","addRenderable","goToAnimator","GoToAnimator","dragRecognizer","DragRecognizer","canvas","event","drag","eventClass","eventHandler","addEventListener","extent","isNaN","alt","Location","greatCircleDistance","centerLat","centerLon","lookAtLocation","helpers","copyObject","configProperties","midDistanceThreshold","farDistanceThreshold","far","brightness","empOverlay","layer","data","EmpLayer","rootOverlayId","id","redraw","featureKey","result","getLayer","featureKeys","removeFeatureSelection","Position","travelTime","globeMoveTime","goTo","_completeLookAtMotion","callback","_callback","EmpFeature","editors","EditorController","updateFeature","parentCoreId","removeFeatureById","messge","selected","selectedFeature","select","storeFeatureSelection","enableLayer","subLayer","layerExists","enabled","subLayers","getSubLayer","layerType","ARCGIS_93_REST_LAYER","BING_LAYER","IMAGE_LAYER","OSM_LAYER","TMS_LAYER","WMS_LAYER","WMTS_LAYER","wmsLayer","EmpWMSLayer","isFeatureSelected","getFeatureSelection","getSelections","isMultiPointPresent","multiPointCollection","getMultiPoint","storeMultiPoint","multiPoint","removeMultiPoint","isAirspacePresent","airspaceCollection","getAirspace","storeAirspace","airspace","removeAirspace","getSinglePoints","singlePointCollection","isSinglePointPresent","getSinglePoint","storeSinglePoint","singlePoint","removeSinglePoint","getSinglePointCount","Object","keys","isSinglePointIdOnHoldPresent","singlePointCollectionIdOnHold","getSinglePointIdOnHold","singlePointCollectionOnHold","storeSinglePointIdOnHold","singlePointId","removeSinglePointIdOnHold","getSinglePointsIdOnHold","getSinglePointsIdOnHoldCount","styles","style","includes","updateFeatureLabelStyle","triggerRenderUpdate","contrast","renderables","WHITE_CONTRAST","BLACK_CONTRAST","lock","spinGlobe","vertical","horizontal","setTimeout","drawFrame","toDataURL","viewport","linearLocation","isMapMoving","equalsEpsilon","pickShapesInViewRegion","shapes","canvasCoordinates","boundRectangle","Rectangle","pickShapesInRegion","isMilStdMultiPointShapeInViewRegion","empFeature","p","inView","coordinate","description","parentId","_overlay","defineProperty","enumerable","_layer","addFeature","isFeaturePresent","shape","type","FeatureType","RENDERABLE","addFeatures","addFeatureChild","entity","childEntity","isFeatureChildPresent","parentFeature","childrenFeatureKeys","allocateFeatureChild","parentEntity","addSubLayer","isSubLayerPresent","isLayerEmpty","featuresLength","subOverlaysLength","getFeature","isFeaturePresentById","isPrimitive","PRIMITIVE","PRIMITIVE_COLLECTION","isDataSource","DATA_SOURCE","getFeatures","getSubLayers","removeFeatures","removeFeature","removeFeatureSelections","showFeatures","showFeature","oMultiPoint","childrenFeatureId","childrenEntity","featureType","ENTITY","show","billboard","reRenderBillboardRequired","path","polyline","polygon","label","rectangle","empCesium","COMPOUND_ENTITY","airspaceLabelPresent","airspaceLabel","get","oAirspace","oSinglePoint","removeSubLayers","showSubLayers","clearLayer","LayerType","showLayer","isVisible","deallocateFeatureChild","worldwind","removeRenderable","renderable","deallocateFeature","allocateFeature","featureChildrenLength","childrenFeatures","getFeatureChildrenEntityArray","index","childrenFeature","clearFeature","removeFeatureChild","featureChildrenEntityArray","removeSubLayer","subOverlay","SubLayers","removeSubLayerById","subLayersLength","layerNames","url","_wms","activeLayers","join","useProxy","global","configuration","urlProxy","service","sector","levelZeroDelta","numLevels","size","timeString","_wmsLayer","WmsLayer","_id","_altitudeMode","CLAMP_TO_GROUND","altMode","shapesCount","i","altitudeMode","_selected","highlighted","addShapes","primitives","Array","isArray","userProperties","primitive","clearShapes","MAX_HEIGHT","globeWasMoving","globeWasZooming","extentBufferFactor","USE_DATA_SOURCE","NO_PANNING","METERS_PER_INCH","SCALE_LINE_LENGTH","propertyDefaults","FILL_COLOR_HEX","LINE_COLOR_HEX","LINE_WIDTH","selectionProperties","COLOR_HEX","WIDTH","SCALE","GROUND_PRIMITIVE","OVERLAY_LAYER","TERRAIN_LAYER","EntityType","BILLBOARD","BOX","CORRIDOR","CYLINDER","DESCRIPTION","ELLIPSE","ELLIPSOID","LABEL","MODEL","ORIENTATION","PATH","POLYGON","POLYLINE","POLYLINE_VOLUME","POSITION","RECTANGLE","VIEW_FROM","WALL","KML","MultiPointRenderType","JSON","GEOJSON","DATA_URL","CANVAS","CANVAS_LABEL_ONLY","SVG","SVG_LABEL_ONLY","MID_RANGE","HIGHEST_RANGE","RendererWorker","A","B","D","LabelStyle","REQUIRED_LABELS","COMMON_LABELS","ALL_LABELS","AllLabels","RendererSettings","standard","Symbology_2525Bch2_USAS_13_14","Symbology_2525C","modifierLookup","QUANTITY","REDUCED_OR_REINFORCED","STAFF_COMMENTS","ADDITIONAL_INFO_1","ADDITIONAL_INFO_2","ADDITIONAL_INFO_3","EVALUATION_RATING","COMBAT_EFFECTIVENESS","SIGNATURE_EQUIPMENT","HIGHER_FORMATION","HOSTILE","IFF_SIF","DIRECTION_OF_MOVEMENT","OFFSET_INDICATOR","UNIQUE_DESIGNATOR_1","UNIQUE_DESIGNATOR_2","EQUIPMENT_TYPE","DATE_TIME_GROUP","DATE_TIME_GROUP_2","ALTITUDE_DEPTH","LOCATION","SPEED","SPECIAL_C2_HEADQUARTERS","DISTANCE","AZIMUTH","FILL_COLOR","LINE_COLOR","TEXT_COLOR","X_OFFSET","X_UNITS","Y_OFFSET","Y_UNITS","NAME","STANDARD","highAltitudeRangeImage","highRangeImageRed","btoa","highRangeImageBlue","highRangeImageGreen","highRangeImageYellow","getEventCoordinates","clientX","clientY","screenX","screenY","updateModifierLabels","iconLabels","iconPixelSize","mod","modifiedModifiers","property","convertModifierStringTo2525","modifiers","showModLabels","standardModifiers","sModifier","modValue","parse","stringify","Modifiers","convertSymbolStandardToRendererFormat","checkForRequiredModifiers","item","symbolCode","oAM","oAN","basicSymbolCode","symbolDef","lonDistance","overrides","armyc2","c2sd","renderer","utilities","SymbolUtilities","getBasicSymbolID","checkSymbolStandard","SymbolDefTable","getSymbolDef","distance","azimuth","drawCategory","DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE","slice","DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE","splice","newVal","DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE","DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE","DRAW_CATEGORY_LINE","coord0","coord1","pointCartographic0","pointCartographic1","dist","modifiersCopy","toLowerCase","featureMilStdVersionType","MILSTD_2525C","MILSTD_2525B","indexOf","log","_hex6ToRGBA","hex","replace","r","g","b","parseInt","substring","red","green","blue","alpha","_hex8ToRGBA","a","hexToRGBA","normalize","newHex","normalizeRGBAColor","color","normalColor","assign","toString","boundsWidth","boundsHeight","selectHighAltitudeRangeImage","affiliationLetter","highScaleImageYellow","CameraAltitude","relativeEpsilon","absoluteEpsilon","defaultValue","absDiff","abs","EPSILON1","EPSILON2","EPSILON3","EPSILON4","EPSILON5","EPSILON6","EPSILON8","EPSILON9","EPSILON10","EPSILON11","EPSILON12","EPSILON13","EPSILON14","EPSILON15","EPSILON16","EPSILON17","EPSILON18","EPSILON19","EPSILON20","GRAVITATIONALPARAMETER","SOLAR_RADIUS","LUNAR_RADIUS","SIXTY_FOUR_KILOBYTES","sign","signNotZero","primitiveBuilders","createTextAttributes","textColor","TextAttributes","offset","Offset","OFFSET_FRACTION","depthTest","labelStyle","fontColor","family","font","fontFamily","justification","horizontalAlignment","labelAlign","fontSize","createShapeAttributes","highlightAttributes","selectedLineColor","selectedFillColor","selectedLabelColor","ShapeAttributes","GEO_MIL_SYMBOL","GEO_POINT","PlacemarkAttributes","iconUrl","imageSource","baseUrl","labelAttributes","imageScale","imageColor","YELLOW","GEO_TEXT","GEO_PATH","GEO_POLYGON","strokeStyle","strokeColor","outlineColor","BLACK","drawInterior","strokeWidth","lineWidth","outlineWidth","outlineStippleFactor","stippleFactor","outlineStipplePattern","stipplePattern","constructAirControlMeasure","primitivePolygon","boundaries","len","maxAlt","Polygon","ABSOLUTE","extrude","constructSurfaceCircle","circlePrimitive","SurfaceCircle","constructSurfaceEllipse","ellipsePrimitive","SurfaceEllipse","constructSurfacePolyline","pathPrimitive","locations","SurfacePolyline","constructSurfacePolylineFromGeoJSON","geoJSON","polylinePrimitive","lineOpacity","constructPlacemark","placemark","eyeDistanceScaling","Placemark","alwaysOnTop","constructSurfacePolygon","polygonPrimitive","boundaryLen","j","numBounds","subBoundary","SurfacePolygon","constructSurfacePolygonFromGeoJSON","geometry","constructSurfaceRectangle","rectPrimitive","SurfaceRectangle","constructText","textPrimitive","GeographicText","constructTextFromGeoJSON","selectedColor","_constructSinglePointMilStdSymbol","imageInfo","imageCenter","imageBounds","imageOffset","selectedImage","selectedModifiers","drawLeaderLine","leaderLineAttributes","RED","WHITE","substr","MilStdIconRenderer","Render","getCenterPoint","getImageBounds","toDataUrl","LINECOLOR","FILLCOLOR","_constructMultiPointMilStdFeature","componentFeature","lineCount","subGeoJSON","bbox","featureCoords","positions","split","trim","sec","web","SECWebRenderer","RenderSymbol","wasClipped","strokeWeight","processModifiers","enhancedModifiers","override","lowRangeMode","constructMilStdSymbol","concat","asyncPlotKMLFeature","kmlFilePromise","kmlLayer","wwFeature","encodeURIComponent","KmlFile","then","kmlFile","buildShapes","empLayer","throttle","fn","threshold","scope","last","deferTimer","context","now","Date","arguments","clearTimeout","apply","viewEventType","ViewChange","callRenderer","singlePointAltitudeRangeChanged","iconLabelOption","isHighAltitudeRangeImage","_imageSource","extractFeatureFromEvent","mouseEvent","empEventingArgs","obj","pickList","pick","objects","isTerrain","userObject","target","mouse","click","clickEvent","Pointer","EventType","SINGLE_CLICK","dblclick","dblClickEvent","DBL_CLICK","wheel","wheelDeltaY","preventDefault","NO_MOTION","NO_ZOOM_NO_PAN","NO_ZOOM","mousedown","mousedownEvent","MOUSEDOWN","mouseup","mouseupEvent","MOUSEUP","mousemove","coords","MOVE","element","elementBounds","smartAreaBuffer","pan","buttons","NO_PAN","SMART_MOTION","srcElement","originalTarget","getBoundingClientRect","offsetX","offsetY","touch","touchstart","touches","touchend","touchcancel","touchmove","began","changed","ended","pointer","pointerdown","pointerup","pointermove"],"mappings":"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","file":"emp3-worldwind.min.js","sourcesContent":["var EMPWorldWind = window.EMPWorldWind || {};\nvar emp = window.emp || {};\nemp.engineDefs = emp.engineDefs || {};\n\n/**\n * @classdesc EMP3 WorldWind Map Engine Interface\n *\n * @class Instantiates a WorldWind map for EMP\n * @param args\n * @returns {engineInterface}\n */\nemp.engineDefs.worldWindMapEngine = function(args) {\n\n  var empMapInstance = args.mapInstance;\n  /** @type EMPWorldWind.map# */\n  var empWorldWind;\n\n  var engineInterface = emp.map.createEngineTemplate(),\n    mapEngineExposed = engineInterface;\n\n  engineInterface.implementation.displayName = \"WorldWind Map Engine\";\n  engineInterface.implementation.version = \"1.0.0\";\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.mapType.type2_5D = true;\n  engineInterface.capabilities.mapType.type3D = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.draw = true;\n  engineInterface.capabilities.formats.GEOJSON_BASIC.edit = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.plot = true;\n  engineInterface.capabilities.formats.GEOJSON_FULL.edit = true;\n  engineInterface.capabilities.formats.WMS.version_1_1 = true;\n  engineInterface.capabilities.formats.WMS.version_1_3 = true;\n  engineInterface.capabilities.formats.WMS.elevationData = true;\n  engineInterface.capabilities.formats.KML_BASIC.plot = true;\n  engineInterface.capabilities.formats.KML_BASIC.draw = true;\n  engineInterface.capabilities.formats.KML_BASIC.edit = true;\n  engineInterface.capabilities.formats.KML_COMPLEX.plot = true;\n  engineInterface.capabilities.formats.IMAGE.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525B.edit = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.plot = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.draw = true;\n  engineInterface.capabilities.formats.MILSTD.version2525C.edit = true;\n  engineInterface.capabilities.formats.AIRSPACE.plot = true;\n  engineInterface.capabilities.formats.AIRSPACE.draw = true;\n  engineInterface.capabilities.formats.AIRSPACE.edit = true;\n  engineInterface.capabilities.formats.AOI.plot = true;\n  engineInterface.capabilities.formats.AOI.draw = true;\n  engineInterface.capabilities.formats.AOI.edit = true;\n  engineInterface.capabilities.settings.milstd.iconSize = true;\n  engineInterface.capabilities.settings.milstd.labelOption = true;\n  engineInterface.requirements.wmsCapabilities = true;\n  engineInterface.capabilities.projection.flat = false;\n\n  /**\n   * Initialization\n   * @param {EMPWorldWind.map} empWorldWindInstance\n   */\n  engineInterface.initialize.succeed = function(empWorldWindInstance) {\n    // Add initialization code here\n    try {\n      empWorldWind = empWorldWindInstance;\n      empWorldWind.mapEngineExposed = mapEngineExposed;\n      emp.map.engineDirect = {name: \"worldwind\", ref: empWorldWind};\n\n      // Notify application that the map is ready to receive data\n      empMapInstance.eventing.StatusChange({\n        status: emp.map.states.READY\n      });\n    }\n    catch (err) {\n      window.console.error(\"Error initializing WorldWind \", err);\n    }\n  };\n\n  /**\n   * Indicates a failed loading\n   */\n  engineInterface.initialize.fail = function() {\n    empMapInstance.eventing.StatusChange({\n      status: emp.map.states.MAP_INSTANCE_INIT_FAILED\n    });\n  };\n\n  /**\n   * @todo drop this functionality into the map itself and expose a simpler call\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.set = function(transaction) {\n    var args, altitude, bottomLeft, topRight, feature, bufferScale,\n      t1, t2,\n      toRad = Math.PI / 180.0; // save a few divisions later\n\n    switch (transaction.items[0].globalType) {\n      case \"view\":\n        if (transaction.items[0].location) {\n          // Set camera\n          args = {\n            latitude: transaction.items[0].location.lat,\n            longitude: transaction.items[0].location.lon,\n            altitude: transaction.items[0].altitude,\n            tilt: transaction.items[0].tilt,\n            roll: transaction.items[0].roll,\n            heading: transaction.items[0].heading\n          };\n        }\n        else if (transaction.items[0].bounds) {\n          // Zoom to overlay\n\n          // Express lat/lon as radians\n          bottomLeft = {\n            lat: transaction.items[0].bounds.west * toRad,\n            lon: transaction.items[0].bounds.south * toRad\n          };\n\n          topRight = {\n            lat: transaction.items[0].bounds.east * toRad,\n            lon: transaction.items[0].bounds.north * toRad\n          };\n\n          t1 = Math.pow(Math.sin((topRight.lat - bottomLeft.lat) / 2), 2);\n          t2 = Math.pow(Math.sin((topRight.lon - bottomLeft.lon) / 2), 2);\n\n          // Haversine formula\n          // TODO see if we can replace this with WorldWind functionality\n          altitude = 2 * WorldWind.EARTH_RADIUS * Math.asin(Math.sqrt(t1 + Math.cos(topRight.lat) * Math.cos(bottomLeft.lat) * t2));\n\n          args = {\n            latitude: (transaction.items[0].bounds.north + transaction.items[0].bounds.south) / 2,\n            longitude: (transaction.items[0].bounds.east + transaction.items[0].bounds.west) / 2,\n            altitude: altitude,\n            tilt: 0,\n            roll: 0,\n            heading: 0\n          };\n        }\n        break;\n      case \"feature\":\n        bufferScale = 2.25; // Assume conic view from the camera\n        feature = transaction.items[0];\n        switch (feature.format) {\n          case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n            altitude = feature.properties.radius * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n            altitude = Math.max(feature.properties.semiMajor, feature.properties.semiMinor) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n            altitude = Math.max(feature.properties.width, feature.properties.height) * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n            altitude = feature.properties.width * bufferScale;\n            break;\n          case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO compute bounding box diagonal distance\n          default:\n            altitude = 10000; // Default to 10000m\n        }\n\n        args = {\n          latitude: transaction.items[0].coordinates[1],\n          longitude: transaction.items[0].coordinates[0],\n          altitude: altitude,\n          tilt: 0,\n          roll: 0,\n          heading: 0\n        };\n        break;\n      default:\n        transaction.failures.push(transaction.items[0]);\n    }\n\n    // Check if we are animating\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n\n        // If we animated update the returned values\n        transaction.items[0].location = {\n          lat: empWorldWind.getCenter().latitude,\n          lon: empWorldWind.getCenter().longitude\n        };\n        transaction.items[0].bounds = empWorldWind.getBounds();\n\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n\n    // Notify start of movement\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    empWorldWind.centerOnLocation(args);\n\n    // Set initial transaction return values, to be overwritten if the move is animated\n    transaction.items[0].location = {\n      lat: empWorldWind.getCenter().latitude,\n      lon: empWorldWind.getCenter().longitude\n    };\n    transaction.items[0].bounds = empWorldWind.getBounds();\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.lookAt.set = function(transaction) {\n    var args = {\n      latitude: transaction.items[0].latitude,\n      longitude: transaction.items[0].longitude,\n      altitude: transaction.items[0].altitude,\n      range: transaction.items[0].range,\n      tilt: transaction.items[0].tilt,\n      heading: transaction.items[0].heading\n    };\n\n    if (transaction.items[0].animate === true) {\n      transaction.pause();\n\n      args.animate = true;\n      args.animateCB = function() {\n        transaction.run();\n        // Notify movement ended\n        EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n      };\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(empWorldWind, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n\n    empWorldWind.lookAt(args);\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.add = function(transaction) {\n    var rc,\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.addLayer(overlay);\n\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message,\n          level: emp.typeLibrary.Error.level.MINOR\n        }));\n      }\n    });\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.overlay.remove = function(transaction) {\n    var rc = {},\n      failList = [];\n\n    emp.util.each(transaction.items, function(overlay) {\n      rc = empWorldWind.removeLayer(overlay.overlayId);\n      if (!rc.success) {\n        failList.push(new emp.typeLibrary.Error({\n          coreId: overlay.coreId,\n          message: rc.message\n        }));\n      }\n    }.bind(this));\n\n    transaction.fail(failList);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.add = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.addWMS(wms);\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.wms.remove = function(transaction) {\n    emp.util.each(transaction.items, function(wms) {\n      empWorldWind.removeWMS(wms);\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.add = function(transaction) {\n    var feature,\n      itemsCount = transaction.items.length;\n\n    // Pause the transaction\n    transaction.pause();\n\n    while (itemsCount) {\n      // Note pre-decrement\n      feature = transaction.items[--itemsCount];\n\n      empWorldWind.plotFeature(feature, function(featureCount, cbArgs) {\n        if (!cbArgs.success) {\n          transaction.fail(new emp.typeLibrary.Error({\n            feature: cbArgs.feature\n          }));\n        }\n\n        // All items have been processed\n        if (featureCount === 0) {\n          transaction.run();\n        }\n      }.bind(this, itemsCount));\n    }\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.feature.remove = function(transaction) {\n    var rc;\n    emp.util.each(transaction.items, function(feature) {\n      rc = empWorldWind.unplotFeature(feature);\n      if (!rc.success) {\n        transaction.fail(new emp.typeLibrary.Error({\n          message: rc.message\n        }));\n      }\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   * @deprecated\n   */\n  engineInterface.settings.mil2525.icon.labels.set = function(transaction) {\n    empWorldWind.setLabelStyle(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.view.getLatLonFromXY = function(transaction) {\n    var pickPoint = new WorldWind.Vec2(transaction.items[0].x, transaction.items[0].y);\n    var terrainObject = empWorldWind.worldWindow.pickTerrain(pickPoint).terrainObject();\n    transaction.items[0].lat = terrainObject ? terrainObject.position.latitude : undefined;\n    transaction.items[0].lon = terrainObject ? terrainObject.position.longitude : undefined;\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.visibility.set = function(transaction) {\n    emp.util.each(transaction.items, function(feature) {\n      if (feature.featureId in empWorldWind.features) {\n        empWorldWind.features[feature.featureId].setVisible(feature.visible);\n      }\n    }.bind(this));\n    empWorldWind.refresh();\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.map.config = function(transaction) {\n    var bRangeChanged;\n    // Iterate through each transaction item, check for properties and apply them\n    emp.util.each(transaction.items, function(config) {\n      var prop, value;\n      for (prop in config) {\n        if (config.hasOwnProperty(prop)) {\n          // Skip meta data fields\n          if (prop === \"messageId\") {\n            continue;\n          }\n\n          value = config[prop];\n\n          switch (prop) {\n            case \"brightness\":\n              empWorldWind.setContrast(value);\n              break;\n            case \"milStdIconLabels\":\n              empWorldWind.setLabelStyle(value);\n              break;\n            case \"renderingOptimization\":\n              if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.enableRenderingOptimization)) {\n                bRangeChanged = true;\n                empWorldWind.enableRenderingOptimization = value;\n              }\n              break;\n            case \"midDistanceThreshold\":\n              if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.mid)) {\n                bRangeChanged = true;\n                empWorldWind.singlePointAltitudeRanges.mid = value;\n              }\n              break;\n            case \"farDistanceThreshold\":\n              if (EMPWorldWind.utils.defined(value) && (value !== empWorldWind.singlePointAltitudeRanges.high)) {\n                bRangeChanged = true;\n                empWorldWind.singlePointAltitudeRanges.high = value;\n                //empCesium.singlePointAltitudeRangeMode = cesiumEngine.utils.getSinglePointAltitudeRangeMode(empCesium.cameraAltitude, empCesium.singlePointAltitudeRanges);\n                //empCesium.processOnRangeChangeSinglePoints();\n              }\n              break;\n            default:\n              transaction.fail(new emp.typeLibrary.Error({\n                message: 'Config property ' + prop + ' is not supported by this engine'\n              }));\n          }\n\n          if (bRangeChanged) {\n            empWorldWind.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(empWorldWind.worldWindow.navigator.range, empWorldWind.singlePointAltitudeRanges);\n            // force a render update when the altitude range changes\n            empWorldWind.refresh();\n          }\n        }\n      }\n    }.bind(this));\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.navigation.enable = function(transaction) {\n    empWorldWind.setLockState(transaction.items[0]);\n  };\n\n  /**\n   *\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.selection.set = function(transaction) {\n    var rc = empWorldWind.selectFeatures(transaction.items);\n    transaction.failures = rc.failed;\n  };\n\n  /**\n   * @param {emp.typeLibrary.Transaction} transaction\n   */\n  engineInterface.capture.screenshot = function(transaction) {\n    return transaction.items[0].dataUrl = empWorldWind.screenshot();\n  };\n\n  /**\n   * Destroys the current engine\n   */\n  engineInterface.state.destroy = function() {\n    if (empWorldWind) {\n      empWorldWind.shutdown();\n      empWorldWind = undefined;\n    }\n  };\n\n  // return the engineInterface object as a new engineTemplate instance\n  return engineInterface;\n};\n","/* global WorldWind */\n\n/**\n * @namespace\n */\nvar EMPWorldWind = {};\nEMPWorldWind.isV2Core = false;\n\n/**\n * @classdesc The main interface for interacting with NASA WebWorldWind. Any interaction with the WorldWindow will occur\n * in this class.\n *\n * @class\n * @param {WorldWind.WorldWindow} wwd\n */\nEMPWorldWind.map = function(wwd) {\n  /**\n   * @type {WorldWind.WorldWindow}\n   */\n  this.worldWindow = wwd;\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpLayer>} */\n  this.layers = {};\n\n  /** @type {Object.<string, EMPWorldWind.data.EmpFeature>} */\n  this.features = {};\n\n  /**\n   * This holds the state of the instance\n   * @memberof EMPWorldWind.map#\n   */\n  this.state = {\n    /**\n     * Pixel size\n     */\n    pixelSize: 1,\n    /**\n     * Whether the map is in drawing mode\n     */\n    drawing: false,\n    /**\n     * Whether the map is in editing mode\n     */\n    editing: false,\n    /**\n     * Whether we are dragging\n     */\n    dragging: false,\n    /**\n     * Placeholder for the last detected mouse move/touch/pointer event\n     */\n    lastInteractionEvent: undefined,\n    /**\n     * Lock state\n     */\n    lockState: emp3.api.enums.MapMotionLockEnum.UNLOCKED,\n    /**\n     * Object for holding state to compute when MilStdSymbols should be re-rendered\n     */\n    lastRender: {\n      bounds: {\n        north: 0,\n        south: 0,\n        east: 0,\n        west: 0\n      },\n      altitude: 0\n    },\n    /**\n     * Default selection style\n     * @type SelectionStyle\n     */\n    selectionStyle: {\n      scale: 1,\n      lineColor: \"#FFFF00\",\n      fillColor: undefined\n    },\n    /**\n     * Object for describing autoPanning behavior\n     */\n    autoPanning: {\n      step: 0.5,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    },\n    /**\n     * Label styles for the renderer\n     */\n    labelStyles: {\n      \"V\": false,\n      \"L\": false,\n      \"S\": false,\n      \"AA\": false,\n      \"AB\": false,\n      \"AC\": true,\n      \"H\": false,\n      \"M\": false,\n      \"T\": false,\n      \"T1\": false,\n      \"CN\": false,\n      \"C\": false,\n      \"F\": false,\n      \"G\": false,\n      \"H1\": false,\n      \"H2\": false,\n      \"J\": false,\n      \"K\": false,\n      \"N\": false,\n      \"P\": false,\n      \"W\": false,\n      \"W1\": false,\n      \"X\": false,\n      \"Y\": false,\n      \"Z\": false\n    }\n  };\n\n  // Optimization for mil standard  single points.\n  /**\n   * Object for holding render optimization params\n   */\n  this.singlePointAltitudeRanges = {};\n  /**\n   * Mid-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.mid = 600000; // default\n  /**\n   * High-range optimization altitude\n   * @default\n   */\n  this.singlePointAltitudeRanges.high = 1200000; // default\n  /**\n   * Current range mode\n   */\n  this.singlePointAltitudeRangeMode = EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n\n  /**\n   * Current set of selected objects\n   */\n  this.empSelections = {};\n  this.optimizationMapMoveEpsilon = EMPWorldWind.Math.EPSILON7;\n  this.lastNavigator = {};\n  this.shapesInViewArea;\n  this.bounds;\n};\n\n// typedefs ============================================================================================================\n/**\n * @typedef {object} SelectionStyle\n * @property {number} scale\n * @property {string|undefined} lineColor\n * @property {string|undefined} fillColor\n */\n//======================================================================================================================\n\n/**\n * Creates the initial layers\n * @param {object} args\n * @param {Bounds} [args.extent]\n * @param {object} [args.configProperties]\n * @param {emp.map} args.mapInstance\n */\nEMPWorldWind.map.prototype.initialize = function(args) {\n  /**\n   * @memberof EMPWorldWind.map#\n   * @type {emp.map}\n   */\n  this.empMapInstance = args.mapInstance;\n\n  // Create the contrast layers\n  var blackContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n  blackContrastLayer.attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0.0);\n  blackContrastLayer.attributes.drawOutline = false;\n\n  var whiteContrastLayer = new WorldWind.SurfaceSector(WorldWind.Sector.FULL_SPHERE, null);\n  whiteContrastLayer.attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0.0);\n  whiteContrastLayer.attributes.drawOutline = false;\n\n  this.contrastLayer = new WorldWind.RenderableLayer('contrast layer');\n  this.contrastLayer.pickEnabled = false;\n  this.worldWindow.addLayer(this.contrastLayer);\n\n  this.contrastLayer.addRenderable(whiteContrastLayer);\n  this.contrastLayer.addRenderable(blackContrastLayer);\n\n  // Create the goTo manipulator\n  /** @member {WorldWind.GoToAnimator} */\n  this.goToAnimator = new WorldWind.GoToAnimator(this.worldWindow);\n\n  // Register drag event handlers\n  /** @member {WorldWind.DragRecognizer} */\n  this.dragRecognizer = new WorldWind.DragRecognizer(this.worldWindow.canvas, function(event) {\n    if (event.state in EMPWorldWind.eventHandlers.drag) {\n      EMPWorldWind.eventHandlers.drag[event.state].call(this, event);\n    }\n  }.bind(this));\n\n  // Register DOM event handlers\n  // var throttleValue = 50; // throttle on event calls in ms\n  var eventClass, eventHandler;\n  for (eventClass in EMPWorldWind.eventHandlers) {\n    if (EMPWorldWind.eventHandlers.hasOwnProperty(eventClass)) {\n      eventClass = EMPWorldWind.eventHandlers[eventClass];\n      for (eventHandler in eventClass) {\n        if (eventClass.hasOwnProperty(eventHandler)) {\n\n          // TODO remove this once throttling works again\n          this.worldWindow.addEventListener(eventHandler, eventClass[eventHandler].bind(this));\n\n          // TODO fix throttling is getting the way of event interception, affecting maplock\n          // this.worldWindow.addEventListener(eventHandler,\n          //   EMPWorldWind.eventHandlers.throttle(eventClass[eventHandler].bind(this), throttleValue, this)\n          // );\n        }\n      }\n    }\n  }\n\n  // If an initial extent is passed in set the view\n  if (args.extent) {\n    if (!isNaN(args.extent.north) && !isNaN(args.extent.south) && !isNaN(args.extent.east) && !isNaN(args.extent.west)) {\n      // Get approximate height from the width of the extent\n      var alt = Math.PI * WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n          new WorldWind.Location(args.extent.north, args.extent.west),\n          new WorldWind.Location(args.extent.south, args.extent.east));\n\n      this.centerOnLocation({\n        latitude: (args.extent.north + args.extent.south) / 2,\n        longitude: (args.extent.east + args.extent.west) / 2,\n        altitude: alt\n      });\n    }\n    else if (!isNaN(args.extent.centerLat) && !isNaN(args.extent.centerLon)) {\n      // Arbitrarily use 1e7 as altitude\n      this.centerOnLocation({\n        latitude: args.extent.centerLat,\n        longitude: args.extent.centerLon,\n        altitude: 1e7\n      });\n    }\n  }\n\n  if (this.worldWindow.navigator) {\n    this.lastNavigator.range = this.worldWindow.navigator.range;\n    this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n    this.lastNavigator.roll = this.worldWindow.navigator.roll;\n    this.lastNavigator.heading = this.worldWindow.navigator.heading;\n    this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n  }\n\n\n  // Update any other config properties passed in\n  if (EMPWorldWind.utils.defined(args.configProperties.midDistanceThreshold)) {\n    this.singlePointAltitudeRanges.mid = args.configProperties.midDistanceThreshold;\n  }\n\n  if (EMPWorldWind.utils.defined(args.configProperties.farDistanceThreshold)) {\n    this.singlePointAltitudeRanges.far = args.configProperties.farDistanceThreshold;\n  }\n\n  if (EMPWorldWind.utils.defined(args.configProperties.brightness)) {\n    this.setContrast(args.configProperties.brightness);\n  }\n\n  // Trigger an initial camera update to update EMP\n  EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n}\n;\n\n/**\n *\n * @param {emp.typeLibrary.Overlay} empOverlay\n * @returns {{success: boolean, message: string}}\n */\nEMPWorldWind.map.prototype.addLayer = function(empOverlay) {\n  var layer,\n    rc = {\n      success: false,\n      message: ''\n    };\n\n  if (empOverlay.overlayId in this.layers) {\n    rc = {\n      success: false,\n      message: \"An overlay with this id (\" + empOverlay.overlayId + \") already exists\"\n    };\n    return rc;\n  }\n\n  // Create the layer\n  layer = new EMPWorldWind.data.EmpLayer(empOverlay);\n  this.rootOverlayId = empOverlay.overlayId;\n  this.worldWindow.addLayer(layer.layer);\n\n  // Register the layer\n  this.layers[layer.id] = layer;\n\n  // Update the display\n  this.worldWindow.redraw();\n\n  rc.success = true;\n\n  return rc;\n};\n\n/**\n *\n * @param {emp.typeLibrary.Overlay | EMPWorldWind.data.EmpLayer} layer\n * @returns {{success: boolean, message: string}}\n */\nEMPWorldWind.map.prototype.removeLayer = function(layer) {\n  var featureKey, id,\n    result = {\n      success: false,\n      message: \"\"\n    };\n\n  id = layer.id || layer.coreId;\n  layer = this.getLayer(id);\n  if (layer) {\n    for (featureKey in layer.featureKeys) {\n      if (layer.featureKeys.hasOwnProperty(featureKey)) {\n        this.removeFeatureSelection(featureKey);\n      }\n    }\n\n    // Update the display\n    this.worldWindow.removeLayer(layer.layer);\n    this.worldWindow.redraw();\n\n    // Remove the record of the layer\n    delete this.layers[layer.id];\n\n    result.success = true;\n  }\n  else {\n    result.message = \"No layer found with the id \" + id;\n  }\n\n  return result;\n};\n\n/**\n *\n * @param {object} args\n * @param {number} args.latitude\n * @param {number} args.longitude\n * @param {number} [args.altitude]\n * @param {number} [args.tilt]\n * @param {number} [args.roll]\n * @param {number} [args.heading]\n * @param {boolean} [args.animate = false]\n * @param {function} [args.animateCB]\n */\nEMPWorldWind.map.prototype.centerOnLocation = function(args) {\n  var position;\n  if (typeof args.altitude === \"number\") {\n    position = new WorldWind.Position(args.latitude, args.longitude, args.altitude);\n  }\n  else {\n    position = new WorldWind.Location(args.latitude, args.longitude);\n  }\n\n  this.worldWindow.navigator.heading = args.heading || 0;\n  this.worldWindow.navigator.roll = args.roll || 0;\n  this.worldWindow.navigator.tilt = args.tilt || 0;\n\n  if (args.animate) {\n    this.goToAnimator.travelTime = EMPWorldWind.constants.globeMoveTime;\n    this.goToAnimator.goTo(position, args.animateCB || function() {\n      });\n  }\n  else {\n    this.goToAnimator.travelTime = 0;\n    this.goToAnimator.goTo(position);\n  }\n};\n\n/**\n *\n * @param {object} args\n * @param {number} args.latitude\n * @param {number} args.longitude\n * @param {number} [args.altitude] Currently unused by WorldWind\n * @param {number} args.range\n * @param {number} args.tilt\n * @param {number} args.heading\n * @param {boolean} [args.animate]\n * @param {function} [args.animateCB]\n */\nEMPWorldWind.map.prototype.lookAt = function(args) {\n  // substituting range for altitude for now\n  if (args.range !== 0) {\n    args.range = args.range || this.worldWindow.navigator.range;\n  }\n\n  var position = new WorldWind.Position(args.latitude, args.longitude, args.range);\n\n  /**\n   * @this {EMPWorldWind.map}\n   * @private\n   */\n  function _completeLookAtMotion() {\n    this.worldWindow.navigator.lookAtLocation.latitude = args.latitude;\n    this.worldWindow.navigator.lookAtLocation.longitude = args.longitude;\n\n    // lookAt does not support altitude in WorldWind yet\n    // this.worldWindow.navigator.lookAtLocation.altitude = args.altitude;\n\n    this.worldWindow.navigator.range = args.range;\n    this.worldWindow.navigator.tilt = args.tilt;\n    this.worldWindow.navigator.heading = args.heading;\n\n    if (args.animateCB) {\n      args.animateCB();\n    }\n\n    this.worldWindow.redraw();\n  }\n\n  this.goToAnimator.travelTime = args.animate ? EMPWorldWind.constants.globeMoveTime : 0;\n  this.goToAnimator.goTo(position, _completeLookAtMotion.bind(this));\n};\n\n/**\n * @param {emp.typeLibrary.Feature|EMPWorldWind.data.EmpFeature} feature\n * @param {PlotFeatureCB} [callback]\n */\nEMPWorldWind.map.prototype.plotFeature = function(feature, callback) {\n  /**\n   * Handle the async plotFeature method\n   * @private\n   */\n  var _callback = function(cbArgs) {\n    // Trigger an update for the display\n    this.worldWindow.redraw();\n\n    if (cbArgs.success) {\n      // Add the new feature to the global list of features\n      if (!(cbArgs.feature.id in this.features)) {\n        this.features[cbArgs.feature.id] = cbArgs.feature;\n      }\n    }\n\n    if (callback) {\n      callback(cbArgs);\n    }\n  }.bind(this);\n\n  // Check if we are using a EMPWorldWind feature internally\n  if (feature instanceof EMPWorldWind.data.EmpFeature) {\n    feature = feature.feature;\n  }\n\n  if (feature.featureId in this.features) {\n    // Update an existing feature\n    EMPWorldWind.editors.EditorController.updateFeature.call(this, this.features[feature.featureId], feature, _callback);\n  }\n  else {\n    // Plot a new feature\n    EMPWorldWind.editors.EditorController.plotFeature.call(this, feature, _callback);\n  }\n};\n/**\n * @callback PlotFeatureCB\n * @param {object} cbArgs\n * @param {EMPWorldWind.data.Feature} cbArgs.feature\n * @param {boolean} cbArgs.success\n * @param {string} [cbArgs.message]\n * @param {string} [cbArgs.jsError]\n */\n\n/**\n *\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.map.prototype.unplotFeature = function(feature) {\n  var layer,\n    rc = {\n      success: false,\n      message: \"\"\n    };\n\n  layer = this.getLayer(feature.parentCoreId);\n  if (layer) {\n    layer.removeFeatureById(feature.coreId);\n    this.removeFeatureSelection(feature.coreId);\n    this.worldWindow.redraw();\n    rc.success = true;\n  }\n  else {\n    rc.messge = 'Could not find the parent overlay';\n  }\n\n  return rc;\n};\n\n/**\n *\n * @param {emp.typeLibrary.Selection[]} empSelections\n */\nEMPWorldWind.map.prototype.selectFeatures = function(empSelections) {\n  var selected = [],\n    failed = [];\n\n  emp.util.each(empSelections, function(selectedFeature) {\n    var feature = this.features[selectedFeature.featureId];\n    if (feature) {\n      feature.selected = selectedFeature.select;\n      (feature.selected) ? this.storeFeatureSelection(selectedFeature.featureId) : this.removeFeatureSelection(selectedFeature.featureId);\n      //selected.push(feature);\n    }\n    else {\n      failed.push(selectedFeature.featureId);\n    }\n  }.bind(this));\n\n  this.worldWindow.redraw();\n\n  return {\n    success: selected.length !== 0,\n    selected: selected,\n    failed: failed\n  };\n};\n\n/**\n *\n * @param {string} id\n * @returns {EMPWorldWind.data.EmpLayer}\n */\nEMPWorldWind.map.prototype.getLayer = function(id) {\n  if (this.layers.hasOwnProperty(id)) {\n    return this.layers[id];\n  }\n};\n\n/**\n *\n * @param layer\n * @param enable\n */\nEMPWorldWind.map.prototype.enableLayer = function(layer, enable) {\n  var id, subLayer;\n  if (this.layerExists(layer)) {\n    layer.enabled = enable;\n    for (id in layer.subLayers) {\n      if (layer.subLayers.hasOwnProperty(id)) {\n        subLayer = layer.getSubLayer(id);\n        if (subLayer) {\n          this.enableLayer(subLayer, enable);\n        }\n      }\n    }\n\n    if ((layer.globalType === EMPWorldWind.constants.layerType.ARCGIS_93_REST_LAYER) || (layer.globalType === EMPWorldWind.constants.layerType.BING_LAYER) ||\n      (layer.globalType === EMPWorldWind.constants.layerType.IMAGE_LAYER) || (layer.globalType === EMPWorldWind.constants.layerType.OSM_LAYER) ||\n      (layer.globalType === EMPWorldWind.constants.layerType.TMS_LAYER) || (layer.globalType === EMPWorldWind.constants.layerType.WMS_LAYER)\n      || (layer.globalType === EMPWorldWind.constants.layerType.WMTS_LAYER)) {\n      if (!enable) {\n        this.worldWindow.removeLayer(layer);\n      }\n    }\n  }\n};\n\n/**\n *\n * @param layer\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.layerExists = function(layer) {\n  return this.layers.hasOwnProperty(layer.id);\n};\n\n/**\n * Adds a WMS layer to the map\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.map.prototype.addWMS = function(wms) {\n  var wmsLayer;\n\n  // Remove existing WMS if it already exists, we shall re-add it\n  wmsLayer = this.getLayer(wms.coreId);\n  if (wmsLayer) {\n    this.removeWMS(wmsLayer);\n  }\n\n  // Create the new layer\n  wmsLayer = new EMPWorldWind.data.EmpWMSLayer(wms);\n\n  this.layers[wmsLayer.id] = wmsLayer;\n  this.worldWindow.addLayer(wmsLayer.layer);\n  this.worldWindow.redraw();\n};\n\n/**\n * Removes a WMS layer from the map\n * @param {emp.typeLibrary.WMS|EMPWorldWind.data.EmpWMSLayer} wms\n */\nEMPWorldWind.map.prototype.removeWMS = function(wms) {\n  var layer,\n    id = wms.coreId || wms.id;\n\n  layer = this.getLayer(id);\n  if (layer) {\n    this.worldWindow.removeLayer(layer.layer);\n    delete this.layers[layer.id];\n    this.worldWindow.redraw();\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isFeatureSelected = function(id) {\n  return !!this.empSelections.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getFeatureSelection = function(id) {\n  if (this.isFeatureSelected(id)) {\n    return this.empSelections[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.map.prototype.storeFeatureSelection = function(id) {\n  this.empSelections[id] = id;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeFeatureSelection = function(id) {\n  if (this.empSelections.hasOwnProperty(id)) {\n    delete this.empSelections[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*|null}\n */\nEMPWorldWind.map.prototype.getSelections = function() {\n  return this.empSelections;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isMultiPointPresent = function(id) {\n  return !!this.multiPointCollection.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getMultiPoint = function(id) {\n  if (this.isMultiPointPresent(id)) {\n    return this.multiPointCollection[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param multiPoint\n */\nEMPWorldWind.map.prototype.storeMultiPoint = function(multiPoint) {\n  this.multiPointCollection[multiPoint.id] = multiPoint;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeMultiPoint = function(id) {\n  if (this.multiPointCollection.hasOwnProperty(id)) {\n    delete this.multiPointCollection[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isAirspacePresent = function(id) {\n  return !!this.airspaceCollection.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getAirspace = function(id) {\n  if (this.isAirspacePresent(id)) {\n    return this.airspaceCollection[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param airspace\n */\nEMPWorldWind.map.prototype.storeAirspace = function(airspace) {\n  this.airspaceCollection[airspace.id || airspace.coreId] = airspace;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeAirspace = function(id) {\n  if (this.airspaceCollection.hasOwnProperty(id)) {\n    delete this.airspaceCollection[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*|null}\n */\nEMPWorldWind.map.prototype.getSinglePoints = function() {\n  return this.singlePointCollection;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isSinglePointPresent = function(id) {\n  return !!this.singlePointCollection.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePoint = function(id) {\n  if (this.isSinglePointPresent(id)) {\n    return this.singlePointCollection[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param singlePoint\n */\nEMPWorldWind.map.prototype.storeSinglePoint = function(singlePoint) {\n  this.singlePointCollection[singlePoint.id] = singlePoint;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeSinglePoint = function(id) {\n  if (this.isSinglePointPresent(id)) {\n    delete this.singlePointCollection[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*|null}\n */\nEMPWorldWind.map.prototype.getSinglePoints = function() {\n  return this.singlePointCollection;\n};\n\n/**\n *\n * @returns {number}\n */\nEMPWorldWind.map.prototype.getSinglePointCount = function() {\n  if (this.defined(this.singlePointCollection)) {\n    return Object.keys(this.singlePointCollection).length;\n  }\n  else {\n    return 0;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.isSinglePointIdOnHoldPresent = function(id) {\n  return !!this.singlePointCollectionIdOnHold.hasOwnProperty(id);\n};\n\n/**\n *\n * @param id\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePointIdOnHold = function(id) {\n  if (this.isSinglePointIdOnHoldPresent(id)) {\n    return this.singlePointCollectionOnHold[id];\n  }\n\n  return null;\n};\n\n/**\n *\n * @param singlePointId\n */\nEMPWorldWind.map.prototype.storeSinglePointIdOnHold = function(singlePointId) {\n  this.singlePointCollectionIdOnHold[singlePointId] = singlePointId;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.map.prototype.removeSinglePointIdOnHold = function(id) {\n  if (this.isSinglePointIdOnHoldPresent(id)) {\n    delete this.singlePointCollectionIdOnHold[id];\n    return true;\n  }\n\n  return false;\n};\n\n/**\n *\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePointsIdOnHold = function() {\n  return this.singlePointCollectionIdOnHold;\n};\n\n/**\n *\n * @returns {*}\n */\nEMPWorldWind.map.prototype.getSinglePointsIdOnHoldCount = function() {\n  if (this.defined(this.singlePointCollectionIdOnHold)) {\n    return Object.keys(this.singlePointCollectionIdOnHold).length;\n  }\n  else {\n    return 0;\n  }\n};\n\n/**\n *\n * @param {Array} styles\n */\nEMPWorldWind.map.prototype.setLabelStyle = function(styles) {\n  var style, featureId, feature;\n  for (style in this.state.labelStyles) {\n    if (this.state.labelStyles.hasOwnProperty(style)) {\n      this.state.labelStyles[style] = styles.includes(style);\n    }\n  }\n\n  // TODO refresh only visible points and mark the rest as update when requested\n  for (featureId in this.features) {\n    if (this.features.hasOwnProperty(featureId)) {\n      feature = this.features[featureId];\n      EMPWorldWind.editors.EditorController.updateFeatureLabelStyle.call(this, feature);\n    }\n  }\n  this.worldWindow.redraw();\n};\n\n/**\n * Expose a refresh\n */\nEMPWorldWind.map.prototype.refresh = function() {\n  EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n  //var featureId, feature;\n\n  // for (featureId in this.features) {\n  //   if (this.features.hasOwnProperty(featureId)) {\n  //     feature = this.features[featureId];\n  //\n  //     // TODO check if it is visible first\n  //     //EMPWorldWind.editors.EditorController.updateRender.call(this, feature);\n  //   }\n  // }\n\n  // TODO trigger redraw if necessary only\n  this.worldWindow.redraw();\n};\n\n/**\n * Adjust the background contrast\n * @param {number} contrast Value from 0-100, 50 is default\n */\nEMPWorldWind.map.prototype.setContrast = function(contrast) {\n  if (contrast > 100) {\n    contrast = 100;\n  }\n  else if (contrast < 0) {\n    contrast = 0;\n  }\n\n  if (contrast >= 50) {\n    this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, (contrast - 50) / 50);\n    this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, 0);\n  }\n  else {\n    this.contrastLayer.renderables[EMPWorldWind.constants.WHITE_CONTRAST].attributes.interiorColor = new WorldWind.Color(1, 1, 1, 0);\n    this.contrastLayer.renderables[EMPWorldWind.constants.BLACK_CONTRAST].attributes.interiorColor = new WorldWind.Color(0, 0, 0, (50 - contrast) / 50);\n  }\n\n  this.worldWindow.redraw();\n};\n\n/**\n *\n * @param {emp.typeLibrary.Lock} lockState\n */\nEMPWorldWind.map.prototype.setLockState = function(lockState) {\n  this.state.lockState = lockState.lock;\n};\n\n/**\n * Spins the globe if autoPanning is enabled\n */\nEMPWorldWind.map.prototype.spinGlobe = function() {\n  var vertical = 0,\n    horizontal = 0;\n\n  var step = this.worldWindow.navigator.range / (WorldWind.EARTH_RADIUS);\n\n  if (this.state.autoPanning.up) {\n    vertical = step;\n  }\n  else if (this.state.autoPanning.down) {\n    vertical = -step;\n  }\n\n  if (this.state.autoPanning.left) {\n    horizontal = -step;\n  }\n  else if (this.state.autoPanning.right) {\n    horizontal = step;\n  }\n\n  var position = new WorldWind.Position(\n    this.worldWindow.navigator.lookAtLocation.latitude + vertical,\n    this.worldWindow.navigator.lookAtLocation.longitude + horizontal,\n    this.worldWindow.navigator.range);\n  this.goToAnimator.travelTime = 500; // TODO smooth the transition if this is getting called too often\n\n  if (this.state.autoPanning.up ||\n    this.state.autoPanning.left ||\n    this.state.autoPanning.down ||\n    this.state.autoPanning.right) {\n    this.goToAnimator.goTo(position);\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_IN_MOTION);\n    setTimeout(this.spinGlobe.bind(this), 250);\n  }\n  else {\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n  }\n};\n\n/**\n * Returns a data URI of the current view of the canvas\n * @todo Handle iconURL within Placemarks\n * @returns {string}\n */\nEMPWorldWind.map.prototype.screenshot = function() {\n  // This forces webgl to render which exposes current context for the canvas.toDataURL function\n  // Note: this is still lacking functionality as Placemarks are not rendered\n  this.worldWindow.drawFrame();\n  return this.worldWindow.canvas.toDataURL();\n};\n\n/**\n * Calculate the current bounds of the WorldWindow\n * @returns {Bounds}\n */\nEMPWorldWind.map.prototype.getBounds = function() {\n  var topRight, bottomLeft;\n\n  // Check the viewport corners\n  topRight = this.worldWindow.pickTerrain(new WorldWind.Vec2(this.worldWindow.viewport.width - 1, 1)).terrainObject();\n  bottomLeft = this.worldWindow.pickTerrain(new WorldWind.Vec2(1, this.worldWindow.viewport.height - 1)).terrainObject();\n\n  // If the corners don't contain the globe assume we are zoomed very far out, estimate an arbitrary rectangle\n  if (!topRight) {\n    topRight = {\n      position: WorldWind.Location.linearLocation(\n        this.worldWindow.navigator.lookAtLocation,\n        this.worldWindow.navigator.heading + 45,\n        Math.PI / 3,\n        new WorldWind.Location())\n    };\n  }\n\n  if (!bottomLeft) {\n    bottomLeft = {\n      position: WorldWind.Location.linearLocation(\n        this.worldWindow.navigator.lookAtLocation,\n        this.worldWindow.navigator.heading + 45,\n        -Math.PI / 3,\n        new WorldWind.Location())\n    };\n  }\n\n  return {\n    north: topRight.position.latitude,\n    south: bottomLeft.position.latitude,\n    east: topRight.position.longitude,\n    west: bottomLeft.position.longitude\n  };\n};\n\n/**\n * Returns the center of focus of the map\n * @returns {{latitude: number, longitude:number}}\n */\nEMPWorldWind.map.prototype.getCenter = function() {\n  return this.worldWindow.navigator.lookAtLocation;\n};\n\n/**\n * Deletes and removes all features and layers on the map\n */\nEMPWorldWind.map.prototype.shutdown = function() {\n  this.features = {};\n  this.layers = {};\n  this.worldWindow = undefined;\n};\n\n/**\n * checks is map is moving outside an epsilon. This function is used\n * to reduce the calls to update the features of the map.\n */\nEMPWorldWind.map.prototype.isMapMoving = function() {\n  if ((!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.latitude, this.lastNavigator.lookAtLocation.latitude, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.lookAtLocation.longitude, this.lastNavigator.lookAtLocation.longitude, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.range, this.lastNavigator.range, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.tilt, this.lastNavigator.tilt, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.roll, this.lastNavigator.roll, this.optimizationMapMoveEpsilon)) ||\n    (!EMPWorldWind.Math.equalsEpsilon(this.worldWindow.navigator.heading, this.lastNavigator.heading, this.optimizationMapMoveEpsilon))) {\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\n\nEMPWorldWind.map.prototype.pickShapesInViewRegion = function() {\n  var shapes;\n  //var bound = this.getBounds();\n  //var boundRectangle = new this.worldwind.Rectangle(new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude), this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n  // this.worldWindow.viewport\n  var canvasCoordinates = this.worldWindow.canvasCoordinates(0, 0);\n  //var screenLocation = new WorldWind.Location(this.worldWindow.navigator.lookAtLocation.latitude, this.worldWindow.navigator.lookAtLocation.longitude);\n  var boundRectangle = new WorldWind.Rectangle(canvasCoordinates[0], canvasCoordinates[1], 5000, 4000);\n  //var boundRectangle  = new WorldWind.Rectangle(0, 0 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n  //var boundRectangle  = new WorldWind.Rectangle(this.worldWindow.canvas.width/2, this.worldWindow.canvas.height/2 ,this.worldWindow.viewport.width -1 , this.worldWindow.viewport.height - 1);\n\n  shapes = this.worldWindow.pickShapesInRegion(boundRectangle);\n  return shapes;\n};\n\n\n/**\n * checks if feature is within view area of map.\n * @param {emp.typeLibrary.Feature} empFeature object representing a feature (not a ww feature).\n */\nEMPWorldWind.map.prototype.isMilStdMultiPointShapeInViewRegion = function(empFeature) {\n  var p,\n    inView = false;\n\n  // Highlight the items picked.\n  if (!this.bounds) {\n    this.bounds = this.getBounds();\n  }\n\n  for (p = 0; p < empFeature.coordinates.length; p++) {\n    var coordinate = empFeature.coordinates[p];\n    if ((coordinate[0] <= this.bounds.east && coordinate[0] >= this.bounds.west) && (coordinate[1] > this.bounds.south && coordinate[1] < this.bounds.north)) {\n      inView = true;\n      break;\n    }\n  }\n  return inView;\n};\n","var EMPWorldWind = EMPWorldWind || {};\n/**\n * Namespace for EMPWorldWind feature classes\n * @namespace\n */\nEMPWorldWind.data = {};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.Overlay} overlay\n */\nEMPWorldWind.data.EmpLayer = function(overlay) {\n  /** @type {Object.<string, EMPWorldWind.Data.EmpLayer>} */\n  this.subLayers = {};\n\n  /** @type {Object.<string, EMPWorldWind.Data.EmpFeature>} */\n  this.featureKeys = {};\n\n  /** @member {string} */\n  this.name = overlay.name || undefined;\n\n  /** @member {string} */\n  this.description = overlay.description;\n\n  /** @member {string} */\n  this.id = overlay.overlayId;\n\n  /** @member {string} */\n  this.parentId = overlay.parentId;\n\n  /** @member {string} */\n  this.globalType = overlay.globalType || \"vector\"; // vector, wms\n\n  var _overlay = overlay;\n  /**\n   * @name EMPWorldWind.data.EmpLayer#overlay\n   * @type {emp.typeLibrary.Overlay}\n   */\n  Object.defineProperty(this, 'overlay', {\n    enumerable: true,\n    value: _overlay\n  });\n\n  // TODO handle WMS, WMTS, KML...\n  var _layer = new WorldWind.RenderableLayer(this.id);\n  /**\n   * @name EMPWorldWind.data.EmpLayer#layer\n   * @type {WorldWind.RenderableLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _layer\n  });\n\n  /** @member {boolean} */\n  this.enabled = true; // true by default\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature} feature\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    emp.util.each(feature.shapes, function(shape) {\n      this.layer.addRenderable(shape);\n    }.bind(this));\n\n    this.featureKeys[feature.id] = {\n      \"id\": feature.id,\n      \"type\": EMPWorldWind.constants.FeatureType.RENDERABLE,\n      \"feature\": feature\n    };\n\n    feature.overlayId = this.id;\n  } else {\n    // feature already present in map. First remove existing one and then add as new one. The updateFeature\n    // does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes.\n    this.updateFeature(feature);\n  }\n};\n\n/**\n * Expose a refresh for the actual WorldWind layer\n */\nEMPWorldWind.data.EmpLayer.prototype.refresh = function() {\n  this.layer.refresh();\n};\n\n/**\n *\n * @param {EMPWorldWind.data.EmpFeature[]} features\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatures = function(features) {\n  emp.util.each(features, function(feature) {\n    this.addFeature(feature);\n  }.bind(this));\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.addFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (!this.isFeaturePresent(childEntity)) {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        this.addFeature(childEntity);\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeatureChild = function(entity, childEntity) {\n  if (this.isFeaturePresent(entity)) {\n    if (!this.isFeatureChildPresent(entity, childEntity)) {\n      if (this.isFeaturePresent(childEntity)) // must be present in layer\n      {\n        childEntity.parentFeature = entity;\n        childEntity.overlayId = this.id;\n        if (entity.childrenFeatureKeys === undefined) {\n          entity.childrenFeatureKeys = {};\n        }\n        entity.childrenFeatureKeys[childEntity.id] = childEntity.id;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeatureChildPresent = function(parentEntity, childEntity) {\n  if (parentEntity && childEntity) {\n    if (parentEntity.childrenFeatureKeys) {\n      return (childEntity.id in parentEntity.childrenFeatureKeys);\n    } else {\n      return false;\n    }\n  }\n};\n\n/**\n *\n * @param subLayer\n */\nEMPWorldWind.data.EmpLayer.prototype.addSubLayer = function(subLayer) {\n  if (!this.isSubLayerPresent(subLayer.id)) {\n    subLayer.parentId = this.id;\n    this.subLayers[subLayer.id] = subLayer;\n  }\n};\n\n/**\n *\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isLayerEmpty = function() {\n  return (this.featuresLength() + this.subOverlaysLength() <= 0);\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeature = function(id) {\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    return empFeature.feature;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isPrimitive = function(id) {\n  var isPrimitive = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE || empFeature.type === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      isPrimitive = true;\n    }\n  }\n\n  return isPrimitive;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isDataSource = function(id) {\n  var isDataSource = false;\n  if (this.isFeaturePresentById(id)) {\n    var empFeature = this.featureKeys[id];\n    if (empFeature.type === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      isDataSource = true;\n    }\n  }\n\n  return isDataSource;\n};\n\n/**\n *\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatures = function() {\n  var features = [], id;\n  for (id in this.featureKeys) {\n    if (id && this.featureKeys.hasOwnProperty(id)) {\n      features.push(this.getFeature(id));\n    }\n  }\n\n  return features;\n};\n\n/**\n *\n * @param id\n * @returns {undefined}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayer = function(id) {\n  var subLayer = undefined;\n  if (this.isSubLayerPresent(id)) {\n    subLayer = this.subLayers[id];\n  }\n\n  return subLayer;\n};\n\n/**\n *\n * @param id\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getSubLayers = function(id) {\n  var layers = [];\n  for (id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      layers.push(this.getSubLayer(id));\n    }\n  }\n\n  return layers;\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatures = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      this.removeFeature(entity);\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureSelections = function() {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      //TODO this.empWorldWind.removeFeatureSelection(id);\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeatures = function(visibility) {\n  for (var id in this.featureKeys) {\n    if (this.featureKeys.hasOwnProperty(id)) {\n      var entity = this.getFeature(id);\n      if (entity) {\n        this.showFeature(entity.id, visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n * @param id\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showFeature = function(id, visibility) {\n  var oMultiPoint,\n    childrenFeatureId,\n    childrenEntity,\n    feature = this.getFeature(id);\n  if (!feature) {\n    return;\n  }\n  if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n    feature.show = visibility;\n    if (feature.billboard !== undefined) {\n      if (feature.reRenderBillboardRequired && visibility) {\n        // when the overlay or parent if hidden the billboard is added to the entity collection with show = false but the loadImage is never called\n        // in the Cesium sdk. Here I'm removing and then re adding the entity when the show visibility is set to true for the for the first  time.\n        // This fixes the issue for kml and geojson points.\n        feature.reRenderBillboardRequired = undefined;\n        feature.show = visibility;\n        feature.billboard.show = visibility;\n        this.updateFeature(feature); // the update removes and then adds the feature to the entity or primitive collection. The children are not remove and re-added.\n      }\n      feature.billboard.show = visibility;\n    }\n    if (feature.path !== undefined) {\n      feature.path.show = visibility;\n    }\n    if (feature.polyline !== undefined) {\n      feature.polyline.show = visibility;\n    }\n    if (feature.polygon !== undefined) {\n      feature.polygon.show = visibility;\n    }\n    if (feature.label !== undefined) {\n      feature.label.show = visibility;\n    }\n    if (feature.rectangle !== undefined) {\n      feature.show = visibility;\n      if (this.empCesium.isMultiPointPresent(id)) {\n        oMultiPoint = this.empCesium.getMultiPoint(id);\n        if (oMultiPoint) {\n          oMultiPoint.visible = visibility;\n        }\n      }\n    }\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  }\n  else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n    feature.show = visibility;\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (childrenFeatureId in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(childrenFeatureId)) {\n          childrenEntity = this.getFeature(childrenFeatureId);\n          if (childrenEntity) {\n            this.showFeature(childrenEntity.id, visibility);\n          }\n        }\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n    feature.show = visibility;\n    //primitive could represent a 3D multipoint that uses labels (entity.rectangle... with canvas)\n    var airspaceLabelPresent = this.empCesium.isMultiPointPresent(id + \"_label\");\n    if (airspaceLabelPresent) {\n      var airspaceLabel = this.getFeature(id + \"_label\");\n      if (airspaceLabel) {\n        airspaceLabel.show = visibility;    //new this.empCesium.ConstantProperty(visibility);\n      }\n    }\n  } else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n    if (feature.length > 0) {\n      feature.get(0).show = visibility;\n    }\n    if (this.empCesium.isAirspacePresent(id)) {\n      var oAirspace = this.empCesium.getAirspace(id);\n      if (oAirspace) {\n        oAirspace.visible = visibility;\n      }\n    } else if (this.empCesium.isSinglePointPresent(id)) {\n      var oSinglePoint = this.empCesium.getSinglePoint(id);\n      if (oSinglePoint) {\n        oSinglePoint.visible = visibility;\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayers = function() {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.removeFeatures();\n        subLayer.removeSubLayers();\n        delete this.subLayers[id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param visibility\n */\nEMPWorldWind.data.EmpLayer.prototype.showSubLayers = function(visibility) {\n  for (var id in this.subLayers) {\n    if (this.subLayers.hasOwnProperty(id)) {\n      var subLayer = this.getSubLayer(id);\n      if (subLayer) {\n        subLayer.visibility = visibility;\n        subLayer.showFeatures(visibility);\n        subLayer.showSubLayers(visibility);\n      }\n    }\n  }\n};\n\n/**\n *\n */\nEMPWorldWind.data.EmpLayer.prototype.clearLayer = function() {\n  switch (this.globalType) {\n    case EMPWorldWind.constants.LayerType.ARCGIS_93_REST_LAYER:\n    case EMPWorldWind.constants.LayerType.BING_LAYER:\n    case EMPWorldWind.constants.LayerType.IMAGE_LAYER:\n    case EMPWorldWind.constants.LayerType.OSM_LAYER:\n    case EMPWorldWind.constants.LayerType.WMS_LAYER:\n    case EMPWorldWind.constants.LayerType.TMS_LAYER:\n    case EMPWorldWind.constants.LayerType.WMTS_LAYER:\n      this.enabled = false;\n      break;\n    default:\n    // do nothing\n  }\n  this.removeFeatureSelections();\n  this.removeFeatures();\n  this.removeSubLayers();\n};\n\n/**\n *\n * @param isVisible\n */\nEMPWorldWind.data.EmpLayer.prototype.showLayer = function(isVisible) {\n  this.showFeatures(isVisible);\n  this.showSubLayers(isVisible);\n};\n\n/**\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeature = function(feature) {\n  if (this.isFeaturePresent(feature)) {\n    if (feature.childrenFeatureKeys !== undefined) {\n      for (var id in feature.childrenFeatureKeys) {\n        if (feature.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    if (EMPWorldWind.utils.defined(feature.parentFeature)) {\n      this.deallocateFeatureChild(feature.parentFeature, feature);\n    }\n\n    emp.util.each(feature.shapes, function(shape){\n      if (shape instanceof WorldWind.RenderableLayer) {\n        // Handle KML features\n        this.worldwind.removeLayer(shape);\n      } else {\n        // Handle normal primitives\n        this.layer.removeRenderable(shape);\n      }\n    }.bind(this));\n\n    delete this.featureKeys[feature.id];\n  }\n};\n\n/**\n * feature already present in map. First remove existing one and then add as new one. The updateFeature\n * does not remove the emp objects from engine hashes like entity, airspace, multipoint hashes. The addFeature from the emp engine api\n * takes care of the case of an update. The updateFeature is used for internal removal and then re-adding the feature to map with same id. The\n * presence of the feature in the layers , and any child entities ( ojo - would a replace erase any children feature association to updated feature?) under the updated feature is mantained (v2)..\n *\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.updateFeature = function(feature) {\n  var renderable;\n  //feature already present in map. First remove existing one and then add as new one\n  if (feature.id && feature.id !== null) {\n    renderable = this.getFeature(feature.id); // entity is the current geometry rendered on map\n    // keep children association to parent when updating\n    feature.childrenFeatureKeys = renderable.childrenFeatureKeys;\n    feature.parentFeature = renderable.parentFeature;\n    this.layer.removeRenderable(renderable);\n    this.layer.addRenderable(feature);\n    this.featureKeys[feature.id].feature = feature;\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n * remove feature recursively from layer but keep feature in the Cesium entityCollection\n * this function is used for the moving of features.\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.deallocateFeature(childrenEntity);\n          }\n        }\n      }\n    }\n    entity.overlayId = undefined;\n    delete this.featureKeys[entity.id];\n  }\n};\n\n/**\n * Add feature recursively to layer. the feature must  already be part of the Cesium entityCollection\n * this function is used for the moving of features.\n * @param feature\n */\nEMPWorldWind.data.EmpLayer.prototype.allocateFeature = function(feature) {\n  if (!this.isFeaturePresent(feature)) {\n    if (feature.featureType === EMPWorldWind.constants.FeatureType.ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.COMPOUND_ENTITY\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.PRIMITIVE_COLLECTION\n      };\n    }\n    else if (feature.featureType === EMPWorldWind.constants.FeatureType.DATA_SOURCE) {\n      this.featureKeys[feature.id] = {\n        \"id\": feature.id,\n        \"type\": EMPWorldWind.constants.FeatureType.DATA_SOURCE\n      };\n    }\n    var featureChildrenLength = this.featureChildrenLength(feature);\n    if (featureChildrenLength > 0) {\n      var childrenFeatures = this.getFeatureChildrenEntityArray(feature);\n      for (var index = 0; index < featureChildrenLength; index++) {\n        var childrenFeature = childrenFeatures[index];\n        this.allocateFeature(childrenFeature);\n      }\n    }\n    feature.overlayId = this.id;\n  }\n};\n\n/**\n *\n * @param entity\n */\nEMPWorldWind.data.EmpLayer.prototype.clearFeature = function(entity) {\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            this.removeFeature(childrenEntity);\n          }\n        }\n      }\n      entity.childrenFeatureKeys = undefined;\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n      }\n    }\n  }\n};\n\n/**\n *\n * @param parentEntity\n * @param childEntity\n */\nEMPWorldWind.data.EmpLayer.prototype.deallocateFeatureChild = function(parentEntity, childEntity) {\n  if (this.isFeaturePresent(parentEntity) && this.isFeaturePresent(childEntity)) {\n    if (parentEntity.childrenFeatureKeys !== undefined) {\n      if (this.isFeatureChildPresent(parentEntity, childEntity)) {\n        //this.removeFeature(childEntity);\n        delete parentEntity.childrenFeatureKeys[childEntity.id];\n        childEntity.parentFeature = undefined;\n        childEntity.overlayId = undefined;\n      }\n    }\n  }\n};\n\n/**\n *\n * @param entity\n * @returns {Array}\n */\nEMPWorldWind.data.EmpLayer.prototype.getFeatureChildrenEntityArray = function(entity) {\n  var featureChildrenEntityArray = [];\n  if (this.isFeaturePresent(entity)) {\n    if (entity.childrenFeatureKeys !== undefined) {\n      for (var id in entity.childrenFeatureKeys) {\n        if (entity.childrenFeatureKeys.hasOwnProperty(id)) {\n          var childrenEntity = this.getFeature(id);\n          if (childrenEntity) {\n            featureChildrenEntityArray.push(childrenEntity);\n          }\n        }\n      }\n    }\n  }\n\n  return featureChildrenEntityArray;\n\n};\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeFeatureById = function(id) {\n  var feature;\n  if (this.isFeaturePresentById(id)) {\n    feature = this.getFeature(id);\n    this.removeFeature(feature);\n  }\n};\n\n/**\n *\n * @param subOverlay\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayer = function(subOverlay) {\n  if (this.isSubLayerPresent(subOverlay.id)) {\n    this.subLayer.removeFeatures();\n    this.subLayer.removeSubLayers();\n    delete this.SubLayers[this.subLayer.id];\n  }\n};\n\n/**\n *\n * @param id\n */\nEMPWorldWind.data.EmpLayer.prototype.removeSubLayerById = function(id) {\n  if (this.isSubLayerPresent(id)) {\n    var subLayer = this.getLayer(id);\n    this.removeSubLayer(subLayer);\n  }\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.featuresLength = function() {\n  return Object.keys(this.featureKeys).length;\n};\n\n/**\n *\n * @param entity\n * @returns {number}\n */\nEMPWorldWind.data.EmpLayer.prototype.featureChildrenLength = function(entity) {\n  var length = 0;\n  if (entity.childrenFeatureKeys) {\n    length = Object.keys(entity.childrenFeatureKeys).length;\n  }\n\n  return length;\n};\n\n/**\n *\n * @returns {Number|*}\n */\nEMPWorldWind.data.EmpLayer.prototype.subLayersLength = function() {\n  return Object.keys(this.subLayers).length;\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresentById = function(id) {\n  if (id)\n    return (id in this.featureKeys);\n};\n\n/**\n *\n * @param entity\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isFeaturePresent = function(entity) {\n  if (entity && entity.id) {\n    return (entity.id in this.featureKeys);\n  } else {\n    return false;\n  }\n};\n\n/**\n *\n * @param id\n * @returns {boolean}\n */\nEMPWorldWind.data.EmpLayer.prototype.isSubLayerPresent = function(id) {\n  if (id) {\n    return (id in this.subLayers);\n  }\n\n  return false;\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc This represents an EMP layer. Any interaction with the WorldWind layer itself will occur here.\n *\n * @class\n * @param {emp.typeLibrary.WMS} wms\n */\nEMPWorldWind.data.EmpWMSLayer = function(wms) {\n  var layerNames, config, url;\n\n  this.id = wms.coreId;\n\n  var _wms = wms;\n\n  /**\n   * @name EMPWorldWind.data.EmpWMSLayer#wms\n   * @type {emp.typeLibrary.WMS}\n   */\n  Object.defineProperty(this, 'wms', {\n    enumerable: true,\n    value: _wms\n  });\n\n  layerNames = wms.activeLayers.join();\n\n  // Set the URL to the service\n  if (wms.useProxy) {\n    url = emp3.api.global.configuration.urlProxy + \"?url=\" + wms.url;\n  } else {\n    url = wms.url;\n  }\n\n  config = {\n    service: url,\n    layerNames: layerNames,\n    sector: WorldWind.Sector.FULL_SPHERE,\n    levelZeroDelta: new WorldWind.Location(36, 36),\n    numLevels: 15,\n    format: \"image/png\",\n    size: 256\n  };\n\n  // Purposely null for now\n  var timeString = '';\n  var _wmsLayer = new WorldWind.WmsLayer(config, timeString);\n  /**\n   * @name EMPWorldWind.data.EmpWMS#layer\n   * @type {WorldWind.WmsLayer}\n   */\n  Object.defineProperty(this, 'layer', {\n    enumerable: true,\n    value: _wmsLayer\n  });\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.data = EMPWorldWind.data || {};\n\n/**\n * @classdesc Container class for establishing mappings between empFeatures and the WorldWind representations.\n * A Feature may consist of any number of WorldWind Surface shapes. Any direct interaction with the WorldWind features\n * will occur in this class.\n *\n * @class\n * @param {emp.typeLibrary.Feature} feature\n */\nEMPWorldWind.data.EmpFeature = function(feature) {\n  /**\n   * The storage of all the shapes composing the primary shape\n   * @type {WorldWind.SurfaceShape[]}\n   */\n  this.shapes = [];\n\n  /**\n   * The native EMP Feature\n   * @type {emp.typeLibrary.Feature}\n   */\n  this.feature = feature;\n\n  var _id = feature.coreId;\n  /**\n   * @readonly\n   * @name EMPWorldWind.data.EmpFeature#id\n   */\n  Object.defineProperty(this, 'id', {\n    enumerable: true,\n    value: _id\n  });\n\n  var _altitudeMode = WorldWind.CLAMP_TO_GROUND;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#altitudeMode\n   */\n  Object.defineProperty(this, 'altitudeMode', {\n    enumerable: true,\n    get: function() { return _altitudeMode; },\n    set: function(altMode) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].altitudeMode = altMode;\n      }\n      _altitudeMode = altMode;\n    }\n  });\n\n  var _selected = false;\n  /**\n   * @name EMPWorldWind.data.EmpFeature#selected\n   */\n  Object.defineProperty(this, 'selected', {\n    enumerable: true,\n    get: function() { return _selected; },\n    set: function(value) {\n      var shapesCount = this.shapesCount();\n      for (var i = 0; i < shapesCount; i++) {\n        this.shapes[i].highlighted = value;\n      }\n      _selected = value;\n    }\n  });\n};\n\n/**\n * Convenience function\n * @returns {Number}\n */\nEMPWorldWind.data.EmpFeature.prototype.shapesCount = function() {\n  return this.shapes.length;\n};\n\n/**\n *\n * @param {WorldWind.SurfaceShape|WorldWind.SurfaceShape[]|*} primitives\n */\nEMPWorldWind.data.EmpFeature.prototype.addShapes = function(primitives) {\n  if (!Array.isArray(primitives)) {\n    if (primitives instanceof WorldWind.RenderableLayer) { // TODO this doesn't smell right, may need to handle KML differently\n      primitives.renderables[0].userProperties.id = this.id;\n    } else {\n      primitives.userProperties.id = this.id;\n    }\n    this.shapes.push(primitives);\n\n  } else {\n    emp.util.each(primitives, function(primitive) {\n      primitive.userProperties.id = this.id;\n      this.shapes.push(primitive);\n    }.bind(this));\n  }\n};\n\n/**\n * Clears all primitives from the feature. It does not remove them from any layers they are rendered on so that must be\n * done first.\n */\nEMPWorldWind.data.EmpFeature.prototype.clearShapes = function() {\n  this.shapes = [];\n};\n\n/**\n *\n * @param {boolean} visible\n */\nEMPWorldWind.data.EmpFeature.prototype.setVisible = function(visible) {\n  emp.util.each(this.shapes, function(shape) {\n    shape.enabled = visible;\n  });\n};","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants = {\n  view: {\n    MAX_HEIGHT: 10000000\n  }\n};\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasMoving = false;\n\n/** @type {boolean} */\nEMPWorldWind.constants.globeWasZooming = false;\n\n/** @type {number} */\nEMPWorldWind.constants.globeMoveTime = 2000;\n\n/** @type {number} */\nEMPWorldWind.constants.extentBufferFactor = .4; // use when flyto a feature so the camera is not too close to it.\n\n/** @type {boolean} */\nEMPWorldWind.constants.USE_DATA_SOURCE = false;\n\n/** @constant {number} */\nEMPWorldWind.constants.WHITE_CONTRAST = 0;\n\n/** @constant {number} */\nEMPWorldWind.constants.BLACK_CONTRAST = 1;\n\n/**\n * No panning state for autoPanning in smart motion\n * @constant {object}\n */\nEMPWorldWind.constants.NO_PANNING = {\n  step: 0,\n  up: false,\n  down: false,\n  right: false,\n  left: false\n};\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.METERS_PER_INCH = 0.0254;\n\n/**\n * @readonly\n * @type {number}\n */\nEMPWorldWind.constants.SCALE_LINE_LENGTH = 50;\n\n/**\n * @readonly\n */\nEMPWorldWind.constants.propertyDefaults = {\n  FILL_COLOR_HEX: \"ffffff\",\n  LINE_COLOR_HEX: \"000000\",\n  LINE_WIDTH: 3\n};\n\n/**\n * @readonly\n * @type {{COLOR_HEX: string, WIDTH: number, SCALE: number}}\n */\nEMPWorldWind.constants.selectionProperties = {\n  COLOR_HEX: 'FFFF00',\n  WIDTH: 2,\n  SCALE: 0.5\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.FeatureType = {\n  ENTITY: \"entity\",\n  RENDERABLE: \"renderable\",\n  PRIMITIVE: \"primitive\",\n  GROUND_PRIMITIVE: \"ground_primitive\",\n  DATA_SOURCE: \"dataSource\",\n  COMPOUND_ENTITY: \"compoundEntity\",\n  PRIMITIVE_COLLECTION: \"primitiveCollection\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LayerType = {\n  OVERLAY_LAYER: \"overlay\",\n  WMS_LAYER: \"wms\",\n  IMAGE_LAYER: \"image\",\n  BING_LAYER: \"bing\",\n  ARCGIS_93_REST_LAYER: \"arcgis93rest\",\n  OSM_LAYER: \"osm\",\n  TMS_LAYER: \"tms\",\n  TERRAIN_LAYER: \"terrain\",\n  WMTS_LAYER: \"wmts\"\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.EntityType = {\n  BILLBOARD: \"billboard\",\n  BOX: \"box\",\n  CORRIDOR: \"corridor\",\n  CYLINDER: \"cylinder\",\n  DESCRIPTION: \"description\",\n  ELLIPSE: \"ellipse\",\n  ELLIPSOID: \"ellipsoid\",\n  LABEL: \"label\",\n  MODEL: \"model\",\n  ORIENTATION: \"orientation\",\n  PATH: \"path\",\n  POLYGON: \"polygon\",\n  POLYLINE: \"polyline\",\n  POLYLINE_VOLUME: \"polylineVolume\",\n  POSITION: \"position\",\n  RECTANGLE: \"rectangle\",\n  VIEW_FROM: \"viewFrom\",\n  WALL: \"wall\",\n  KML: \"kml\"\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.MultiPointRenderType = {\n  KML: 0,\n  /** @deprecated */\n  JSON: 1,\n  GEOJSON: 2,\n  DATA_URL: 4,\n  CANVAS: 3,\n  CANVAS_LABEL_ONLY: 5,\n  SVG: 6,\n  SVG_LABEL_ONLY: 7\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.SinglePointAltitudeRangeMode = {\n  LOW_RANGE: 0,\n  MID_RANGE: 1,\n  HIGHEST_RANGE: 2\n};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererWorker = {\n  A: 1,\n  B: 2,\n  C: 3,\n  D: 4\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.LabelStyle = {\n  REQUIRED_LABELS: 'required_labels',\n  COMMON_LABELS: 'common_labels',\n  ALL_LABELS: 'all_labels'\n};\n\n/**\n * Modifiers for All labels to be displayed\n * @enum {object}\n * @constant\n */\nEMPWorldWind.constants.AllLabels = {\n  \"V\": true,\n  \"L\": true,\n  \"S\": true,\n  \"AA\": true,\n  \"AB\": true,\n  \"AC\": true, \n  \"H\": true,\n  \"M\": true,\n  \"T\": true,\n  \"T1\": true,\n  \"CN\": true,\n  \"C\": true,\n  \"F\": true,\n  \"G\": true,\n  \"H1\": true,\n  \"H2\": true,\n  \"J\": true,\n  \"K\": true,\n  \"N\": true,\n  \"P\": true,\n  \"W\": true,\n  \"W1\": true,\n  \"X\": true,\n  \"Y\": true,\n  \"Z\": true\n};\n\n/**\n * @namespace\n */\nEMPWorldWind.constants.RendererSettings = {};\n\n/**\n * @enum {number}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.standard = {\n  'Symbology_2525Bch2_USAS_13_14': 0,\n  'Symbology_2525C': 1\n};\n\n/**\n * @enum {string}\n * @readonly\n */\nEMPWorldWind.constants.RendererSettings.modifierLookup = {\n  QUANTITY: \"quantity\",\n  REDUCED_OR_REINFORCED: \"reinforcedOrReduced\",\n  STAFF_COMMENTS: \"staffComments\",\n  ADDITIONAL_INFO_1: \"additionalInfo1\",\n  ADDITIONAL_INFO_2: \"additionalInfo2\",\n  ADDITIONAL_INFO_3: \"additionalInfo3\",\n  EVALUATION_RATING: \"evaluationRating\",\n  COMBAT_EFFECTIVENESS: \"combatEffectiveness\",\n  SIGNATURE_EQUIPMENT: \"signatureEquipment\",\n  HIGHER_FORMATION: \"higherFormation\",\n  HOSTILE: \"hostile\",\n  IFF_SIF: \"iffSiff\",\n  DIRECTION_OF_MOVEMENT: \"directionOfMovement\",\n  OFFSET_INDICATOR: \"offsetIndicator\",\n  UNIQUE_DESIGNATOR_1: \"uniqueDesignation1\",\n  UNIQUE_DESIGNATOR_2: \"uniqueDesignation2\",\n  EQUIPMENT_TYPE: \"equipmentType\",\n  DATE_TIME_GROUP: \"dateTimeGroup1\",\n  DATE_TIME_GROUP_2: \"dateTimeGroup2\",\n  ALTITUDE_DEPTH: \"altitudeDepth\",\n  LOCATION: \"location\",\n  SPEED: \"speed\",\n  SPECIAL_C2_HEADQUARTERS: \"specialC2Headquarters\",\n  DISTANCE: \"distance\",\n  AZIMUTH: \"azimuth\",\n  FILL_COLOR: \"fillColor\",\n  LINE_COLOR: \"lineColor\",\n  TEXT_COLOR: \"textColor\",\n  X_OFFSET: \"xOffset\",\n  X_UNITS: \"xUnits\",\n  Y_OFFSET: \"yOffset\",\n  Y_UNITS: \"yUnits\",\n  NAME: \"name\",\n  STANDARD: \"standard\"\n};\n\nEMPWorldWind.constants.highAltitudeRangeImage = {};\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\"  r=\"3\" fill=\"red\" stroke=\"red\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle cx=\"12\" cy=\"12\"  r=\"3\" fill=\"blue\" stroke=\"blue\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"green\" stroke=\"green\" stroke-width=\"1\"  /></g></svg>');\nEMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"25px\" height=\"30px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"yellow\" stroke=\"yellow\" stroke-width=\"1\"  /></g></svg>');\n//EMPWorldWind.constants.highAltitudeRangeImage.blankMultipoint = 'data:image/svg+xml;base64,' + window.btoa('<svg preserveAspectRatio=\"none\" width=\"2px\" height=\"2px\"   xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"><g transform=\"translate(0,0)  \"><circle  cx=\"12\" cy=\"12\" r=\"3\" fill=\"black\" stroke=\"black\" stroke-width=\"1\"  /></g></svg>');\n\n\n","var EMPWorldWind = EMPWorldWind || {};\n\n/**\n * @namespace\n */\nEMPWorldWind.utils = {};\n\n/**\n * @typedef {object} RGBAColor\n * @property {number} red\n * @property {number} green\n * @property {number} blue\n * @property {number} alpha 0-1\n */\n\n/**\n *\n * @param {MouseEvent} event\n * @returns {{lat: undefined, lon: undefined, clientX: *, clientY: *, screenX: *, screenY: *}}\n */\nEMPWorldWind.utils.getEventCoordinates = function(event) {\n  var pickPoint = this.worldWindow.canvasCoordinates(event.clientX, event.clientY);\n  var terrainObject = this.worldWindow.pickTerrain(pickPoint).terrainObject();\n\n  return {\n    lat: terrainObject ? terrainObject.position.latitude : undefined,\n    lon: terrainObject ? terrainObject.position.longitude : undefined,\n    clientX: event.clientX,\n    clientY: event.clientY,\n    screenX: event.screenX,\n    screenY: event.screenY\n  };\n};\n\n/**\n *\n * @param value\n * @returns {boolean}\n */\nEMPWorldWind.utils.defined = function(value) {\n  return value !== undefined && value !== null;\n};\n\n\n/**\n * @namespace\n */\nEMPWorldWind.utils.milstd = {};\n\n/**\n *\n * @param properties\n * @param name\n * @param iconLabels\n * @param iconPixelSize\n * @returns {{}}\n */\nEMPWorldWind.utils.milstd.updateModifierLabels = function(properties, name, iconLabels, iconPixelSize) {\n  var mod,\n    modifiedModifiers = {},\n    property,\n    size;\n\n  // loop through all the properties, add a parameter for each property\n  for (property in properties) {\n    if (properties.hasOwnProperty(property)) {\n      switch (property) {\n        case \"labelColor\":\n          // Convert labelColor to textColor\n          modifiedModifiers[\"textColor\"] = properties[property];\n          break;\n        case \"fillColor\":\n          modifiedModifiers[\"fillColor\"] = properties[property];\n          break;\n        case \"lineColor\":\n          modifiedModifiers[\"lineColor\"] = properties[property];\n          break;\n        case \"modifiers\":\n          // modifiers contains an object that has other properties in it.\n          // loop through each of the properties and add parameters to those\n          // that are relevant.\n          for (mod in properties[property]) {\n            if (properties[property].hasOwnProperty(mod)) {\n              switch (mod) {\n                case \"quantity\":\n                  if (iconLabels.C && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"quantity\"] = properties[property][mod];\n                  }\n                  break;\n                case \"reinforcedOrReduced\":\n                  if (iconLabels.F && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"reinforcedOrReduced\"] = properties[property][mod];\n                  }\n                  break;\n                case \"staffComments\":\n                  if (iconLabels.G && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"staffComments\"] = properties[property][mod];\n                  }\n                  break;\n                case \"additionalInfo1\":\n                  if (iconLabels.H && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"additionalInfo1\"] = properties[property][mod];\n                  }\n                  break;\n                case \"additionalInfo2\":\n                  if (iconLabels.H1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"additionalInfo2\"] = properties[property][mod];\n                  }\n                  break;\n                case \"additionalInfo3\":\n                  if (iconLabels.H2 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"additionalInfo3\"] = properties[property][mod];\n                  }\n                  break;\n                case \"evaluationRating\":\n                  if (iconLabels.J && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"evaluationRating\"] = properties[property][mod];\n                  }\n                  break;\n                case \"combatEffectiveness\":\n                  if (iconLabels.K && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"combatEffectiveness\"] = properties[property][mod];\n                  }\n                  break;\n                case \"signatureEquipment\":\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"signatureEquipment\"] = properties[property][mod];\n                  }\n                  break;\n                case \"higherFormation\":\n                  if (iconLabels.M && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"higherFormation\"] = properties[property][mod];\n                  }\n                  break;\n                case \"hostile\":\n                  if (iconLabels.N && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"hostile\"] = properties[property][mod];\n                  }\n                  break;\n                case \"iffSif\":\n                  if (iconLabels.P && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"iffSif\"] = properties[property][mod];\n                  }\n                  break;\n                case \"offsetIndicator\":\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"offsetIndicator\"] = properties[property][mod];\n                  }\n                  break;\n                case \"uniqueDesignation1\":\n                  if (iconLabels.T && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"uniqueDesignation1\"] = properties[property][mod];\n                  }\n                  break;\n                case \"uniqueDesignation2\":\n                  if (iconLabels.T1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"uniqueDesignation2\"] = properties[property][mod];\n                  }\n                  break;\n                case \"equipmentType\":\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"equipmentType\"] = properties[property][mod];\n                  }\n                  break;\n                case \"dateTimeGroup1\":\n                  if (iconLabels.W && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"dateTimeGroup1\"] = properties[property][mod];\n                  }\n                  break;\n                case \"dateTimeGroup2\":\n                  if (iconLabels.W1 && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"dateTimeGroup2\"] = properties[property][mod];\n                  }\n                  break;\n                case \"altitudeDepth\":\n                  if (iconLabels.X) {\n                    modifiedModifiers[\"altitudeDepth\"] = properties[property][mod];\n                  }\n                  break;\n                case \"location\":\n                  if (iconLabels.Y && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"location\"] = properties[property][mod];\n                  }\n                  break;\n                case \"speed\":\n                  if (iconLabels.Z && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"speed\"] = properties[property][mod];\n                  }\n                  break;\n                case \"specialC2Headquarters\":\n                  if (iconLabels.AA && properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[\"specialC2Headquarters\"] = properties[property][mod];\n                  }\n                  break;\n                case \"distance\":\n                  modifiedModifiers[\"distance\"] = properties[property][mod];\n                  break;\n                case \"azimuth\":\n                  modifiedModifiers[\"azimuth\"] = properties[property][mod];\n                  break;\n                case \"standard\":\n                  modifiedModifiers[\"standard\"] = properties[property][mod];\n                  break;\n                case \"size\":\n                  size = properties[property][mod];\n                  if (!size) {\n                    size = iconPixelSize;\n                  }\n                  modifiedModifiers[\"size\"] = size;\n                  break;\n                default:\n                  if (properties[property][mod] && (properties[property][mod] !== \"\")) {\n                    modifiedModifiers[mod] = properties[property][mod];\n                  }\n                  break;\n              }\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  if (iconLabels.CN) {\n    modifiedModifiers[\"name\"] = name;\n  }\n  return modifiedModifiers;\n};\n\n\n/**\n *\n * @param modifiers\n * @param showModLabels\n * @returns {object}\n */\nEMPWorldWind.utils.milstd.convertModifierStringTo2525 = function(modifiers, showModLabels) {\n  var standardModifiers = {};\n\n  if (modifiers !== undefined && modifiers !== null) {\n    for (var sModifier in modifiers) {\n      if (modifiers.hasOwnProperty(sModifier)) {\n        var modValue = modifiers[sModifier];\n        if (modValue !== null && modValue !== \"null\" && modValue !== 0) {\n          switch (sModifier) {\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.QUANTITY:\n              if (showModLabels) {\n                standardModifiers[\"C\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.REDUCED_OR_REINFORCED:\n              if (showModLabels) {\n                standardModifiers[\"F\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.STAFF_COMMENTS:\n              if (showModLabels) {\n                standardModifiers[\"G\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_1:\n              if (showModLabels) {\n                standardModifiers[\"H\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_2:\n              if (showModLabels) {\n                standardModifiers[\"H1\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ADDITIONAL_INFO_3:\n              if (showModLabels) {\n                standardModifiers[\"H2\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.EVALUATION_RATING:\n              if (showModLabels) {\n                standardModifiers[\"J\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.COMBAT_EFFECTIVENESS:\n              if (showModLabels) {\n                standardModifiers[\"K\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.SIGNATURE_EQUIPMENT:\n              if (showModLabels) {\n                standardModifiers[\"L\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.HIGHER_FORMATION:\n              if (showModLabels) {\n                standardModifiers[\"M\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.HOSTILE:\n              if (showModLabels) {\n                standardModifiers[\"N\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.IFF_SIF:\n              if (showModLabels) {\n                standardModifiers[\"P\"] = modValue;\n              }\n              break;\n            // Direction of movement cannot work on 3D because the view can rotate\n            // case EMPWorldWind.constants.RendererSettings.modifierLookup.DIRECTION_OF_MOVEMENT:\n            //    modifiersArray.push(\"Q=\" + modValue);\n            //    break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.OFFSET_INDICATOR:\n              standardModifiers[\"S\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_1:\n              if (showModLabels) {\n                standardModifiers[\"T\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.UNIQUE_DESIGNATOR_2:\n              if (showModLabels) {\n                standardModifiers[\"T1\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.EQUIPMENT_TYPE:\n              if (showModLabels) {\n                standardModifiers[\"V\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP:\n              if (showModLabels) {\n                standardModifiers[\"W\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.DATE_TIME_GROUP_2:\n              if (showModLabels) {\n                standardModifiers[\"W1\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.ALTITUDE_DEPTH:\n              if (showModLabels) {\n                standardModifiers[\"X\"] = JSON.parse(JSON.stringify(modValue));\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.LOCATION:\n              if (showModLabels) {\n                standardModifiers[\"Y\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.SPEED:\n              if (showModLabels) {\n                standardModifiers[\"Z\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.SPECIAL_C2_HEADQUARTERS:\n              if (showModLabels) {\n                standardModifiers[\"AA\"] = modValue;\n              }\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.DISTANCE:\n              standardModifiers[\"AM\"] = JSON.parse(JSON.stringify(modValue));\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.AZIMUTH:\n              standardModifiers[\"AN\"] = JSON.parse(JSON.stringify(modValue));\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.FILL_COLOR:\n              standardModifiers[\"FILLCOLOR\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.LINE_COLOR:\n              standardModifiers[\"LINECOLOR\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.TEXT_COLOR:\n              standardModifiers[\"TEXTCOLOR\"] = modValue;\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.STANDARD:\n              // convert standard string value  to modifier numeric\n              standardModifiers[emp.typeLibrary.utils.milstd.Modifiers.STANDARD] = EMPWorldWind.utils.convertSymbolStandardToRendererFormat(modifiers);\n              break;\n            case EMPWorldWind.constants.RendererSettings.modifierLookup.NAME:\n            case \"CN\":\n              if (showModLabels) {\n                standardModifiers[\"CN\"] = modValue;\n              }\n              break;\n            default:\n              standardModifiers[sModifier] = modValue;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  return standardModifiers;\n};\n\n/**\n * Borrowed from the Cesium Implementation\n *\n * @param item\n * @returns {object}\n */\nEMPWorldWind.utils.milstd.checkForRequiredModifiers = function(item) {\n  var result = {},\n    symbolCode,\n    properties = {},\n    modifiers = {},\n    oAM = [],\n    oAN = [],\n    basicSymbolCode,\n    standard,\n    symbolDef,\n    i,\n    lonDistance,\n    overrides = {};\n\n  // Check to see if the properties and modifiers have not yet been set.\n  // If they don't exist, this will default them to empty objects.\n  if (item.data && item.data.symbolCode) {\n    symbolCode = item.data.symbolCode;\n  }\n  else if (item.symbolCode) {\n    symbolCode = item.symbolCode;\n  }\n\n  if (item.properties) {\n    properties = item.properties;\n    if (properties.modifiers) {\n      modifiers = properties.modifiers;\n    }\n    else {\n      properties.modifiers = {};\n      modifiers = properties.modifiers;\n    }\n  }\n  else {\n    item.properties = {\n      modifiers: {}\n    };\n\n    modifiers = item.properties.modifiers;\n  }\n\n  // Get the basic symbol code.  We need the basic code because we need to look it up with\n  // getSymbolDef.  This requires the basic code.\n  basicSymbolCode = armyc2.c2sd.renderer.utilities.SymbolUtilities.getBasicSymbolID(symbolCode);\n  // Get the standard we are using.  We need to convert it to what the function getSymbolDef uses.\n  standard = EMPWorldWind.utils.milstd.checkSymbolStandard(item.properties.modifiers);\n  // Retrieve the symbol definition object.  This contains information about the required\n  // symbol modifiers.  We will use this to determine which modifiers are not sufficiently\n  // populated.\n  symbolDef = armyc2.c2sd.renderer.utilities.SymbolDefTable.getSymbolDef(basicSymbolCode, standard);\n  if ((symbolDef === undefined) || (symbolDef === null)) {\n    return result;\n  }\n  // The only modifiers that are sometimes required in MIL-STD-2525B and C are\n  // distance and azimuth.\n  //\n  // First check if distance and azimuth has already been set.  If they are, we\n  // still may not have enough entries for them (as both are arrays), so we still need to\n  // verify that they are good.\n\n  // If distance already exists retrieve the values in it.\n  if (modifiers.hasOwnProperty(\"distance\")) {\n    // Lets make sure that if it is there that it is an array.\n    if (modifiers.distance instanceof Array) {\n      oAM = modifiers.distance;\n    }\n  }\n  // If azimuth already exists retrieve the values of it.\n  if (modifiers.hasOwnProperty(\"azimuth\")) {\n    // Lets make sure that if it is there that it is an array.\n    if (modifiers.azimuth instanceof Array) {\n      oAN = modifiers.azimuth;\n    }\n  }\n  // Based on the symbol draw category, we can determine if the symbol has\n  // has the required parameters or not.  For each draw category, we do a different\n  // check.\n  switch (symbolDef.drawCategory) {\n    // These are circle graphics represented by a single point and a radius.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_PARAMETERED_AUTOSHAPE: //16\n      if (oAM !== null && oAM.length > 0) {\n        oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n      }\n      else {\n        oAM[0] = 5000;\n      }\n\n      overrides = {\n        distance: oAM\n      };\n      break;\n    // These are 1-point rectangles with an azimuth that determine the angle, and a distance that determines width\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_RECTANGULAR_PARAMETERED_AUTOSHAPE: //17\n      if ((oAM !== null) && (oAM.length >= 2) &&\n        (typeof (oAM[0]) === \"number\") &&\n        (typeof (oAM[1]) === \"number\")) {\n        oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n      }\n      else {\n        // Check to see if the [0] value is present and its a number.\n        // If not set a value.\n        if ((oAM[0] === undefined) || (typeof (oAM[0]) !== \"number\")) {\n          oAM[0] = 10000;\n        }\n        // Check to see if the [1] value is present and its a number.\n        // If not set a value.\n        if ((oAM[1] === undefined) || (typeof (oAM[1]) !== \"number\")) {\n          oAM[1] = 5000;\n        }\n        oAM = oAM.slice(0, 2); // Make sure that there is only 2.\n      }\n\n      if ((oAN !== null) && (oAN.length >= 1) &&\n        (typeof (oAN[1]) === \"number\")) {\n        oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n      }\n      else {\n        // Check to see if the [0] value is present and its a number.\n        // If not set a value.\n        if ((oAN[0] === undefined) || (typeof (oAN[0]) !== \"number\")) {\n          oAN[0] = 0;\n        }\n        oAN = oAN.slice(0, 1); // Makes ure that there is only 1.\n      }\n      overrides = {\n        distance: oAM,\n        azimuth: oAN\n      };\n      break;\n    // This is a sector range fan, requires a point, a min and max distance for each sector, and left\n    // and right azimuths for each sector.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_SECTOR_PARAMETERED_AUTOSHAPE: //18\n      if ((oAM !== null) && (oAM.length >= 2)) {\n        for (i = 0; i < oAM.length;) {\n          if (typeof (oAM[i]) !== \"number\") {\n            oAM.splice(i, 1);\n          }\n          else {\n            i++;\n          }\n        }\n      }\n      if (oAM.length > 1) {\n        // Check to see if the each value is present.\n        for (i = 0; i < oAM.length; i++) {\n          if (oAM[i] === undefined) {\n            oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n          }\n        }\n      }\n      else {\n        if (oAM[0] === undefined) {\n          oAM[0] = 2000;\n        }\n      }\n      // You need at least 2 azimuth values for this to be a drawable graphic\n      // If it doesn't have it, create it.\n      if (oAN.length === 0) {\n        oAN.push(315);\n        oAN.push(45);\n      }\n      else if (oAN.length === 1) {\n        var newVal = oAN[0] + 90;\n        if (newVal > 360) {\n          newVal = newVal - 360;\n        }\n        oAN.push(newVal);\n      }\n      overrides = {\n        distance: oAM,\n        azimuth: oAN\n      };\n      break;\n    // A circular range fan that is a point and multiple distances for each ring.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_CIRCULAR_RANGEFAN_AUTOSHAPE: //19\n      if ((oAM !== null) && (oAM.length > 0)) {\n        for (i = 0; i < oAM.length;) {\n          if (typeof (oAM[i]) !== \"number\") {\n            oAM.splice(i, 1);\n          }\n          else {\n            i++;\n          }\n        }\n      }\n      if (oAM.length < 2) {\n        // Check to see if the each value is present.\n        for (i = 0; i < 2; i++) {\n          if (oAM[i] === undefined) {\n            oAM[i] = ((i === 0) ? 2000 : oAM[i - 1] + 2000);\n          }\n        }\n      }\n      overrides = {\n        distance: oAM\n      };\n      break;\n    // These are 2-point rectangles that determine the angle, and a distance that requires width\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_TWO_POINT_RECT_PARAMETERED_AUTOSHAPE: //20\n      if (oAM !== null && oAM.length > 0) {\n        if (typeof (oAM[0]) !== \"number\") {\n          oAM[0] = 5000;\n        }\n        oAM = oAM.slice(0, 1); // Make sure that there is only 1.\n      }\n      else {\n        oAM[0] = 5000;\n      }\n      overrides = {\n        distance: oAM\n      };\n      break;\n    // Any air corridor.\n    case armyc2.c2sd.renderer.utilities.SymbolDefTable.DRAW_CATEGORY_LINE:\n      // This really only applies to air corridors.  As far as\n      // I know the only line that requires distance is air corridors.\n\n      // If we do not have the distance field set, or it is set\n      // and the array length is 0, then we want to set it to a default\n      // width.  We want to make the width in relation to the current\n      // scale of the map, otherwise the air corridor won't look like\n      // an air corridor; it will look like a line.\n\n      if ((oAM === null || oAM.length === 0) || (oAM.length > 0 && (isNaN(oAM[0]) || oAM[0] === null))) {\n        if (item.data && item.data.coordinates && item.data.coordinates.length > 1) {\n          var coord0 = item.data.coordinates[0];\n          var coord1 = item.data.coordinates[1];\n\n          // var pointCartographic0 = Cesium.Cartographic.fromDegrees(coord0[0], coord0[1], 0);\n          // var pointCartographic1 = Cesium.Cartographic.fromDegrees(coord1[0], coord1[1], 0);\n          // var dist = pointCartographic0.distanceTo(pointCartographic1);\n          // lonDistance = dist / 4;\n\n          var pointCartographic0 = new WorldWind.Location(coord0[0], coord0[1]);\n          var pointCartographic1 = new WorldWind.Location(coord1[0], coord1[1]);\n\n          var dist = WorldWind.Location.greatCircleDistance(pointCartographic0, pointCartographic1);\n\n          lonDistance = dist / 4;\n        }\n        else {\n          lonDistance = lonDistance / 34;\n        }\n\n        oAM[0] = lonDistance;\n        overrides = {\n          distance: oAM\n        };\n      }\n      else {\n        overrides = {\n          distance: oAM\n        };\n      }\n\n      break;\n  }\n\n  return overrides;\n};\n\n/**\n *\n * @param modifiers\n * @returns {number}\n */\nEMPWorldWind.utils.milstd.checkSymbolStandard = function(modifiers) {\n  var standard = 1,\n    modifiersCopy,\n    modValue;\n\n  try {\n    if (modifiers !== undefined && modifiers !== null && modifiers !== \"\") {\n      modifiersCopy = typeof (modifiers) === \"string\" ? JSON.parse(modifiers) : emp.helpers.copyObject(modifiers);\n\n      if (modifiersCopy.hasOwnProperty(\"modifiers\")) {\n        modifiersCopy = modifiersCopy.modifiers;\n      }\n\n      if (modifiersCopy.hasOwnProperty(\"renderer\")) {\n        modValue = modifiersCopy.renderer;\n        if (modValue !== undefined && modValue !== null && modValue !== 0) {\n          if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n          }\n          else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n          }\n          else {\n            standard = modValue;\n          }\n        }\n      }\n      else if (modifiersCopy.hasOwnProperty(\"standard\")) {\n        modValue = modifiersCopy.standard;\n        if (modValue !== undefined && modValue !== null && modValue !== 0) {\n          if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n          }\n          else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) > -1) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n          }\n          else if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n          }\n          else if (modValue.toLowerCase().indexOf(emp.typeLibrary.featureMilStdVersionType.MILSTD_2525B.toLowerCase()) > -1) {\n            standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n          }\n          else {\n            standard = modValue;\n          }\n        }\n      }\n    }\n  }\n  catch (err) {\n    window.console.log(\"Error getting symbol standard\");\n  }\n\n  return standard;\n};\n\n\n/**\n *\n * @param modifiers\n */\nEMPWorldWind.utils.convertSymbolStandardToRendererFormat = function(modifiers) {\n  var standard,\n    modValue;\n\n  modValue = modifiers.standard;\n  if (modValue.toLowerCase() === emp.typeLibrary.featureMilStdVersionType.MILSTD_2525C.toLowerCase()) {\n    standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525C;\n  }\n  else {\n    standard = EMPWorldWind.constants.RendererSettings.standard.Symbology_2525Bch2_USAS_13_14;\n  }\n\n  return standard;\n};\n\n/**\n * Parses a 6 character color string, assumes full opacity\n * @param hex #RRGGBB\n * @returns {RGBAColor}\n * @private\n */\nfunction _hex6ToRGBA(hex) {\n  hex = hex.replace('#', '');\n  var r, g, b;\n\n  r = parseInt(hex.substring(0, 2), 16);\n  g = parseInt(hex.substring(2, 4), 16);\n  b = parseInt(hex.substring(4, 6), 16);\n\n  return {\n    red: r,\n    green: g,\n    blue: b,\n    alpha: 1\n  };\n}\n\n/**\n * Parses an 8 character color string\n * @param hex AARRGGBB format\n * @returns {RGBAColor}\n * @private\n */\nfunction _hex8ToRGBA(hex) {\n  var r, g, b, a;\n\n  a = parseInt(hex.substring(0, 2), 16) / 256.0;\n  r = parseInt(hex.substring(2, 4), 16);\n  g = parseInt(hex.substring(4, 6), 16);\n  b = parseInt(hex.substring(6, 8), 16);\n\n  return {\n    red: r,\n    green: g,\n    blue: b,\n    alpha: a\n  };\n}\n\n/**\n * @example\n * hexToRGBA(\"#00FF83\")\n *\n * @param {string} hex\n * @param {float} [alpha=1] 0-1 expected range\n * @param {boolean} [normalize=true] True produce float values between 0 and 1, otherwise integers between 0 and 255\n * @returns {RGBAColor}\n */\nEMPWorldWind.utils.hexToRGBA = function(hex, alpha, normalize) {\n  var newHex;\n\n  if (!hex) {\n    return {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    };\n  }\n  normalize = EMPWorldWind.utils.defined(normalize) ? normalize : true;\n  alpha = EMPWorldWind.utils.defined(alpha) ? alpha : 1;\n\n  if (hex.length === 8) {\n    newHex = _hex8ToRGBA(hex);\n  }\n  else {\n    newHex = _hex6ToRGBA(hex);\n    newHex.alpha = alpha;\n  }\n\n  if (normalize) {\n    newHex.red = newHex.red / 256.0;\n    newHex.green = newHex.green / 256.0;\n    newHex.blue = newHex.blue / 256.0;\n  }\n\n  return newHex;\n};\n\n/**\n * Will normalize an {@link RGBAColor} object, will return the same object if already normalized\n * (contains a decimal in the value)\n *\n * WorldWind.Color requires 0-1 values for color\n *\n * @param {RGBAColor} color\n * @returns {RGBAColor}\n */\nEMPWorldWind.utils.normalizeRGBAColor = function(color) {\n  var normalize,\n    normalColor = Object.assign({}, color);\n\n  normalize = color.red.toString().indexOf('.') === -1 ||\n    color.green.toString().indexOf('.') === -1 ||\n    color.blue.toString().indexOf('.') === -1;\n\n  if (normalize) {\n    normalColor.red = color.red / 256.0;\n    normalColor.green = color.green / 256.0;\n    normalColor.blue = color.blue / 256.0;\n  }\n\n  return normalColor;\n};\n\n/**\n * Returns the east-west distance of the bounds\n * @param {Bounds} bounds\n * @returns {number}\n */\nEMPWorldWind.utils.boundsWidth = function(bounds) {\n  return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n      new WorldWind.Location(0, bounds.west),\n      new WorldWind.Location(0, bounds.east));\n};\n\n/**\n * Returns the north-south distance of the bounds\n * @param {Bounds} bounds\n * @returns {number}\n */\nEMPWorldWind.utils.boundsHeight = function(bounds) {\n  return WorldWind.EARTH_RADIUS * WorldWind.Location.greatCircleDistance(\n      new WorldWind.Location(bounds.south, 0),\n      new WorldWind.Location(bounds.north, 0));\n};\n\n\n/**\n * Dot color based on the symbol code affiliation\n * @param symbolCode\n * @returns {*}\n */\nEMPWorldWind.utils.selectHighAltitudeRangeImage = function(symbolCode) {\n  var affiliationLetter,\n    highAltitudeRangeImage;\n\n  if (!EMPWorldWind.utils.defined(symbolCode)) {\n    return EMPWorldWind.constants.highAltitudeRangeImage.highScaleImageYellow; // unknown\n  }\n\n  affiliationLetter = symbolCode.substring(1, 2);\n  switch (affiliationLetter.toLowerCase()) {\n    case \"h\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageRed;\n      break;\n    case \"f\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageBlue;\n      break;\n    case \"n\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageGreen;\n      break;\n    case \"u\":\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n      break;\n    default:\n      highAltitudeRangeImage = EMPWorldWind.constants.highAltitudeRangeImage.highRangeImageYellow;\n      break;\n  }\n  return highAltitudeRangeImage;\n};\n\n/**\n *\n * @param CameraAltitude\n * @param singlePointAltitudeRanges\n * @returns {EMPWorldWind.constants.SinglePointAltitudeRangeMode|number}\n */\nEMPWorldWind.utils.getSinglePointAltitudeRangeMode = function(CameraAltitude, singlePointAltitudeRanges) {\n  if (CameraAltitude < singlePointAltitudeRanges.mid) {\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n  }\n  else if (CameraAltitude >= singlePointAltitudeRanges.mid && CameraAltitude < singlePointAltitudeRanges.high) {\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE;\n  }\n  else if (CameraAltitude >= singlePointAltitudeRanges.high) {\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE;\n  }\n  else {\n    //default\n    return EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n  }\n};\n\n\nEMPWorldWind.Math = {};\n\n/**\n * Determines if two values are equal using an absolute or relative tolerance test. This is useful\n * to avoid problems due to roundoff error when comparing floating-point values directly. The values are\n * first compared using an absolute tolerance test. If that fails, a relative tolerance test is performed.\n * Use this test if you are unsure of the magnitudes of left and right.\n *\n * @param {Number} left The first value to compare.\n * @param {Number} right The other value to compare.\n * @param {Number} relativeEpsilon The maximum inclusive delta between <code>left</code> and <code>right</code> for the relative tolerance test.\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The maximum inclusive delta between <code>left</code> and <code>right</code> for the absolute tolerance test.\n * @returns {Boolean} <code>true</code> if the values are equal within the epsilon; otherwise, <code>false</code>.\n *\n * @example\n * var a = Cesium.Math.equalsEpsilon(0.0, 0.01, Cesium.Math.EPSILON2); // true\n * var b = Cesium.Math.equalsEpsilon(0.0, 0.1, Cesium.Math.EPSILON2);  // false\n * var c = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON7); // true\n * var d = Cesium.Math.equalsEpsilon(3699175.1634344, 3699175.2, Cesium.Math.EPSILON9); // false\n */\nEMPWorldWind.Math.equalsEpsilon = function(left, right, relativeEpsilon, absoluteEpsilon) {\n  absoluteEpsilon = EMPWorldWind.Math.defaultValue(absoluteEpsilon, relativeEpsilon);\n  var absDiff = Math.abs(left - right);\n  return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\n};\n\n\n/**\n * Returns the first parameter if not undefined, otherwise the second parameter.\n * Useful for setting a default value for a parameter.\n *\n * @exports defaultValue\n *\n * @param {*} a\n * @param {*} b\n * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\n *\n * @example\n * param = Cesium.defaultValue(param, 'default');\n */\nEMPWorldWind.Math.defaultValue = function(a, b) {\n  if (a !== undefined) {\n    return a;\n  }\n  return b;\n};\n\n\n/**\n * 0.1\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON1 = 0.1;\n\n/**\n * 0.01\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON2 = 0.01;\n\n/**\n * 0.001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON3 = 0.001;\n\n/**\n * 0.0001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON4 = 0.0001;\n\n/**\n * 0.00001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON5 = 0.00001;\n\n/**\n * 0.000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON6 = 0.000001;\n\n/**\n * 0.0000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON7 = 0.0000001;\n\n/**\n * 0.00000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON8 = 0.00000001;\n\n/**\n * 0.000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON9 = 0.000000001;\n\n/**\n * 0.0000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON10 = 0.0000000001;\n\n/**\n * 0.00000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON11 = 0.00000000001;\n\n/**\n * 0.000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON12 = 0.000000000001;\n\n/**\n * 0.0000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON13 = 0.0000000000001;\n\n/**\n * 0.00000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON14 = 0.00000000000001;\n\n/**\n * 0.000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON15 = 0.000000000000001;\n\n/**\n * 0.0000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON16 = 0.0000000000000001;\n\n/**\n * 0.00000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON17 = 0.00000000000000001;\n\n/**\n * 0.000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON18 = 0.000000000000000001;\n\n/**\n * 0.0000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON19 = 0.0000000000000000001;\n\n/**\n * 0.00000000000000000001\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.EPSILON20 = 0.00000000000000000001;\n\n/**\n * 3.986004418e14\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.GRAVITATIONALPARAMETER = 3.986004418e14;\n\n/**\n * Radius of the sun in meters: 6.955e8\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.SOLAR_RADIUS = 6.955e8;\n\n/**\n * The mean radius of the moon, according to the \"Report of the IAU/IAG Working Group on\n * Cartographic Coordinates and Rotational Elements of the Planets and satellites: 2000\",\n * Celestial Mechanics 82: 83-110, 2002.\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.LUNAR_RADIUS = 1737400.0;\n\n/**\n * 64 * 1024\n * @type {Number}\n * @constant\n */\nEMPWorldWind.Math.SIXTY_FOUR_KILOBYTES = 64 * 1024;\n\n/**\n * Returns the sign of the value; 1 if the value is positive, -1 if the value is\n * negative, or 0 if the value is 0.\n *\n * @param {Number} value The value to return the sign of.\n * @returns {Number} The sign of value.\n */\nEMPWorldWind.Math.sign = function(value) {\n  if (value > 0) {\n    return 1;\n  }\n  if (value < 0) {\n    return -1;\n  }\n\n  return 0;\n};\n\n/**\n * Returns 1.0 if the given value is positive or zero, and -1.0 if it is negative.\n * This is similar to {@link CesiumMath#sign} except that returns 1.0 instead of\n * 0.0 when the input value is 0.0.\n * @param {Number} value The value to return the sign of.\n * @returns {Number} The sign of value.\n */\nEMPWorldWind.Math.signNotZero = function(value) {\n  return value < 0.0 ? -1.0 : 1.0;\n};\n\n","var EMPWorldWind = window.EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * Set of builder functions that produce singular WorldWind primitive shapes and renderables.\n * @namespace\n */\nEMPWorldWind.editors.primitiveBuilders = EMPWorldWind.editors.primitiveBuilders || {};\n\n/**\n * @param {emp.typeLibrary.Feature | object} feature\n * @returns {WorldWind.TextAttributes}\n */\nEMPWorldWind.editors.primitiveBuilders.createTextAttributes = function(feature) {\n  var textColor, size,\n    attributes = new WorldWind.TextAttributes();\n\n  // Set the offset\n  attributes.offset = new WorldWind.Offset(\n    WorldWind.OFFSET_FRACTION, -0.05, // To the right of the point by default\n    WorldWind.OFFSET_FRACTION, 0.5 // Center Y be default\n  );\n\n  // Should not be occluded by terrain or objects when false\n  attributes.depthTest = false;\n\n  // Label Color\n  if (feature.properties.labelStyle && feature.properties.labelStyle.color) {\n    textColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.labelStyle.color);\n  } else if (feature.properties.fontColor) {\n    textColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fontColor);\n  } else {\n    textColor = EMPWorldWind.utils.hexToRGBA(EMPWorldWind.constants.propertyDefaults.FILL_COLOR_HEX);\n  }\n  attributes.color = new WorldWind.Color(textColor.red, textColor.green, textColor.blue, textColor.alpha);\n\n  // Font Family\n  if (feature.properties.labelStyle && feature.properties.labelStyle.family) {\n    attributes.font.family = feature.properties.labelStyle.family;\n  } else if (feature.properties.fontFamily) {\n    attributes.font.family = feature.properties.fontFamily;\n  }\n\n  // Justification\n  if (feature.properties.labelStyle && feature.properties.labelStyle.justification) {\n    attributes.font.horizontalAlignment = feature.properties.labelStyle.justification;\n  } else if (feature.properties.labelAlign) {\n    attributes.font.horizontalAlignment = feature.properties.labelAlign;\n  }\n\n  // Font size\n  if (feature.properties.labelStyle && feature.properties.labelStyle.size) {\n    attributes.font.size = feature.properties.labelStyle.size;\n  } else if (feature.properties.fontSize) {\n    size = feature.properties.fontSize;\n    size = size.substring(0, size.length - 2);\n    if (!isNaN(size)) {\n      attributes.font.size = parseInt(feature.properties.fontSize);\n    }\n  }\n\n  // Label Scale\n  if (feature.properties.labelStyle && feature.properties.labelStyle.scale) {\n    attributes.scale = feature.properties.labelStyle.scale;\n  }\n\n  return attributes;\n};\n\n/**\n * Wrapper function for generating the appropriate attributes based on the given feature and selection style\n * @param {emp.typeLibrary.Feature | object} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {{attributes: *, highlightAttributes: *}}\n */\nEMPWorldWind.editors.primitiveBuilders.createShapeAttributes = function(feature, selectionStyle) {\n  var lineColor, fillColor, highlightAttributes,\n    selectedLineColor, selectedFillColor, selectedLabelColor;\n\n  var attributes = new WorldWind.ShapeAttributes();\n\n  switch (feature.format) {\n    case emp3.api.enums.FeatureTypeEnum.GEO_ACM: // TODO handle GEO_ACM attributes\n    case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL: // Do nothing, handled by renderer, no primitives\n    case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n      // Use PlacemarkAttributes\n      attributes = new WorldWind.PlacemarkAttributes();\n\n      // Set the imageURL\n      if (feature.properties.iconUrl) {\n        attributes.imageSource = feature.properties.iconUrl;\n        if (feature.properties.useProxy) {\n          attributes.imageSource = emp3.api.global.configuration.urlProxy + \"?url=\" + attributes.imageSource;\n        }\n      } else {\n        attributes.imageSource = WorldWind.configuration.baseUrl + \"images/emp-default-icon.png\";\n      }\n\n\n      // Create the label attributes\n      attributes.labelAttributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n      // Create the highlight attributes\n      highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n\n      // Create separate label highlights, will be linked and overridden to the normal attributes if not\n      highlightAttributes.labelAttributes = new WorldWind.TextAttributes(attributes.labelAttributes);\n\n      // Image scale may differ when selected\n      if (selectionStyle.scale) {\n        highlightAttributes.imageScale = selectionStyle.scale;\n      }\n\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.imageColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.imageColor = WorldWind.Color.YELLOW;\n      }\n\n      // Update the label attributes for highlighted labels\n      highlightAttributes.labelAttributes.offset = attributes.labelAttributes.offset;\n      highlightAttributes.labelAttributes.color = highlightAttributes.imageColor;\n      break;\n    case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n      // GeographicText requires TextAttributes instead\n      attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(feature);\n\n      // Create highlight attributes from the regular attributes, only update highlight color\n      highlightAttributes = new WorldWind.TextAttributes(attributes);\n      if (selectionStyle.lineColor) {\n        selectedLabelColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.color = new WorldWind.Color(selectedLabelColor.red, selectedLabelColor.green, selectedLabelColor.blue, selectedLabelColor.alpha);\n      } else {\n        highlightAttributes.color = WorldWind.Color.YELLOW;\n      }\n      break;\n    case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n    case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n    case emp3.api.enums.FeatureTypeEnum.GEO_PATH: // Not all of the attributes are used for path/polyline\n    case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n    case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n    case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n    default:\n      // Set stroke color\n      if (feature.properties.strokeStyle && feature.properties.strokeStyle.strokeColor) {\n        lineColor = EMPWorldWind.utils.normalizeRGBAColor(feature.properties.strokeStyle.strokeColor);\n        attributes.outlineColor = new WorldWind.Color(lineColor.red, lineColor.green, lineColor.blue, lineColor.alpha);\n      } else {\n        attributes.outlineColor = WorldWind.Color.BLACK;\n      }\n\n      // Set fill color\n      if (feature.properties.fillColor) {\n        fillColor = EMPWorldWind.utils.hexToRGBA(feature.properties.fillColor);\n        attributes.interiorColor = new WorldWind.Color(fillColor.red, fillColor.green, fillColor.blue, fillColor.alpha);\n      } else {\n        attributes.drawInterior = false;\n      }\n\n      // TODO fillPattern is not yet supported by the ShapeAttributes class\n\n      // Line width\n      if (feature.properties.strokeWidth || feature.properties.lineWidth) {\n        attributes.outlineWidth = feature.properties.strokeWidth || feature.properties.lineWidth;\n      }\n\n      // Stippling of outline\n      attributes.outlineStippleFactor = feature.properties.stippleFactor || attributes.outlineStippleFactor;\n      attributes.outlineStipplePattern = feature.properties.stipplePattern || attributes.outlineStipplePattern;\n\n      // Generate the highlight attributes from the normal attributes\n      highlightAttributes = new WorldWind.ShapeAttributes(attributes);\n\n      // Update the selected lineColor\n      if (selectionStyle.lineColor) {\n        selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n        highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n      } else {\n        highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n      }\n\n      // Update the selected fillColor\n      if (selectionStyle.fillColor) {\n        selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n        highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n      } else {\n        highlightAttributes.drawInterior = false;\n      }\n  }\n\n  return {\n    attributes: attributes,\n    highlightAttributes: highlightAttributes\n  };\n};\n\n/**\n * @todo Use update from NASA WW to handle 3d airspaces\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Polygon}\n */\nEMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure = function(feature, selectionStyle) {\n  var primitivePolygon, boundaries, attributes, highlightAttributes,\n    i, selectedFillColor,\n    len = feature.data.coordinates.length;\n\n  attributes = new WorldWind.ShapeAttributes();\n  highlightAttributes = new WorldWind.ShapeAttributes();\n  // TODO highlight attributes for ACM\n\n  if (selectionStyle.fillColor) {\n    selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n    highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n  } else {\n    highlightAttributes.interiorColor = WorldWind.Color.YELLOW;\n  }\n\n  boundaries = [];\n  for (i = 0; i < len; i++) {\n    // TODO need updates to WorldWind to fix this correctly, also not setting altitude if there are multiple attributes\n    //boundaries[0].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].minAlt));\n    //boundaries[1].push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n    boundaries.push(new WorldWind.Position(feature.data.coordinates[i][1], feature.data.coordinates[i][0], feature.properties.attributes[0].maxAlt));\n  }\n\n  primitivePolygon = new WorldWind.Polygon(boundaries, attributes);\n  primitivePolygon.altitudeMode = WorldWind.ABSOLUTE;\n  primitivePolygon.extrude = true;\n  primitivePolygon.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n  return primitivePolygon;\n};\n\n/**\n * Builds a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceCircle} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfaceCircle}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle = function(feature, selectionStyle) {\n  var attributes, location, circlePrimitive;\n\n  // Construct circle attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the location\n  location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n  // Construct the primitive\n  circlePrimitive = new WorldWind.SurfaceCircle(location, feature.properties.radius, attributes.attributes);\n\n  // Set the primitive properties\n  circlePrimitive.displayName = feature.name;\n  circlePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  circlePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return circlePrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceEllipse} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfaceEllipse}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse = function(feature, selectionStyle) {\n  var attributes, location, ellipsePrimitive;\n\n  // Construct the ellipse attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the location\n  location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n  // Construct the primitive\n  ellipsePrimitive = new WorldWind.SurfaceEllipse(location,\n    feature.properties.semiMajor,\n    feature.properties.semiMinor,\n    feature.properties.azimuth,\n    attributes.attributes);\n\n  // Set the primitive properties\n  ellipsePrimitive.displayName = feature.name;\n  ellipsePrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  ellipsePrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return ellipsePrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolyline} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolyline}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline = function(feature, selectionStyle) {\n  var i, pathPrimitive, attributes,\n    len = feature.data.coordinates.length,\n    locations = [];\n\n  // Construct the path attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the locations\n  for (i = 0; i < len; i++) {\n    locations.push(new WorldWind.Location(feature.data.coordinates[i][1], feature.data.coordinates[i][0]));\n  }\n\n  // Construct the primitive\n  pathPrimitive = new WorldWind.SurfacePolyline(locations, attributes.attributes);\n\n  // Set the primitive properties\n  pathPrimitive.displayName = feature.name;\n  pathPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  pathPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return pathPrimitive;\n};\n\n/**\n * This function is similar to the feature based version except it takes a geoJSON object as the only parameter.\n * @param {object} geoJSON\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolyline}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON = function(geoJSON, selectionStyle) {\n  var i, color, attributes, highlightAttributes, polylinePrimitive, selectedLineColor,\n    len = geoJSON.coordinates.length,\n    locations = [];\n\n  attributes = new WorldWind.ShapeAttributes();\n  // SurfacePolyline uses the following attributes\n  if (geoJSON.properties.strokeColor) {\n    color = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor, geoJSON.properties.lineOpacity);\n    attributes.outlineColor = new WorldWind.Color(color.red, color.green, color.blue, color.alpha);\n  } else {\n    attributes.outlineColor = WorldWind.Color.BLACK;\n  }\n\n  attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n  for (i = 0; i < len; i++) {\n    locations.push(new WorldWind.Location(geoJSON.coordinates[i][1], geoJSON.coordinates[i][0]));\n  }\n\n  highlightAttributes = new WorldWind.ShapeAttributes();\n  if (selectionStyle.lineColor) {\n    selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n    highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n  } else {\n    highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n  }\n\n  polylinePrimitive = new WorldWind.SurfacePolyline(locations, attributes);\n  polylinePrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  polylinePrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n  return polylinePrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Placemark} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Placemark}\n */\nEMPWorldWind.editors.primitiveBuilders.constructPlacemark = function(feature, selectionStyle) {\n  var position, placemark, attributes,\n    eyeDistanceScaling = false;\n\n  // Create the placemark attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the position\n  position = new WorldWind.Position(\n    feature.data.coordinates[1],\n    feature.data.coordinates[0],\n    feature.data.coordinates[2] || 0);\n\n  // Construct the primitive\n  placemark = new WorldWind.Placemark(position, eyeDistanceScaling, attributes.attributes);\n\n  // Set the placemark attributes\n  placemark.alwaysOnTop = true;\n  placemark.label = feature.name;\n  placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(attributes.highlightAttributes);\n\n  return placemark;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfacePolygon} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolygon}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon = function(feature, selectionStyle) {\n  var polygonPrimitive, attributes, boundaryLen,\n    i, j,\n    boundaries = [],\n    numBounds = feature.data.coordinates.length;\n\n  // Construct the polygon attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the boundary locations\n  for (i = 0; i < numBounds; i++) {\n    boundaryLen = feature.data.coordinates[i].length;\n    var subBoundary = [];\n    for (j = 0; j < boundaryLen; j++) {\n      subBoundary.push(new WorldWind.Location(feature.data.coordinates[i][j][1], feature.data.coordinates[i][j][0]));\n    }\n    boundaries.push(subBoundary);\n  }\n\n  // Construct the primitive\n  polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes.attributes);\n\n  // Set the primitive properties\n  polygonPrimitive.displayName = feature.name;\n  polygonPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  polygonPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return polygonPrimitive;\n};\n\n/**\n *\n * @param {object} geoJSON\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfacePolygon}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON = function(geoJSON, selectionStyle) {\n  var attributes, interiorColor, outlineColor, boundaryLen, polygonPrimitive,\n    selectedLineColor, selectedFillColor, highlightAttributes,\n    i, j,\n    boundaries = [],\n    numBounds = geoJSON.geometry.coordinates.length;\n\n  for (i = 0; i < numBounds; i++) {\n    boundaryLen = geoJSON.geometry.coordinates[i].length;\n    var subBoundary = [];\n    for (j = 0; j < boundaryLen; j++) {\n      subBoundary.push(new WorldWind.Location(geoJSON.geometry.coordinates[i][j][1], geoJSON.geometry.coordinates[i][j][0]));\n    }\n    boundaries.push(subBoundary);\n  }\n\n  attributes = new WorldWind.ShapeAttributes();\n  if (geoJSON.properties.strokeColor) {\n    outlineColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.strokeColor);\n    attributes.outlineColor = new WorldWind.Color(outlineColor.red, outlineColor.green, outlineColor.blue, outlineColor.alpha);\n  } else {\n    attributes.outlineColor = WorldWind.Color.BLACK;\n  }\n\n  if (geoJSON.properties.fillColor) {\n    interiorColor = EMPWorldWind.utils.hexToRGBA(geoJSON.properties.fillColor);\n    attributes.interiorColor = new WorldWind.Color(interiorColor.red, interiorColor.green, interiorColor.blue, interiorColor.alpha);\n  } else {\n    attributes.drawInterior = false;\n  }\n\n  attributes.outlineWidth = geoJSON.properties.strokeWidth || attributes.outlineWidth;\n\n  attributes.outlineStippleFactor = geoJSON.properties.stippleFactor || attributes.outlineStippleFactor;\n  attributes.outlineStipplePattern = geoJSON.properties.stipplePattern || attributes.outlineStipplePattern;\n\n  highlightAttributes = new WorldWind.ShapeAttributes();\n  if (selectionStyle.lineColor) {\n    selectedLineColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n    highlightAttributes.outlineColor = new WorldWind.Color(selectedLineColor.red, selectedLineColor.green, selectedLineColor.blue, selectedLineColor.alpha);\n  } else {\n    highlightAttributes.outlineColor = WorldWind.Color.YELLOW;\n  }\n  if (selectionStyle.fillColor) {\n    selectedFillColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.fillColor);\n    highlightAttributes.interiorColor = new WorldWind.Color(selectedFillColor.red, selectedFillColor.green, selectedFillColor.blue, selectedFillColor.alpha);\n  } else {\n    highlightAttributes.drawInterior = false;\n  }\n\n  polygonPrimitive = new WorldWind.SurfacePolygon(boundaries, attributes);\n  polygonPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  polygonPrimitive.displayName = geoJSON.properties.name;\n  polygonPrimitive.highlightAttributes = new WorldWind.ShapeAttributes(highlightAttributes);\n\n  return polygonPrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.SurfaceRectangle} primitive\n * This handles rectangles and squares\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.SurfaceRectangle}\n */\nEMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle = function(feature, selectionStyle) {\n  var attributes, location, width, height, rectPrimitive;\n\n  // Construct the rectangle/square attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the location\n  location = new WorldWind.Location(feature.coordinates[1], feature.coordinates[0]);\n\n  // Determine rect or square\n  if (feature.format === emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE) {\n    // Rectangle\n    width = feature.properties.width;\n    height = feature.properties.height;\n  } else {\n    // Square, width equals height\n    width = feature.properties.width;\n    height = feature.properties.width;\n  }\n\n  // Construct the primitive\n  rectPrimitive = new WorldWind.SurfaceRectangle(location, width, height, feature.properties.azimuth, attributes.attributes);\n\n  // Set the primitive properties\n  rectPrimitive.displayName = feature.name;\n  rectPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  rectPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return rectPrimitive;\n};\n\n/**\n * Constructs a {@link EMPWorldWind.data.EmpFeature} using using the {@link WorldWind.Text} primitive\n * @param {emp.typeLibrary.Feature} feature\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Text}\n */\nEMPWorldWind.editors.primitiveBuilders.constructText = function(feature, selectionStyle) {\n  var attributes, position, textPrimitive;\n\n  // Construct circle attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createShapeAttributes(feature, selectionStyle);\n\n  // Set the position\n  position = new WorldWind.Position(\n    feature.coordinates[1], // Latitude\n    feature.coordinates[0], // Longitude\n    feature.coordinates[2] ? feature.coordinates[2] : 0); // Altitude\n\n  // Construct the text\n  textPrimitive = new WorldWind.GeographicText(position, feature.name);\n\n  // Set the primitive properties\n  textPrimitive.attributes = attributes.attributes;\n  textPrimitive.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  textPrimitive.highlightAttributes = attributes.highlightAttributes;\n\n  return textPrimitive;\n};\n\n/**\n * @param {object} geoJSON\n * @param {SelectionStyle} selectionStyle\n * @returns {WorldWind.Text}\n */\nEMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON = function(geoJSON, selectionStyle) {\n  var textPrimitive, attributes, highlightAttributes, selectedColor, position;\n\n  // Create the attributes\n  attributes = EMPWorldWind.editors.primitiveBuilders.createTextAttributes(geoJSON);\n\n  // Create the highlight attributes\n  highlightAttributes = new WorldWind.TextAttributes(attributes);\n  if (selectionStyle.lineColor) {\n    selectedColor = EMPWorldWind.utils.hexToRGBA(selectionStyle.lineColor);\n    highlightAttributes.color = new WorldWind.Color(selectedColor.red, selectedColor.green, selectedColor.blue, selectedColor.alpha);\n  } else {\n    highlightAttributes.color = WorldWind.Color.YELLOW;\n  }\n\n  // Set the position\n  position = new WorldWind.Position(\n    geoJSON.geometry.coordinates[1], // Latitude\n    geoJSON.geometry.coordinates[0], // Longitude\n    geoJSON.geometry.coordinates[2] ? geoJSON.geometry.coordinates[0] : 0); // Altitude\n\n  // Construct the primitive\n  textPrimitive = new WorldWind.GeographicText(position, geoJSON.properties.label);\n\n  // Set the attributes\n  textPrimitive.attributes = attributes;\n  textPrimitive.altitudeMode = geoJSON.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n  textPrimitive.highlightAttributes = highlightAttributes;\n\n  return textPrimitive;\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.editors = EMPWorldWind.editors || {};\n\n/**\n * @classdesc The EditorController handles all drawing, editing, and updating of features\n * @class\n */\nEMPWorldWind.editors.EditorController = (function() {\n  /**\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {object} modifiers\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.Placemark}\n   * @private\n   */\n  function _constructSinglePointMilStdSymbol(feature, modifiers, selectionStyle) {\n    var placemark, attributes, highlightAttributes, position, imageInfo, imageCenter, imageBounds, imageOffset,\n      selectedImage, symbolCode, selectedModifiers,\n      eyeDistanceScaling = false;\n\n    attributes = new WorldWind.PlacemarkAttributes();\n\n    // TODO pass in leaderline settings by feature or via config object\n    // Leaderline settings\n    attributes.drawLeaderLine = true;\n    attributes.leaderLineAttributes.outlineColor = WorldWind.Color.RED;\n\n    if (feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE) {\n      // Optimization\n      attributes.imageScale = 1;\n      attributes.imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.symbolCode);\n      highlightAttributes = new WorldWind.PlacemarkAttributes();\n      highlightAttributes.imageColor = WorldWind.Color.WHITE;\n      highlightAttributes.imageSource = attributes.imageSource;\n    }\n    else {\n\n      if ((this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE) && feature.symbolCode) {\n        // do not display country code\n        symbolCode = feature.symbolCode.substr(0, 12) + \"--\" + feature.symbolCode.substr(14);\n      }\n      else {\n        // display country code\n        symbolCode = feature.symbolCode;\n      }\n      // Render\n      imageInfo = armyc2.c2sd.renderer.MilStdIconRenderer.Render(symbolCode, modifiers);\n      imageCenter = imageInfo.getCenterPoint();\n      imageBounds = imageInfo.getImageBounds();\n\n      // Calculate offset\n      imageOffset = new WorldWind.Offset(\n        WorldWind.OFFSET_FRACTION, imageCenter.x / imageBounds.width,\n        WorldWind.OFFSET_FRACTION, 1 - (imageCenter.y / imageBounds.height)\n      );\n\n      attributes.imageScale = 1;\n      attributes.imageOffset = imageOffset;\n      attributes.imageSource = imageInfo.toDataUrl();\n\n      // Highlight attributes\n      highlightAttributes = new WorldWind.PlacemarkAttributes(attributes);\n      highlightAttributes.imageColor = WorldWind.Color.WHITE;\n      highlightAttributes.imageOffset = imageOffset;\n\n      // Note that this is done statically, if the selection style changes a bulk update to every feature will need to be done\n      selectedModifiers = Object.assign({}, modifiers);\n      selectedModifiers.LINECOLOR = selectionStyle.lineColor;\n      selectedModifiers.FILLCOLOR = selectionStyle.fillColor;\n      selectedImage = armyc2.c2sd.renderer.MilStdIconRenderer.Render(feature.symbolCode, selectedModifiers).toDataUrl();\n      highlightAttributes.imageSource = selectedImage;\n    }\n\n    position = new WorldWind.Position(\n      feature.data.coordinates[1],\n      feature.data.coordinates[0],\n      EMPWorldWind.utils.defined(feature.data.coordinates[2]) ? feature.data.coordinates[2] : 0);\n\n    placemark = new WorldWind.Placemark(position, eyeDistanceScaling);\n    placemark.alwaysOnTop = true;\n    placemark.altitudeMode = feature.properties.altitudeMode || WorldWind.CLAMP_TO_GROUND;\n    placemark.attributes = new WorldWind.PlacemarkAttributes(attributes);\n    placemark.highlightAttributes = new WorldWind.PlacemarkAttributes(highlightAttributes);\n\n    return placemark;\n  }\n\n  /**\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {object} modifiers\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceShape[]}\n   * @private\n   */\n  function _constructMultiPointMilStdFeature(feature, modifiers, selectionStyle) {\n    var imageInfo, componentFeature, lineCount, subGeoJSON, bbox, bounds, scale, featureCoords,\n      i, j,\n      positions = \"\",\n      shapes = [];\n\n    // Generate position string\n    featureCoords = feature.data.coordinates.join().split(\",\");\n    for (i = 0; i < featureCoords.length; i += 2) {\n      positions += featureCoords[i] + \",\" + featureCoords[i + 1] + \" \";\n    }\n    positions = positions.trim();\n\n    // Convert bounds to bbox\n    bounds = this.getBounds();\n    bbox = bounds.west + \",\" + bounds.south + \",\" + bounds.east + \",\" + bounds.north;\n\n    // Calculate the approximate scale\n    scale = EMPWorldWind.utils.boundsWidth(bounds) >> 2;\n\n    // TODO get update to renderer to pass back raw JSON object\n    imageInfo = JSON.parse(sec.web.renderer.SECWebRenderer.RenderSymbol(\n      feature.name,\n      feature.coreId,\n      feature.description,\n      feature.symbolCode,\n      positions,\n      WorldWind.CLAMP_TO_GROUND,\n      scale,\n      bbox,\n      modifiers,\n      EMPWorldWind.constants.MultiPointRenderType.GEOJSON));\n\n      feature.wasClipped = imageInfo.properties.wasClipped;\n\n    // Generate primitives from the geoJSON\n    for (i = 0; i < imageInfo.features.length; i++) {\n      componentFeature = imageInfo.features[i];\n\n      // TODO have the renderer return the proper width, manually overwriting the line width for now\n      componentFeature.properties.strokeWidth = 1;\n      componentFeature.properties.strokeWeight = 1;\n\n      switch (componentFeature.geometry.type) {\n        case \"MultiLineString\":\n          lineCount = componentFeature.geometry.coordinates.length;\n\n          for (j = 0; j < lineCount; j++) {\n            subGeoJSON = {\n              properties: componentFeature.properties,\n              coordinates: componentFeature.geometry.coordinates[j]\n            };\n\n            shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(subGeoJSON, selectionStyle));\n          }\n          break;\n        case \"LineString\":\n          shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolylineFromGeoJSON(componentFeature, selectionStyle));\n          break;\n        case \"Point\":\n          shapes.push(EMPWorldWind.editors.primitiveBuilders.constructTextFromGeoJSON(componentFeature, selectionStyle));\n          break;\n        case \"Polygon\":\n          shapes.push(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygonFromGeoJSON(componentFeature, selectionStyle));\n          break;\n        default:\n          window.console.error(\"Unable to render symbol with type \" + componentFeature.geometry.type);\n      }\n    }\n\n    return shapes;\n  }\n\n  /**\n   * Requires access to the current scope ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   */\n  function processModifiers(feature) {\n    var modifiers, enhancedModifiers, override, lowRangeMode;\n    if (feature.data.type === \"Point\") {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        this.state.labelStyles, // Single-point shows symbols based on settings\n        this.state.pixelSize);\n    } else {\n      modifiers = EMPWorldWind.utils.milstd.updateModifierLabels(\n        feature.properties,\n        feature.name,\n        EMPWorldWind.constants.AllLabels, // Multi-point always shows symbols\n        this.state.pixelSize);\n    }\n\n    lowRangeMode = feature.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE;\n    modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(modifiers, ((this.state.labelStyles.CN === true) && lowRangeMode));\n    //modifiers = EMPWorldWind.utils.milstd.convertModifierStringTo2525(modifiers, true);\n\n    enhancedModifiers = EMPWorldWind.utils.milstd.checkForRequiredModifiers(feature);\n\n    for (override in enhancedModifiers) {\n      if (enhancedModifiers.hasOwnProperty(override)) {\n        modifiers[override] = enhancedModifiers[override];\n      }\n    }\n\n    return modifiers;\n  }\n\n  /**\n   * Requires access to the current scope.\n   * ie .bind .call .apply\n   *\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {SelectionStyle} selectionStyle\n   * @returns {WorldWind.SurfaceShape[]}\n   */\n  function constructMilStdSymbol(feature, selectionStyle) {\n    var modifiers, shapes = [];\n\n    // Process the modifiers\n    modifiers = processModifiers.call(this, feature);\n\n    if (feature.data.type === \"Point\") {\n      shapes.push(_constructSinglePointMilStdSymbol.call(this, feature, modifiers, selectionStyle));\n    } else if (feature.data.type === \"LineString\") {\n      // Requires access to the WorldWindow navigator, bind to the current scope\n      shapes = shapes.concat(_constructMultiPointMilStdFeature.call(this, feature, modifiers, selectionStyle));\n    } else {\n      // TODO alert the user more gracefully that the type is unhandled\n      window.console.error(\"Unhandled feature type: \" + feature.data.type + \" in EMPWorldWind\");\n    }\n\n    return shapes;\n  }\n\n  /**\n   * Async function\n   * @param {emp.typeLibrary.Feature} feature\n   * @param {PlotFeatureCB} callback\n   * @this EMPWorldWind.map\n   */\n  function asyncPlotKMLFeature(feature, callback) {\n    var url, kmlFilePromise, kmlLayer, wwFeature,\n      rc = {\n        success: false\n      };\n\n    // Convert the kml string to a data url\n    url = \"data:text/xml,\" + encodeURIComponent(feature.data);\n\n    // Build the KML file promise\n    kmlFilePromise = new WorldWind.KmlFile(url);\n    kmlFilePromise\n      .then(function(kmlFile) {\n        // Construct the KML layer to hold the document\n        kmlLayer = new WorldWind.RenderableLayer(feature.coreId);\n\n        // Add the KML layer to the map\n        kmlLayer.addRenderable(kmlFile);\n        this.worldWindow.addLayer(kmlLayer);\n\n        // Use the standard data holder to keep track of the layer\n        wwFeature = new EMPWorldWind.data.EmpFeature(feature);\n        wwFeature.addShapes(kmlLayer); // This isn't a WW primitive but use it as if it was\n\n        // Record the layer so we can remove/modify it later\n        this.layers[feature.coreId] = kmlLayer;\n\n        // Configure the callback args\n        rc.success = true;\n        rc.feature = wwFeature;\n\n        // Fire the callback\n        callback(rc);\n      }.bind(this));\n  }\n\n  return {\n    /**\n     * Creates a new EMPWorldWind feature and associated WorldWind features from an EMP feature and adds it to the map\n     *\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback Callback to be invoked on completion\n     * @this EMPWorldWind.map\n     */\n    plotFeature: function(empFeature, callback) {\n      var wwFeature, layer, buildShapes, shapes;\n\n      var rc = {\n        message: \"\",\n        success: true,\n        feature: undefined\n      };\n\n      switch (empFeature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          buildShapes = constructMilStdSymbol.bind(this);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructPlacemark;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          buildShapes = EMPWorldWind.editors.primitiveBuilders.constructText;\n          break;\n        case emp3.api.enums.FeatureTypeEnum.KML:\n          // KML is not supported as native primitives in WorldWind\n          // TODO KML selection, not sure how to support it or represent it\n          return asyncPlotKMLFeature.call(this, empFeature, callback);\n        default:\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      }\n\n      // Check if we have a builder for standard primitives\n      if (!rc.success) {\n        callback(rc);\n        return;\n      }\n\n      // construct the feature\n      wwFeature = new EMPWorldWind.data.EmpFeature(empFeature);\n      wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n      empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n      empFeature.range =  this.worldWindow.navigator.range;\n\n      // Build the primitives\n      shapes = buildShapes(empFeature, this.state.selectionStyle);\n      wwFeature.addShapes(shapes);\n\n      // Add the feature to the layer\n      layer = this.getLayer(empFeature.parentCoreId);\n      layer.addFeature(wwFeature);\n\n      // Configure the callback params\n      rc.feature = wwFeature;\n      rc.success = true;\n\n      // Fire the callback\n      callback(rc);\n    },\n    /**\n     * Updates a WorldWind Renderable object on the map and returns the updated objects in the response\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @param {emp.typeLibrary.Feature} empFeature\n     * @param {PlotFeatureCB} callback\n     * @this EMPWorldWind.map\n     */\n    updateFeature: function(wwFeature, empFeature, callback) {\n      var layer,\n        rc = {\n          success: true,\n          message: \"\",\n          feature: wwFeature\n        };\n\n      // Remove existing primitives from the map\n      if (empFeature.format !== emp3.api.enums.FeatureTypeEnum.KML) {\n        layer = this.getLayer(empFeature.parentCoreId);\n        empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n        layer.removeFeature(wwFeature);\n      }\n      else {\n        // Handle KML\n        this.worldWindow.removeLayer(this.layers[empFeature.coreId]);\n      }\n\n      // Clear the primitives from the feature\n      wwFeature.clearShapes();\n\n      switch (empFeature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          wwFeature.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n          empFeature.singlePointAltitudeRangeMode = wwFeature.singlePointAltitudeRangeMode;\n          wwFeature.addShapes(constructMilStdSymbol.call(this, empFeature, this.state.selectionStyle));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructAirControlMeasure(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceCircle(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceEllipse(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolyline(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructPlacemark(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfacePolygon(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructSurfaceRectangle(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n          wwFeature.addShapes(EMPWorldWind.editors.primitiveBuilders.constructText(empFeature, this.state.labelStyles));\n          break;\n        case emp3.api.enums.FeatureTypeEnum.KML:\n          // KML is not supported as native primitives in WorldWind\n          return asyncPlotKMLFeature.call(this, empFeature, callback);\n        default:\n          rc.success = false;\n          rc.message = \"Missing feature constructor for format: \" + empFeature.format;\n      }\n\n      // Redraw the new shapes\n      if (rc.success) {\n        // tag empFeature with current range.\n        empFeature.range =  this.worldWindow.navigator.range;\n           // Update the empFeature stored in the wwFeature\n        wwFeature.feature = empFeature;\n        wwFeature.selected = this.isFeatureSelected(wwFeature.id);\n\n        // Update the layer\n        layer.addFeature(wwFeature);\n\n        // Setup the return\n        rc.feature = wwFeature;\n      }\n      callback(rc);\n    },\n    /**\n     *\n     * @param {EMPWorldWind.data.EmpFeature} wwFeature\n     * @this EMPWorldWind.map\n     */\n    updateFeatureLabelStyle: function(wwFeature) {\n      var shapes,\n        empLayer = this.getLayer(wwFeature.feature.parentCoreId);\n\n      switch (wwFeature.feature.format) {\n        case emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL:\n          empLayer.removeFeature(wwFeature);\n          wwFeature.clearShapes();\n          shapes = constructMilStdSymbol.call(this, wwFeature.feature, this.state.selectionStyle);\n          wwFeature.addShapes(shapes);\n          empLayer.addFeature(wwFeature);\n          break;\n        case emp3.api.enums.FeatureTypeEnum.GEO_ACM:\n        case emp3.api.enums.FeatureTypeEnum.GEO_CIRCLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_ELLIPSE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_PATH:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POINT:\n        case emp3.api.enums.FeatureTypeEnum.GEO_POLYGON:\n        case emp3.api.enums.FeatureTypeEnum.GEO_RECTANGLE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_SQUARE:\n        case emp3.api.enums.FeatureTypeEnum.GEO_TEXT:\n        default:\n        // do nothing\n      }\n    }\n  };\n})();\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * Throttles a function to a restrict the number of calls to it to prevent the engine from locking up under heavy use\n * @param {function} fn callback to throttle\n * @param {number} [threshold=20]\n * @param {context} scope\n * @returns {Function}\n */\nEMPWorldWind.eventHandlers.throttle = function (fn, threshold, scope)\n{\n    threshold = threshold || 20; // 20 ms throttle\n    var last, deferTimer;\n\n    return function ()\n    {\n        var context = scope || this;\n\n        var now = +new Date,\n                args = arguments;\n        if (last && now < last + threshold)\n        {\n            clearTimeout(deferTimer);\n            deferTimer = setTimeout(function ()\n            {\n                last = now;\n                fn.apply(context, args);\n            }, threshold);\n        }\n        else\n        {\n            last = now;\n            fn.apply(context, args);\n        }\n    };\n};\n\n/**\n * Notifies the map the view has been updated\n *\n * NOTE: The altitude, latitude, and longitude for the returned view may not be accurate as they are still based on\n * the navigator which is based on the lookAt location.\n *\n * @param {emp3.api.enums.CameraEventType} [viewEventType]\n * @this EMPWorldWind.map\n */\nEMPWorldWind.eventHandlers.notifyViewChange = function (viewEventType)\n{\n    var view = {\n        range: this.worldWindow.navigator.range,\n        tilt: this.worldWindow.navigator.tilt,\n        roll: this.worldWindow.navigator.roll,\n        heading: this.worldWindow.navigator.heading,\n        altitude: this.worldWindow.navigator.range, // TODO this is not correct, just an approximation until camera support\n        location: {\n            lat: this.worldWindow.navigator.lookAtLocation.latitude,\n            lon: this.worldWindow.navigator.lookAtLocation.longitude\n        },\n        bounds: this.getBounds()\n    };\n\n    var lookAt = {\n        range: this.worldWindow.navigator.range,\n        tilt: this.worldWindow.navigator.tilt,\n        heading: this.worldWindow.navigator.heading,\n        altitude: this.worldWindow.navigator.lookAtLocation.altitude || 0,\n        latitude: this.worldWindow.navigator.lookAtLocation.latitude,\n        longitude: this.worldWindow.navigator.lookAtLocation.longitude\n    };\n\n    //optimization . isMapMoving uses an epsilon to reduce the calls to triggerRenderUpdate function.\n    if (this.isMapMoving())\n    {\n        this.empMapInstance.eventing.ViewChange(view, lookAt, viewEventType);\n        this.singlePointAltitudeRangeMode = EMPWorldWind.utils.getSinglePointAltitudeRangeMode(this.worldWindow.navigator.range, this.singlePointAltitudeRanges);\n        this.bounds = this.getBounds();\n       // this.shapesInViewArea = this.pickShapesInViewRegion();\n        EMPWorldWind.eventHandlers.triggerRenderUpdate.call(this);\n        this.lastNavigator.range = this.worldWindow.navigator.range;\n        this.lastNavigator.tilt = this.worldWindow.navigator.tilt;\n        this.lastNavigator.roll = this.worldWindow.navigator.roll;\n        this.lastNavigator.heading = this.worldWindow.navigator.heading;\n        this.lastNavigator.lookAtLocation = emp.helpers.copyObject(this.worldWindow.navigator.lookAtLocation);\n    }\n\n\n\n\n\n};\n\n/**\n * Notify the that a re-render of the MilStd graphics is required based off of a delta from the last time the renderer\n * was called. This may trigger based on altitude delta or distance delta.\n * @this EMPWorldWind.map\n */\nEMPWorldWind.eventHandlers.triggerRenderUpdate = function ()\n{\n    // TODO trigger this less often or on a timer\n    this.state.lastRender.bounds = this.getBounds();\n    this.state.lastRender.altitude = this.worldWindow.navigator.range;\n\n    emp.util.each(Object.keys(this.features), function (featureId)\n    {\n        var feature = this.features[featureId];\n\n        // TODO check if the symbol is visible first\n        if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n                feature.feature.data.type === \"LineString\")\n        {\n            if (this.isMilStdMultiPointShapeInViewRegion (feature.feature) && (!EMPWorldWind.Math.equalsEpsilon(feature.feature.range, this.lastNavigator.range, EMPWorldWind.Math.EPSILON3) ||\n                    feature.feature.wasClipped))\n            {\n                // optimization - update feature only if inside view region and  (range outside range epsilon or was cliiped)\n                this.plotFeature(feature);\n            }\n        }\n        else if (feature.feature.format === emp3.api.enums.FeatureTypeEnum.GEO_MIL_SYMBOL &&\n                feature.feature.data.type === \"Point\")\n        {\n            //optimization\n            var callRenderer = false;\n            feature.singlePointAltitudeRangeChanged = feature.singlePointAltitudeRangeMode !== this.singlePointAltitudeRangeMode;\n\n            if (feature.singlePointAltitudeRangeChanged && (this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.LOW_RANGE) && (this.iconLabelOption !== 'none'))\n            {\n                callRenderer = true;\n                feature.isHighAltitudeRangeImage = false;\n                feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.singlePointAltitudeRangeChanged = false;\n            }\n            else if (feature.singlePointAltitudeRangeChanged && this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.MID_RANGE)\n            {\n                callRenderer = true;\n                feature.isHighAltitudeRangeImage = false;\n                feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.singlePointAltitudeRangeChanged = false;\n            }\n            else if (feature.singlePointAltitudeRangeChanged && this.singlePointAltitudeRangeMode === EMPWorldWind.constants.SinglePointAltitudeRangeMode.HIGHEST_RANGE)\n            {\n                feature.isHighAltitudeRangeImage = true;\n                //  dot image based on affiliation\n                feature.shapes[0].attributes._imageSource = EMPWorldWind.utils.selectHighAltitudeRangeImage(feature.feature.symbolCode);\n                feature.shapes[0].highlightAttributes._imageSource = feature.shapes[0].attributes._imageSource;\n                feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.feature.singlePointAltitudeRangeMode = this.singlePointAltitudeRangeMode;\n                feature.singlePointAltitudeRangeChanged = false;\n            }\n            if (callRenderer)\n            {\n                this.plotFeature(feature);\n            }\n        }\n    }.bind(this));\n    this.worldWindow.redraw();\n};\n\n/**\n *\n * @param mouseEvent\n * @param empEventingArgs\n */\nEMPWorldWind.eventHandlers.extractFeatureFromEvent = function (mouseEvent, empEventingArgs)\n{\n    var obj, i,\n            pickList = this.worldWindow.pick(this.worldWindow.canvasCoordinates(mouseEvent.clientX, mouseEvent.clientY)),\n            len = pickList.objects.length;\n\n    for (i = 0; i < len; i++)\n    {\n        obj = pickList.objects[i];\n        if (!obj.isTerrain)\n        {\n            if (obj.userObject.userProperties && obj.userObject.userProperties.id)\n            {\n                empEventingArgs.coreId = obj.userObject.userProperties.id;\n                empEventingArgs.target = \"feature\";\n                break;\n            }\n        }\n    }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent}\n * @typedef {Object} MouseEvent\n */\n\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent}\n * @typedef {Object} WheelEvent\n */\n\n/**\n * Mouse event handlers\n */\nEMPWorldWind.eventHandlers.mouse = {\n  /**\n   * @param {MouseEvent} event\n   * @this EMPWorldWind.map\n   */\n  click: function(event) {\n    var clickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    clickEvent.type = emp.typeLibrary.Pointer.EventType.SINGLE_CLICK;\n\n    EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, clickEvent);\n    this.empMapInstance.eventing.Pointer(clickEvent);\n  },\n  /**\n   *\n   * @param {MouseEvent} event\n   * @this EMPWorldWind.map\n   */\n  dblclick: function(event) {\n    var dblClickEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    dblClickEvent.type = emp.typeLibrary.Pointer.EventType.DBL_CLICK;\n\n    EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, dblClickEvent);\n\n    this.empMapInstance.eventing.Pointer(dblClickEvent);\n  },\n  /**\n   *\n   * @param {WheelEvent} event\n   * @this EMPWorldWind.map\n   */\n  wheel: function(event) {\n    if (event.wheelDeltaY < 0 && this.worldWindow.navigator.range > EMPWorldWind.constants.view.MAX_HEIGHT) {\n      this.worldWindow.navigator.range = EMPWorldWind.constants.view.MAX_HEIGHT;\n      event.preventDefault();\n    }\n\n    switch (this.state.lockState) {\n      case emp3.api.enums.MapMotionLockEnum.NO_MOTION:\n      case emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN:\n      case emp3.api.enums.MapMotionLockEnum.NO_ZOOM:\n        event.preventDefault();\n        break;\n      default:\n      // business as usual\n    }\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n  },\n  /**\n   * Wrapper for mousedown\n   * @see EMPWorldWind.eventHandlers.mouse.mousedown\n   * @this EMPWorldWind.map\n   */\n  mousedown: function(event) {\n    var mousedownEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n\n    mousedownEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n    EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mousedownEvent);\n\n    this.empMapInstance.eventing.Pointer(mousedownEvent);\n  },\n  /**\n   * @see EMPWorldWind.eventHandlers.mouse.mouseup\n   * @this EMPWorldWind.map\n   */\n  mouseup: function(event) {\n    var mouseupEvent = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    mouseupEvent.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n    // TODO see if features are needed on mouseup\n    // EMPWorldWind.eventHandlers.extractFeatureFromEvent.call(this, event, mouseupEvent);\n\n    if (this.state.dragging) {\n      this.state.dragging = false;\n      EMPWorldWind.eventHandlers.notifyViewChange.call(this, emp3.api.enums.CameraEventEnum.CAMERA_MOTION_STOPPED);\n    }\n\n    this.state.autoPanning = EMPWorldWind.constants.NO_PANNING;\n    this.empMapInstance.eventing.Pointer(mouseupEvent);\n  },\n  /**\n   * @see EMPWorldWind.eventHandlers.mouse.mousemove\n   * @this EMPWorldWind.map\n   */\n  mousemove: function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n\n    var element, elementBounds,\n      smartAreaBuffer = 0.05,\n      pan = {\n        up: false,\n        down: false,\n        left: false,\n        right: false\n      };\n\n    switch (event.buttons) {\n      case 1: // Left button, we're moving the map\n      case 2: // Right button, we're tilting/rotating the map\n        switch (this.state.lockState) {\n          case emp3.api.enums.MapMotionLockEnum.NO_MOTION:\n          case emp3.api.enums.MapMotionLockEnum.NO_PAN:\n          case emp3.api.enums.MapMotionLockEnum.NO_ZOOM_NO_PAN:\n            this.state.dragging = true;\n            event.preventDefault();\n            break;\n          case emp3.api.enums.MapMotionLockEnum.SMART_MOTION:\n            event.preventDefault();\n\n            element = event.srcElement || event.originalTarget;\n            elementBounds = element.getBoundingClientRect();\n\n            // Pan left or right\n            pan.left = event.offsetX < elementBounds.width * smartAreaBuffer;\n            pan.right = event.offsetX > elementBounds.width - (elementBounds.width * smartAreaBuffer);\n\n            // Pan up or down\n            pan.up = event.offsetY < elementBounds.height * smartAreaBuffer;\n            pan.down = event.offsetY > elementBounds.height - (elementBounds.height * smartAreaBuffer);\n\n            if (pan.up || pan.down || pan.left || pan.right) {\n              this.state.autoPanning = pan;\n              this.spinGlobe();\n            } else {\n              this.state.autoPanning = EMPWorldWind.constants.NO_PANNING;\n            }\n            break;\n          case emp3.api.enums.MapMotionLockEnum.UNLOCKED:\n          default:\n            EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n        }\n        break;\n      case 4: // Wheel/middle button\n      case 8: // 4th button (back)\n      case 16: // 5th button (forward)\n      default:\n      // No actions\n    }\n\n    this.state.lastInteractionEvent = event;\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch}\n * @typedef {object} Touch\n */\n\n/**\n * @typedef {object} TouchEvent\n * @property {Touch[]} touches\n */\n\n/**\n * Touch event handlers\n */\nEMPWorldWind.eventHandlers.touch = {\n  /**\n   * Touch down event handler,\n   * Approximates mousedown\n   * @param {TouchEvent} event\n   * @this EMPWorldWind.map\n   */\n  touchstart: function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n\n    coords.type = emp.typeLibrary.Pointer.EventType.MOUSEDOWN;\n    this.state.lastInteractionEvent = event;\n    this.empMapInstance.eventing.Pointer(coords);\n  },\n  /**\n   * Touch end event handler\n   * Approximates mouseup\n   * @this EMPWorldWind.map\n   */\n  touchend: function(/*event*/) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, this.state.lastInteractionEvent.touches[0]);\n\n    coords.type = emp.typeLibrary.Pointer.EventType.MOUSEUP;\n    this.empMapInstance.eventing.Pointer(coords);\n  },\n  /**\n   * Touch cancel event handler, placeholder until it is needed\n   */\n  touchcancel: function(/*event*/) {\n    // Placeholder\n    // var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n    // window.console.debug(event, coords);\n  },\n  /**\n   * Touch move event handler\n   * @param {TouchEvent} event\n   * @this EMPWorldWind.map\n   */\n  touchmove: function(event) {\n    var coords = EMPWorldWind.utils.getEventCoordinates.call(this, event.touches[0]);\n    coords.type = emp.typeLibrary.Pointer.EventType.MOVE;\n    if (coords.lat !== undefined) {\n      this.empMapInstance.eventing.Pointer(coords);\n    }\n\n    // TODO check if map is locked or not before notifying view change\n    this.state.lastInteractionEvent = event;\n    EMPWorldWind.eventHandlers.notifyViewChange.call(this);\n  }\n};","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n/**\n * @typedef {object} WWDragEvent\n */\n\n\n/**\n * The event handlers listed here are not standard DOM drag event handlers. They represent notification functions\n * to alert the core to different drag states.\n *\n * @see WorldWind.DragRecognizer\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.drag = {\n  /**\n   *\n   * @param {WWDragEvent} event\n   * @this EMPWorldWind.map\n   */\n  began: function (/*event*/) {\n    //window.console.debug(event);\n  },\n  /**\n   *\n   * @param {WWDragEvent} event\n   * @this EMPWorldWind.map\n   */\n  changed: function (/*event*/) {\n    //window.console.debug(event);\n  },\n  /**\n   *\n   * @param {WWDragEvent} event\n   * @this EMPWorldWind.map\n   */\n  ended: function (/*event*/) {\n    //window.console.debug(event);\n  }\n};\n","var EMPWorldWind = EMPWorldWind || {};\nEMPWorldWind.eventHandlers = EMPWorldWind.eventHandlers || {};\n\n/**\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events}\n * @typedef {object} PointerEvent\n */\n\n/**\n * Pointer events are currently aliases for their mouseevent counterparts\n *\n * @namespace\n */\nEMPWorldWind.eventHandlers.pointer = {\n  /**\n   * Wrapper for mousedown\n   * @see EMPWorldWind.eventHandlers.mouse.mousedown\n   * @this EMPWorldWind.map\n   */\n  pointerdown: EMPWorldWind.eventHandlers.mouse.mousedown,\n  /**\n   * @see EMPWorldWind.eventHandlers.mouse.mouseup\n   * @this EMPWorldWind.map\n   */\n  pointerup: EMPWorldWind.eventHandlers.mouse.mouseup,\n  /**\n   * @see EMPWorldWind.eventHandlers.mouse.mousemove\n   * @this EMPWorldWind.map\n   */\n  pointermove: EMPWorldWind.eventHandlers.mouse.mousemove\n};"]}